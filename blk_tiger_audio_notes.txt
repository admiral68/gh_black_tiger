*****************************************************************************************
* GENERAL NOTES:                                                                        *
*****************************************************************************************

HOW TO: TEST AUDIO CLIPS
0) Start MAME debugger for blktiger (mame -debug blktiger)
1) set bp 1b4 in maincpu
2) CTRL+M. Set watch to E150
3) F5 (continue)
4) set pc=1ac when bp 1b4 is hit
5) F5 (continue). This puts Black Tiger into test mode.
6) Put values from 0h to 43h into E151 (in memory watch window). 0, 1F, and 38 will not play sounds. They stop the current sound.
7) Change byte at E162 to 51 (in memory watch window). Voila. Sound plays.

PLAN FOR PORTING AUDIO:

1) Rip YM2203 data from sound rom
2) Interpret YM2203 data: find instruments, wavelets, etc...
3) Put each sound/song into an intermediate format
4) Translate that intermediate format into something protracker can play on the Amiga hardware


                             SOUNDS_TABLE                                    XREF[1]:     Maybe_PlaySoundEffect:020e(*)
        ram:0dc1 00 ff           dw         FF00h                                            Sound 0: FF stops music playing
        ram:0dc3 49 0e           dw         PLAYER_LOSES_VITALITY_SOUND                      = 8Fh
        ram:0dc5 9e 0e           dw         PLAYER_DEATH_SOUND                               = 8Fh
        ram:0dc7 7f 0f           dw         ENEMY_INJURED_BLOOP_SOUND                        = CFh
        ram:0dc9 d4 0f           dw         ENEMY_DEFEATED_SOUND                             = CFh
        ram:0dcb fe 0f           dw         ITEM_TAKEN_SOUND                                 = 88h
        ram:0dcd 7b 10           dw         PLAYER_TAKES_ZENNY_COIN_SOUND                    = 88h
        ram:0dcf f5 10           dw         FIRE_PILLAR_WARNING_SOUND                        = 88h
        ram:0dd1 5e 11           dw         POT_BREAKS_REVEALS_COIN_SOUND                    = C8h
        ram:0dd3 c7 11           dw         FIRE_PILLAR_SOUND                                = C8h
        ram:0dd5 08 12           dw         GAS_JET_SOUND                                    = C8h
        ram:0dd7 32 12           dw         WEAPON_CLASH_METALLIC_BATTLE_SOUND               = 88h
        ram:0dd9 84 12           dw         KILL_BAT_SOUND                                   = C8h
        ram:0ddb ae 12           dw         PLAYER_EARNS_EXTRA_LIFE_SOUND                    = 8Fh
        ram:0ddd 64 13           dw         POT_BREAKS_SOUND                                 = 88h
        ram:0ddf bc 13           dw         PLAYER_DISCOVERS_TREASURE_SOUND                  = C8h
        ram:0de1 86 14           dw         BIG_BOSS_HIT_SOUND                               10
        ram:0de3 b0 14           dw         TIME_EXPIRING_SOUND                              = 81h
        ram:0de5 ee 14           dw         PLAYER_GETS_ITEM_FROM_OLD_MAN_SOUND              = 88h
        ram:0de7 cc 15           dw         BOOM_EXPLOSION_SOUND                             = C8h
        ram:0de9 0d 16           dw         UNKNOWN_ALARM_SOUND                              = 81h
        ram:0deb 4e 16           dw         IMPACT_SOUND                                     = C8h
        ram:0ded 78 16           dw         CLASH_SPINNING_COIN_SOUND                        = C8h
        ram:0def a2 16           dw         PLAYER_LOSES_ARMOR_SOUND                         = 8Fh
        ram:0df1 08 17           dw         MICHELIN_MAN_FIREBREATHING_SOUND                 = C8h
        ram:0df3 35 17           dw         FIRETHROWER_TAUNT_SOUND                          = C8h
        ram:0df5 b2 17           dw         PLAYER_CLIMB_SOUND                               = 88h
        ram:0df7 c8 17           dw         FLAIL_EMPTY_HIT_SOUND                            = 88h
        ram:0df9 de 17           dw         PLAYER_LANDS_ON_PLATFORM_SOUND                   = 88h
        ram:0dfb 1c 18           dw         PLAYER_ASCENDS_DURING_CUTSCENE_SOUND             = 88h
        ram:0dfd 32 18           dw         PLAYER_GRABS_LADDER_SOUND                        = 88h
        ram:0dff 01 ff           dw         FF01h                                            1f: stops playing music
        ram:0e01 10 1b           dw         COIN_OR_CREDIT_ADDED_SOUND                       = 4Fh    O
        ram:0e03 8c 1b           dw         LEVEL_1_MUSIC                                    Level 1 music
        ram:0e05 de 1f           dw         LEVEL_2_MUSIC                                    = 06h
        ram:0e07 ef 23           dw         LEVEL_3_MUSIC                                    = 06h
        ram:0e09 b7 27           dw         LEVEL_4_MUSIC                                    = 06h
        ram:0e0b 27 2d           dw         LEVEL_5_MUSIC                                    = 06h
        ram:0e0d 07 32           dw         LEVEL_6_MUSIC                                    = 06h
        ram:0e0f c4 35           dw         LEVEL_7_MUSIC                                    = 06h
        ram:0e11 7c 3a           dw         LEVEL_8_MUSIC                                    Level 8 music
        ram:0e13 cb 3f           dw         BOSS_MUSIC_01                                    = 06h
        ram:0e15 f5 41           dw         FIGHT_DRAGON_MUSIC_01                            = 06h
        ram:0e17 8b 44           dw         FIGHT_DRAGON_MUSIC_02                            = 06h
        ram:0e19 70 47           dw         OLD_MAN_SHOP_MUSIC                               = 06h
        ram:0e1b 7e 49           dw         DUNGEON_MUSIC_01                                 = 06h
        ram:0e1d 96 4b           dw         ENTER_INITIALS_MUSIC                             = 06h
        ram:0e1f 9d 51           dw         AFTER_ENTER_INITIALS_MUSIC                       = 06h
        ram:0e21 82 52           dw         INTRO_MUSIC                                      30
        ram:0e23 48 54           dw         GAME_OVER_MUSIC                                  = 06h
        ram:0e25 13 55           dw         SUCCESSFULLY_FINISH_LEVEL_MUSIC                  = 06h
        ram:0e27 fa 55           dw         FINISH_LEVEL_8_MUSIC                             = 06h
        ram:0e29 a4 5e           dw         CONTINUE_MUSIC                                   = 06h
        ram:0e2b 51 60           dw         MAYBE_PERFECT_BONUS_MUSIC                        = 06h
        ram:0e2d d2 60           dw         UNKNOWN_FANFARE_MUSIC                            = 06h
        ram:0e2f 6d 61           dw         UNKNOWN_FANFARE_MUSIC_02                         = 06h
        ram:0e31 04 ff           dw         FF04h                                            38 stops music playing
        ram:0e33 36 62           dw         UNKNOWN_FANFARE_MUSIC_03                         = 06h
        ram:0e35 5c 18           dw         FLAIL_HIT_SOUND                                  = 88h
        ram:0e37 86 18           dw         FALLING_SOUND                                    = C1h
        ram:0e39 9c 18           dw         BOUNCING_SOUND_(LOOPS)                           = C1h
        ram:0e3b c9 18           dw         OLD_MAN_TALKING_SOUND                            = C8h
        ram:0e3d 57 19           dw         OLD_MAN_TALKING_SOUND_02                         = C8h
        ram:0e3f a9 19           dw         DRAGON_DIE_SOUND                                 = 90h
        ram:0e41 90 1a           dw         MAYBE_BLOCK_BOUNCE_UP_SOUND                      40
        ram:0e43 ba 1a           dw         FALLING_SOUND_02                                 = C8h
        ram:0e45 d0 1a           dw         BOSS_HIT_SOUND                                   = C8h
        ram:0e47 e6 1a           dw         DRAGON_SPEW_FIRE_SOUND                           43 might be the last sound


*****************************************************************************************
* SOUND ROM NOTES:                                                                      *
*****************************************************************************************

audiocpu: C001 sound one? c800 sound 2?

c500 - queue for YM1. C515 start ptr (big endian) C517 end ptr (big endian) c51b - Original control value (from A)
C530 - queue for YM2. C545 start ptr (big endian) C547 end ptr (big endian) c54b - Original control value (from A)


*****************************************************************************************
* MAME NOTES:                                                                           *
*****************************************************************************************

    map(0x0000, 0x7fff).rom();
    map(0xc000, 0xc7ff).ram();
    map(0xc800, 0xc800).r("soundlatch", FUNC(generic_latch_8_device::read));
    map(0xe000, 0xe001).rw("ym1", FUNC(ym2203_device::read), FUNC(ym2203_device::write));
    map(0xe002, 0xe003).rw("ym2", FUNC(ym2203_device::read), FUNC(ym2203_device::write));

	ym2203_device &ym1(YM2203(config, "ym1", XTAL(3'579'545))); /* verified on pcb */
	ym1.irq_handler().set_inputline(m_audiocpu, 0);
	ym1.add_route(ALL_OUTPUTS, "mono", 0.15);

	ym2203_device &ym2(YM2203(config, "ym2", XTAL(3'579'545))); /* verified on pcb */
	ym2.add_route(ALL_OUTPUTS, "mono", 0.15);
	
//*********************************************************
//  YM2203 DEVICE
//*********************************************************

DEFINE_DEVICE_TYPE(YM2203, ym2203_device, "ym2203", "YM2203 OPN")

//-------------------------------------------------
//  ym2203_device - constructor
//-------------------------------------------------

ym2203_device::ym2203_device(const machine_config &mconfig, const char *tag, device_t *owner, uint32_t clock) :
    ymfm_ssg_device_base<ymfm::ym2203>(mconfig, tag, owner, clock, YM2203)
{
}


//-------------------------------------------------
//  device_start - start of emulation
//-------------------------------------------------

void ym2203_device::device_start()
{
    // set our target output fidelity
    m_chip.set_fidelity(SSG_FIDELITY);

    // call our parent
    parent::device_start();
}


ymopn.h
    map(0xe000, 0xe001).rw("ym1", FUNC(ym2203_device::read), FUNC(ym2203_device::write));
    map(0xe002, 0xe003).rw("ym2", FUNC(ym2203_device::read), FUNC(ym2203_device::write));


*****************************************************************************************
* PMD/MMF NOTES:                                                                        *
*****************************************************************************************

General Instruments datasheet for the AY-3-8910A

I didn't get the lpt working, but I did manage to get it working with the avr, thank you for the offer of the fax though, 
Cliff (the first computer I owned was a cpc464 btw, go Amstrad!) Turns out I wasn't sending an inactive signal to the Bus 
Direction/Control lines after sending a bus control signal.

In case anyone else tries this:

Remember that registers R0-R17 are in octal form in some data sheets, so R10 = 0x08, R11 = 0x09, R12 = 0x0A etc 
(the YM2149 datasheet uses hex numbering) Assuming that PORTD0-7 outputs to the PSG data ports DA0-DA7. 
PORTC0 = BDIR and PORTC1 = BC1 (BC2 is tied to 5+v) Remember to toggle the reset line when appropriate, otherwise you
will get unpredictable sounds.

A send function:

void send_ay(int reg, int data){
PORTC = 0x00; //send 'inactive', logical 0 to BDIR/BC1
PORTD = reg; //put register number on data port
PORTC = 0x03; //send 1 to BDIR/BC1 to latch register address
PORTC = 0x00; //inactive
PORTD = data; //data to send to previously selected register
PORTC = 0x01; //send 1 to BDIR, 0 to BC1 to latch data to register
}

Test sound:

Output tone on all channels -

send_ay(0x00,0xFE);//Set Channel A Tone Period
send_ay(0x01,0x00);

send_ay(0x02,0xFE);//Set Channel B Tone Period
send_ay(0x03,0x00);

send_ay(0x04,0xFE);//Set Channel C Tone Period
send_ay(0x05,0x00);

send_ay(0x07,0xF8); //Output on channels ABC
send_ay(0x08,0x0F);//Channel A Amplitude
send_ay(0x09,0x0F);//Channel B Amplitude
send_ay(0x0A,0x0F);//Channel C Amplitude


*****************************************************************************************
* LINKS:                                                                                *
*****************************************************************************************


https://delmunsoft.com/PMD%20Programming.html
https://github.com/gzaffin/pmdmini
https://battleofthebits.org/lyceum/View/Professional+Music+Driver+%28PMD%29/

https://github.com/mamedev/mame/blob/master/src/devices/sound/ymopn.h
https://github.com/mamedev/mame/blob/master/3rdparty/ymfm/src/ymfm.h
https://github.com/mamedev/mame/blob/master/3rdparty/ymfm/src/ymfm_fm.h
https://github.com/mamedev/mame/blob/master/3rdparty/ymfm/src/ymfm_opn.h
https://github.com/mamedev/mame/blob/master/3rdparty/ymfm/src/ymfm_adpcm.h
https://github.com/mamedev/mame/blob/master/src/devices/sound/ymfm_mame.h
https://github.com/mamedev/mame/blob/master/3rdparty/ymfm/src/ymfm_ssg.h
https://github.com/mamedev/mame/blob/master/3rdparty/ymfm/src/ymfm_ssg.cpp




===============================================================================

	MusicCompiler "MC.EXE" ver.4.8 Document for PMD
						by M.Kajihara(KAJA)

===============================================================================

>MC [/Option[/Option]...] MML file name [.MML] FM voice file name [.FF] extension can be omitted

	When used as, a .M file will be created from the .MML unless there is an error.
	If there is an error, the program will display the error location and error message at that point and exit.
	M file.

	Most of the uploaded MML data is stored in
>MC /V/P filename[.MML].
	Most of the uploaded MML data can be compiled and played by using >MC /V/P filename[.MML].

	See PMDMML.MAN for MML specifications.

(Note) If you use this compiler after PMD is resident, the size of the PMD voice data buffer will be
	(Note: When using this compiler after PMD is resident, keep the default size of the PMD voice data buffer at 8KB. (->PMD's /V option)

===============================================================================
	About options
-------------------------------------------------------------------------------
	If the environment variable "MCOPT=" is defined, the string will be automatically
	option.

	If there is a conflict with an option on the command line that cannot be used at the same time
	If there is a conflict with an option that cannot be used on the command line at the same time, the option on the command line will take precedence.

	The available options are as follows

-------------------------------------------------------------------------------
/V
-------------------------------------------------------------------------------
	Attach the FM tone data used in the song to the compiled song data.
	The FM tone data used in the song is attached to the compiled song data. If the FM voice data file name is specified after the MML file
	If the FM voice data file name is specified after the MML file name, and if it exists, this option is automatically
	If the FM voice data file name is specified after the MML file name and it exists, this option is automatically specified.

-------------------------------------------------------------------------------
/VW
-------------------------------------------------------------------------------
	Use this option to create or modify a .FF file from a .MML file.

	FF from .MML. It is effective only when the FM tone data file name is specified.

1) When the FM voice data file does not exist
	　1) If no FM voice data file exists, a new FM voice data file is created after compilation.
	　In this case, the data is created by adding the FM voice data defined in MML to the voice data buffer in PMD.
	　In this case, the data created is an updated version of the FM voice data defined in MML.

2) When an FM voice data file exists
	　After compilation, the FM voice data file is rewritten.
	　The data to be written will overwrite the specified tone file in the tone data buffer in the PMD.
	　overwrites the specified tone file in the tone data buffer in PMD, and updates the FM tone data specified in MML.
	　The data to be written overwrites the specified tone file in the PMD's tone data buffer and updates the FM tone data specified in the MML.

-------------------------------------------------------------------------------
/N
-------------------------------------------------------------------------------
	Compile with OPN specification (no DT2/ABCDEF=FM,GHI=SSG).
	This is the default, so you don't need to specify it.

-------------------------------------------------------------------------------
/L
-------------------------------------------------------------------------------
	Compile with OPL specification (2op tones/ABCDEFGHI=FM).
	Use this only when creating songs for PMD on IBMPC.

-------------------------------------------------------------------------------
/M
-------------------------------------------------------------------------------
	Compile with OPM specification (with DT2/ABCDEFGH=FM).
	Used only when creating songs for PMD on X68000.

-------------------------------------------------------------------------------
/T
-------------------------------------------------------------------------------
	Compile with TOWNS specification (no DT2/ABCDEF=FM, JK=PCM).
	Use only when creating songs for FM-TOWNS PMD.

-------------------------------------------------------------------------------
/P
-------------------------------------------------------------------------------
	Plays immediately after compiling; invalid if PMD is not resident.

-------------------------------------------------------------------------------
/S
-------------------------------------------------------------------------------
	Play immediately after compiling without saving the data.

	If you want to play .MML without creating .M, or if you are creating a floppy-based song, you can use this function to reduce compilation time.
	MML without creating .M, or to shorten the compilation time when creating a floppy-based song.

	MML without creating .
	There is no point in specifying it.

-------------------------------------------------------------------------------
/A
-------------------------------------------------------------------------------
	Do not load PCM data.
	When PMDB2/PMDVA/PMD86 is resident, PCM data specified by #PCMFile etc. in MML is loaded when playing a song.
	This option suppresses this.

	This option is meaningless unless the performance option (/P,/S) is specified.

-------------------------------------------------------------------------------
/O
-------------------------------------------------------------------------------
	Suppresses the display of the Title string.
	As soon as the performance starts, the PCM file name, song title, composer/arranger name, and notes will be displayed.
	If they are defined in MML, they will be displayed.

	This option suppresses them. It is useless unless the performance option (/P,/S) is specified.

-------------------------------------------------------------------------------
/C
-------------------------------------------------------------------------------
	Displays the length of each part after compiling. ( Whole / After specifying L )
	This is useful for CHECKing if there is a gap in the loop.

	However, if there is a local infinite loop such as [ ... ] 0, the length will not be displayed.
	However, if there is a local infinite loop such as [ ... ] 0, the length will not be displayed.

-------------------------------------------------------------------------------

Note! Note!	The maximum compileable size of MML data and #include files specified in MML is 61KB.
	MML data and #include files specified in MML is 61KB (62,464bytes).
	If the total size of MML files larger than this, or files specified in #include
	The maximum size of the compiled data is 61KB (62,464bytes).
	Also, the maximum size of the compiled data is 63KB (64,512bytes).

===============================================================================
	How to handle FM sound data (hereinafter referred to as "sound")
-------------------------------------------------------------------------------

	The handling of voices in MC.EXE is complicated in many ways. At first, you need to

1) Define all voices to be used in the song in MML.
2) Always specify the /V option.

	As long as you keep these two points in mind, you shouldn't be too confused.
	When you get used to it, please read the following explanations and try to use it more.

-------------------------------------------------------------------------------

	Most other music drivers define all their tones in MML.
	In the case of MC.EXE, however, the following types of tone sources are available.

-------------------------------------------------------------------------------
1) Tones defined in MML.
-------------------------------------------------------------------------------
	1) Voices defined in MML, which are automatically used by specifying the /V option.

It is a tone that is normally defined in MML. Even if this is all you need
	There is no problem.

ex.
>mc /v sample1.mml
Condition/ All the voices used in the song are defined in sample1.mml.
Result/ All the tones are defined in MML, and
	A song data with tone data is created.

-------------------------------------------------------------------------------
2) A file with the extension .FF, created by the supplied voice editor "VED.EXE".
------------------------------------------------------------------------------- 1.
1. voice file name is specified in the command line. 2.
2. the voice used is not defined in MML.
	If the following two conditions are met, the file will be used.

	For example, if you create a song using only 88 preset tones, you can use the included "PC88.
	If you want to create a song with only 88 preset sounds, you only need to add the voice file name "PC88.FF" to the command line at compile time.
	For example, if you want to create a song with only 88 preset tones, you can simply add the attached "PC88.FF" voice file name to the command line at compile time.

ex.1
>mc sample2 effec
Condition1/ None of the voices are defined in sample2.mml.
Condition 2: effec.ff has a maximum of 256 voices defined in it.
Result: All the voices are used from effec.ff.
	A song data with tone data is created.

ex.2
>mc sample3 effec
Condition 1: Only some of the voices are defined in sample3.mml.
Condition 2: effec.ff has the maximum of 256 voices defined in it.
Result: Undefined voices are used from within effec.ff, and
	The undefined voices are used from within effec.ff, and song data with tone data is created.

-------------------------------------------------------------------------------
3) Tones in the PMD internal tone data area.
------------------------------------------------------------------------------- 1.
1. the /V option or a tone file name is specified on the command line. 2.
The voice used is not defined in MML. 3.
If a tone file name is specified, it is not defined in the tone file either.
	(For example, if a voice file with voice data up to @128 is specified, and @200 is used in the MML, and
	 200 is used in the MML and the voice is not defined in the MML). 4.
4) PMD is resident.
	PMD is automatically used when the following four conditions are met.
	If only condition 4 is not met, the PMD voice data area is assumed to be 00H.
	If only 4. is not met, it is assumed that all the tone data areas in the PMD are 00H.
	
	FF format voices created by VED.EXE can be transferred to the PMD using VSET.COM.
	FF format created by VED.EXE can be transferred to PMD by VSET.
	FF to PMD by VSET, it is not necessary to specify PC88.FF in the command line when compiling.
	FF to the command line during compilation.

ex.1
>mc /v sample4
Condition 1: There are no voices defined in sample4.mml.
Condition 2: PMD is resident.
Result: A song data with tone data is generated by using a tone in the PMD tone data area.
	A song data with tone data is created using the tones in the PMD tone data area.

ex.2
>mc sample5 pc88
Condition 1: There is no tone defined in sample5.mml.
Condition 2/ In sample5.mml, all the voices from @0 to @255 are used evenly.
Condition 3/ Data from @0 to @126 is defined in pc88.ff.
Condition 4: PMD is resident.
FF up to @126, and PMD voice data area from @127.
	FF up to @126, and PMD tone data area from @127 onwards.

ex.3 (Failure example)
>mc /v sample6
Condition 1: Only some voices are defined in sample6.mml.
Condition 2: PMD is not resident.
Result: The rest of the tones not defined in MML are not pronounced.
	A song data with tone data is created.

-------------------------------------------------------------------------------
4) Do not include any tones in the song data.
-------------------------------------------------------------------------------
	If neither the /V option nor the tone file name is specified on the command line, the following error message is displayed
	If neither the /V option nor the voice file name is specified in the command line, the voice is not defined in the song data even if it is defined in the MML.

	In this case, the voice in the PMD's internal voice buffer will be used when playing.
	In a sense, this is a special case.

	In a sense, this is special and hardly used, but the song data created in this way can be used for multiple voices of the same song data.
The same song data can be played with multiple tone sets.
The same song data can be played with multiple tone sets.
	It is possible to do the following

ex.1
>mc sample7
Condition/ All the voices are defined in sample7.mml.
Result: All defined voices are ignored and a song data without voice data is created.

ex.2
>mc /vw sample8 test
Condition1/ All the voices are defined in sample8.mml.
Condition 2: test.ff does not exist.
Result: "test.ff" is created by adding the voices in sample8.mml to the voice data in PMD.
	The song data without tone data is created.

===============================================================================
	About the PMD environment variable
-------------------------------------------------------------------------------
	Compile-time MML file, tone file, #Include file, and
	PCM files at the time of performance (/P,/S option), if they are not found in the current
	If they are not found in the current directory, they will be searched for in the environment variable specified by SET PMD=.
	The format is exactly the same as SET PATH=.

	Also, in the current version, even if the path name is written in the file, if it is not found
	In the current version, even if the path name is written in the file, if it is not found, the specified path will be deleted and SET PMD= will search for the specified path.
	If the path is not found, it will be deleted and SET PMD= will search for the specified path.

	As with the PATH environment variable, it is better to write the path you use most often first, especially if you are using a DISK-based system.
	As with the PATH environment variable, especially for DISK-based use, it is better to write the most frequently used paths first to speed up the search.
	Please think carefully about the order in which you set them.

===============================================================================
	About the environment variables USER, COMPOSER, and ARRANGER
-------------------------------------------------------------------------------
	If #Composer and #Arranger are not specified in the MML, the following environment variables are used

	In the case of #Composer, the
	In the case of #Composer, look for the environment variables "COMPOSER=" and "USER=".

	In the case of #Arranger, search for the environment variables "ARRANGER=" and "USER=".
	In the case of #Arranger, search for the environment variables "ARRANGER=" and "USER=".

	and if found, use the string defined there.
	In case of duplication, the environment variables "COMPOSER" and "ARRANGER" will take precedence.

===============================================================================
--------Exsamples
-------------------------------------------------------------------------------

>mc /v/p sam1
	Compile and play sam1.mml.
	Attach the tone data in the song data.

>mc /o/p sam2
	Compile and play sam2.mml. In this case, the title string is not displayed.
	The tone data is not attached to the song data, but is played using the PMD internal tone data.
	The tone data is not attached to the song data.

>mc /a/p sam4
	Compile and play sam4.mml. In this case, ADPCM data is not defined.
	The tone data is not attached to the song data, but is played using the PMD internal tone data.
	The tone data is not attached to the song data.

>mc /v/vw/p sam3 effec
	Compile and play sam3.mml.
	Update the FM tone data defined in MML in effec.ff.
	Attach the tone data in the song data.

===============================================================================
			----- End of MC.DOC -----
===============================================================================





...............


===============================================================================

Professinal Music Driver [P.M.D.] version4.8 MML Command Manual*.

					Apr.4th 1997 by M.Kajihara (KAJA)

===============================================================================
*******************************************************************************
§1 [[[[ Basic information ]]]]
*******************************************************************************
===============================================================================

	This section describes the basics of MML notation.

===============================================================================
§1-1 Part notation
-------------------------------------------------------------------------------
§1-1-1 Part notation methods
-------------------------------------------------------------------------------
	At the beginning of a line, specify the letter of the alphabet that is assigned to each part.
	The MML is compiled in order from the beginning.

	MMLs are compiled and played in order from the beginning.

	The part symbol and MML must be separated by SPACE or TAB.

[Example]
A @1v13cdefg
	The MML will be played in part A. [Result] The MML will be played in part B.

[Failure Example 1] A @1v13cdefg
 A @1v13cdefg
	[Cause] Part symbol is not at the beginning of a line.
	[Result: This MML will not be recognized and will be treated as a comment.

[Failure Example 2]
A@1v13cdefg
	[Cause] There is no SPACE or TAB between the part symbol and the MML.
	[Result: The MML is treated as a multi-part notation (->§1-1-2).

-------------------------------------------------------------------------------
§1-1-2 Multiple part notation
-------------------------------------------------------------------------------
	You can specify multiple part symbols.

	If you want to specify more than one part, do not leave any space between them.
	When specifying multiple part symbols, do not leave any space between them.

	If you specify a part symbol that does not exist, it will not cause an error and will be skipped.

	This can also be used to make MML easier to read by placing numbers immediately after part symbols.
	This can be used to make the MML easier to read. This is especially useful for rhythm parts (->§1-2).

[Example 1]
AC @1v13cdefg
	This MML will be played in parts A and C. [Result

[Example 2]
AC1 @1v13cdefg
	[Result] This MML will be played in parts A and C.
		The "1" is ignored.

[Failure example]
A C @1v13cdefg
	[Cause] The part symbols are far apart.
	[Result] "C" is recognized as an MML command.

[Related] A C @1v13cdefg
	| command (->§16-3)

-------------------------------------------------------------------------------
§1-1-3 Correspondence between part symbols and sound sources
-------------------------------------------------------------------------------
	The assignment of part symbols to sound sources differs depending on the driver (sound source).

	The table below shows how the part symbols and sound sources are assigned to each driver (sound source), and the parts marked "optional" can be set by the user.
	(->§2-18,->) (->§2-18,->§2-25) 1.

PMD.COM / PMDVA1.COM (98,88VA1 normal sound source)
	A FM sound source 1
	B FM sound source 2
	C FM sound source 3
	Dor optional FM sound source 3
	For optional FM sound source 3
	For any FM sound source 3
	G SSG 1
	H SSG 2
	I SSG sound source 3
	K Rhythm pattern specification
	R Rhythm pattern definition
[Related]
	#FM3Extend command (->§2-18) 2.

PMDB2.COM / PMD86.COM / PMDVA.COM (SpeakBoard, OtoBei, 86, VA2)
	A FM sound source 1
	B FM sound source 2
	C FM sound source 3
	D FM sound source 4
	E FM sound source 5
	F FM sound source 6
	G SSG 1
	H SSG 2
	I SSG 3
	J PCM sound source
	K Rhythm pattern specification
	R Rhythm pattern definition
	Optional 1 FM sound source 3
	Optional 2 FM sound source 3
	Optional 3 FM sound source 3
[Related]
	#FM3Extend command (->§2-18) 3.

3. PMD.X (X68000)
	A FM source 1
	B FM source 2
	C FM source 3
	D FM sound source 4
	E FM sound source 5
	F FM sound source 6
	G FM sound source 7
	H FM sound source 8
	J PCM sound source
[Related]
	MC.EXE /m option (-> MC.DOC) 4.

4. for PMD.EXP (FM-TOWNS)
	A FM sound source 1
	B FM sound source 2
	C FM sound source 3
	D FM sound source 4
	E FM sound source 5
	F FM sound source 6
	J PCM source 1
	K PCM sound source 2
[Related]
	MC.EXE /t option (-> MC.DOC) 5.

5. for PMDIBM.COM (IBMPC)
	A FM sound source 1
	B FM sound source 2
	C FM sound source 3
	D FM source 4
	E FM source 5
	F FM sound source 6
	G FM sound source 7
	H FM sound source 8
	I FM sound source 9
[Related]
	MC.EXE /l option (-> MC.DOC)

6. for PMDPPZ.COM (86)
	A FM source 1
	B FM Source 2
	C FM source 3
	D FM source 4
	E FM source 5
	F FM sound source 6
	G SSG 1
	H SSG 2
	I SSG sound source 3
	J PCM sound source (played only when Chibi-oto is installed)
	K Rhythm pattern specification
	R Rhythm pattern definition
	Optional 1 FM sound source 3
	Optional 2 FM sound source 3
	Optional 3 FM sound source 3
	Optional 4 PCM sound source 1 for PPZ8
	Optional 5 PCM sound source 2 for PPZ8
	6 optional PCM sound source 3 for PPZ8
	7 optional PCM sound source 4 for PPZ8
	8 optional PCM sound source 5 for PPZ8
	9 optional PCM sound source 6 for PPZ8
	10 optional PCM sound source 7 for PPZ8
	11 optional PCM sound source 8 for PPZ8

[Related]
	#FM3Extend command (->§2-18)
	#PPZExtend command (->§2-25)

===============================================================================
§1-2 How to use the rhythm part (K/R)
-------------------------------------------------------------------------------
§1-2-1 When playing the PMD built-in SSG drums
-------------------------------------------------------------------------------
	The K/R part is basically a part for playing the SSG drums built into PMD.
	The K/R part is basically the part that plays the SSG drums built into the PMD.

	However, if PPSDRV (->PPSDRV.DOC) is resident and PMD supports it, you can use
	(DOC is resident and PMD supports it, this part plays the SSGPCM voice.

	Note that this is not a dedicated part for the YM2608 rhythm instrument. (->§1-2-2)

	The R part defines the pattern, and the K part specifies the order in which the pattern is played.
	The R part defines the pattern, and the K part specifies the order in which the pattern is played.

	The R part is internally numbered from 0 to 255 in the order of definition.
	To specify the order in which the patterns are played, use the R command (->§6-7) in the K part.
	You can use the R command (->§6-7) in the K part to specify the performance order.

[Example]
K R0 L [R1]3R2
R0 l16[@64c]4
R1 l8 @1c@128c@2c@128c
R2 @1c@16c@8c@4c
	[The intro contains the Snare2 roll (line 2, R0) and the 8-beat pattern (line 3, R0).
		The 8-beat pattern (line 3, R1) is repeated three times, and
		This is followed by a tumb fill-in (line 4, R2), and then a loop.

	The numbers after the part symbol R are dummies and can be omitted, but it is easier to understand if they are written down.
	(->§1-1-2) (->§1-1-2)

[Related]
	R command (->§6-7)
	@ command (->§6-1)

-------------------------------------------------------------------------------
§1-2-2 To play the YM2608 rhythm instrument
-------------------------------------------------------------------------------
	PMD does not have a dedicated part for the YM2608 rhythm instrument, but you can use the
	However, the rhythm instrument commands (->§14) can be written in any part, so you can use
	However, the rhythm instrument commands (->§14) can be written in any part, so it is convenient to specify the SSG rhythm part (K/R) that plays the same rhythm.

[Example.]
K \V63\vs31\vb31\vh15\vt31 ;Set the rhythm sound volume
K R0 L [R1]3R2
R0 l16[\sr]4
R1 l8\br\hr\\sr\hr
R2 \br\tr\tr\tr\tr
	[The same rhythmic pattern as in the example in §1-2-1, but without the rise and fall of the toms
		The same rhythmic pattern as in the example in §1-2-1, but without the up and down toms, will be played using the rhythm sound source.

	However, the rhythm source command (->§14) can be used in basically any part.
	However, the rhythm sound command (->§14) can be used in basically any part, so there is no harm in using it in the FM or SSG sound parts.
	However, the rhythm sound command (->§14) can be used in basically any part.

[It can be used in FM or SSG parts.]
	MML commands and rhythm commands (->§14)

-------------------------------------------------------------------------------
§1-2-3 About the SSG sound part used by SSG rhythm in the K/R part
-------------------------------------------------------------------------------
	The SSG rhythm played by the K/R part uses the third channel of SSG.
	The SSG rhythm played by the K/R part uses the third channel of SSG, which will cause a conflict with the I part.

	It is best not to use them at the same time, but if you do
	However, if you do, the following rules apply

1) When one of the two parts is keyed on, the other part will be muffled.
2) If both parts are turned on at the same time, the K and R parts will take priority.

===============================================================================
§1-3 Numerical notation method
-------------------------------------------------------------------------------
	Numeric values can be written in decimal or hexadecimal notation.

	For hexadecimal notation, prefix the number with "$".

	The internal counter value can be specified directly by prefixing "%" only when specifying the tone length.
	You can specify the internal counter value directly by prefixing "%".

	You can use space or tab to leave a space between the command name and the parameter value.
	However, a comma must be placed immediately after the numerical value.
	[Example 1

[Example 1] c4
[The result is a quarter-note do.

[Example 2] c$10
[The result is a 16th note do.

[Example 3] c%12
[Result] The do of an eighth note (internal clock 12) will be specified.

[Example 4] MA 12, 1, 8, 2
[Result] The space between the two is ignored, and the result is equivalent to MA12,1,8,2.

[failure example]
	MB 12 , 1 , 8 , 2
[Result: Error. No space is allowed between a number and a comma.

===============================================================================
§1-4 Notation for comments
-------------------------------------------------------------------------------
	If you want to write a comment inside MML, you should basically write
	If you want to write a comment in MML, you should write a ; symbol (->§16-5) and a newline as a comment.

[Example 1]
A @13 v13 ; A.Piano
			~~~~~~~~~~ comment

	However, if there is a SPACE or TAB at the beginning of a line, the entire line is treated as a comment, even if there is no ; symbol.
	However, if a line is prefixed with SPACE or TAB, the entire line is treated as a comment, even if there is no ; symbol.

[Example 2]
	Part A (<-Comment)
A ...
B ...

	If you want to treat all lines in MML as comments, use the ` symbol (->§16-6) at the beginning of a line.
	(->§16-6) at the beginning of a line, and all lines up to the next ` symbol become comments.

[Example 3]
` MML Coded by M.
MML Coded by M. Kajihara.
Copyright(c)1994.
Copyright(c)1994.

	If you want to write a comment between MML lines, you can use the ` symbol.

[Example 4]
A @13 v13 `c major` cdefgab>c< `c minor` cde-fga-b->c<

	In addition, all double-byte characters in MML are ignored except for special cases such as
	If a comment consists of only double-byte characters, the
	If the comment consists of only double-byte characters, the ` symbol does not need to be used.

[Example 5]
A @13 v13 C major -> cdefgab>c< C minor -> cde-fga-b->c<

	However, the following cases are special and no comments can be written.

1) In the string of the instruction that defines the string in the #define instruction.
2) ! 2) In a variable string in a definition or use instruction
3) In the = tone name string in the @define instruction

[Failure example]
#Title Sample Music ;music title
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~ All underlined parts are defined as #title.

[Related] ; command (->§16-5)
	` command (->§16-6)

===============================================================================
*******************************************************************************
§2 [[[[ General control commands ]]]]
*******************************************************************************
===============================================================================

	The following commands can be specified at the beginning of a line to control the effect on all parts and
	The following commands can be specified at the beginning of a line to control things that affect all parts and various definitions of the song itself.

	Alphabetic strings such as "Filename," "Composer," "Extend," etc. can be in either lower or upper case.
	The command name, string, and numeric value are the same.

	The command name, string, and number must be separated by at least one SPACE or TAB character.
	The command name, string and number must be separated by one or more SPACE or TAB characters.

	The command name, string, and number must be separated by at least one SPACE or TAB character. Since the command is processed in the first pass, it can be located anywhere in the MML file.
	However, if you specify a command other than #Memo, the one on the next line is
	However, if you duplicate a command other than #Memo, the one on the next line will take effect.

===============================================================================
§2-1 Specify output file name
	#Filename
-------------------------------------------------------------------------------
[Format 1] #Filename File name
[Format 2] #Filename . . extension
-------------------------------------------------------------------------------
	Changes the file name of the compiled song data output by MC.EXE.

	By default, the file name extension of the MML file is changed to ".M".
	M".

	If only the file extension is specified, only the file extension will be changed from the default ".M".
	If only the extension is specified, only the extension will be changed from the default ".

	The file name will be defined until a CTRL code other than TAB/ESC is encountered.
	(The filename is defined until the end of the line (usually CR).

[The file name is defined until a CTRL code other than TAB/ESC is reached.

[Example 1] #Filename SAMPLE.M
M. [Result] The song data file name will be "SAMPLE.M" regardless of the MML file name.
	[Example 2

[Example 2] #Filename .M2
[M2" is the name of the song data file to be created, regardless of the MML file name.
	M2".

===============================================================================
§2-2 Specify the SSGPCM file name to be used
	#PPSFile
-------------------------------------------------------------------------------
[format] #PPSFile file name
-------------------------------------------------------------------------------
	Define the PPS(SSGPCM)File name to be used. (->PPS.DOC)

	The file name will be defined until a CTRL code other than TAB/ESC is encountered.
	(The file name is defined until the CTRL code except for TAB/ESC, which is usually until the end of the line (CR).

[The file name is defined until a CTRL code other than TAB/ESC comes.

[Note 2] The file extension cannot be omitted.

[Note 3] When you use MC.EXE, you need to define the tone data in the song data (->MC.DOC).
	Otherwise, the file will be loaded only when you play immediately with the /P or /S option of MC.EXE.
	DOC), the file will only be loaded when you play it immediately with the /P or /S option of MC.EXE.

[Example] #PPSFile PPS01.PPS
[PPS01.PPS is used for the SSGPCM voice of the K/R part.

===============================================================================
§2-3 Specify the name of PCM file to be used
	#PCMFile , #PPCFile
-------------------------------------------------------------------------------
[Format 1] #PCMFile file name
[Format 2] #PPCFile file name
-------------------------------------------------------------------------------
	Define the PCM (.PPC/.PVI/.P86) file name to be used in J-part.
	(->PMDPCM.DOC)
	Indicate the .PVI/.PZI file name if PMDPPZE is used.

	#PCMFile and #PPCFile are exactly the same.

	The file name is defined until a CTRL code other than TAB/ESC comes along.
	(The filename is defined until the end of the line (usually CR).

[The file name is defined until a CTRL code other than TAB/ESC comes.

[Note 2] The file extension cannot be omitted.

[Note 3] When you use MC.EXE, you need to define the tone data in the song data (->MC.DOC).
	Otherwise, the file will be loaded only when you play immediately with the /P or /S option of MC.EXE.
	If this is not done, the file will only be loaded when playing immediately with the /P or /S option of MC.EXE.

[Example] #PCMFile SAMPLE.PPC
[Result] Use SAMPLE.PPC for PCM voice of J-part.
===============================================================================
§2-4 Specifying the tone file name to use
	#FFFile
-------------------------------------------------------------------------------
[Format] #FFFile File name [.FF/.FFL].
-------------------------------------------------------------------------------
	Defines the name of the voice (.FF/.FFL) file to be used.

	The file name will be defined until a CTRL code other than TAB/ESC is reached.
	(The file name is defined until the end of the line (CR).

	If you write the tone file name on the command line of MC.EXE (->MC.DOC), it works exactly the same as
	DOC), and
	If the file exists, the /V option is automatically added at the same time.
	If the file does not exist, the specified file name will be used when writing with the /VW option.
	If the file does not exist, the specified file name is used when writing with the /VW option.

	If the extension is omitted, the file name will be .FFL if the OPL option (/L) is present, or .
	If the extension is omitted, the file name will be .FFL if the OPL option (/L) is present, or .FF if it is not.

[Note 1] When using this command with the tone definition command (@), be sure to use FFFile -> tone definition in that order.
	FFFile -> tone definition.
	If you write it after the tone definition command, it may overwrite the defined tone
	Note 2] If you want to use FFFile in conjunction with the

[Note 2] Even if a tone is specified on the command line, if this command is specified, this one will be effective.
	Example 1] #FFFile

[Example 1] #FFFile EFFEC.FF
[Result] Loads and uses the FM sound file "EFFEC.FF".

[Related] FM tone definition (@) (->§3-1)
	MC.DOC

===============================================================================
§2-5 Compiler option settings
	#Option
-------------------------------------------------------------------------------
[Format] #Option string
-------------------------------------------------------------------------------
	Sets the compiler options.

	The specified string is exactly the same as the one shown on the command line.
	(->MC.DOC)

[Note 1] The options are appended to the command line options.
	If two options that cannot be set at the same time, such as /N and /L, conflict, the later option will be used.
	Note 2] The /N and /L options are added to the command line options.

[Note 2] When setting options related to FM tone definition, such as /N, /M, /L, etc.
	[Note 2] When setting options related to FM tone definition, such as /N, /M, and /L, be sure to set them before the tone definition (@).

[Example] #Option /L/S/A/O
[Result] Sets the MC command line option /L/S/A/O.

[Related] FM tone definition (@) (->§3-1)
	MC.DOC

===============================================================================
§2-6 Title definition
	#Title
-------------------------------------------------------------------------------
[format] #Title Title string
-------------------------------------------------------------------------------
	Defines the title of the song.

	The string is defined until a CTRL code other than TAB/ESC.
	(Usually until the end of the line (CR).

[Note 1] Comments and the like cannot be written with a ; at the end.

[Note 2] When using MC.EXE, you need to define the tone data in the song data (->MC.DOC).
	If you don't, you will only see this string when you play immediately with MC.EXE's /P or /S option.
	This string will only be displayed when you play the song immediately with the /P or /S option of MC.EXE.

[Example] #Title Sample song
[If you do not use the /P or /S option of MC.EXE, this string will only be displayed if you play the song immediately.

===============================================================================
§2-7 Defining the composer
	#Composer
-------------------------------------------------------------------------------
[format] #Composer composer name string
-------------------------------------------------------------------------------
	Defines the name of the composer.

	By default, if the environment variable "COMPOSER=" or "USER=" is defined, the defined string is used.
	If the environment variables "COMPOSER=" or "USER=" are defined, the defined string will be used. (->MC.DOC)

	The string will be defined until a CTRL code other than TAB/ESC is encountered.
	(Usually until the end of the line (CR).

[Note 1] Comments cannot be written with ; at the end.

[Note 2] When using MC.EXE, you need to define the tone data in the song data (->MC.DOC).
	If you don't, you will only see this string when you play immediately with MC.EXE's /P or /S option.
	DOC), this string will only be displayed when you play immediately with the /P or /S option of MC.

[Example] #Composer M.Kajihara
[Result] Let's say the composer's name is "M.Kajihara".

===============================================================================
§2-8 Arranger definition
	#Arranger
-------------------------------------------------------------------------------
[Format] #Arranger arranger name string
-------------------------------------------------------------------------------
	Defines the name of the arranger.

	By default, if the environment variable "ARRANGER=" or "USER=" is defined, the defined string is used.
	If the environment variables "ARRANGER=" or "USER=" are defined, the defined string will be used. (->MC.DOC)

	The string will be defined until a CTRL code other than TAB/ESC is encountered.
	(Usually until the end of the line (CR).

[Note 1] Comments cannot be written with ; at the end.

[Note 2] When using MC.EXE, you need to define the tone data in the song data (->MC.DOC).
	If you don't, you will only see this string when you play immediately with MC.EXE's /P or /S option.
	DOC), this string will only be displayed when you play immediately with the /P or /S option of MC.

[Example] #Arranger M.Kajihara
[Result] The name of the arranger is "M.Kajihara".

===============================================================================
§2-9 Memo definition
	#Memo
-------------------------------------------------------------------------------
[format] #Memo memo string
-------------------------------------------------------------------------------
	Defines a memo string.

	Multiple memo strings can be specified, and they are defined in order. The maximum number of lines is 128.

The maximum number of lines is 128. [Note 1] Comments and the like cannot be written with ; at the end.

[Note 2] When using MC.EXE, make sure to define the tone data in the song data (->MC.DOC).
	If you don't, you will only see this string when you play immediately with MC.EXE's /P or /S option.
	This string will only be displayed when you play the song immediately with the /P or /S option of MC.EXE.

[Example] #Memo: Created on March 25, 1994.
[Result] Define "Created on March 25, 1994" as a memo.

===============================================================================
§2-10 Specifying tempo
	#Tempo #Timer
-------------------------------------------------------------------------------
[Format 1] #Tempo Number
[Format 2] #Timer number
-------------------------------------------------------------------------------
[Range] [Format 1] 18-255
	[Format 2] 0 to 250
-------------------------------------------------------------------------------
	Specifies the tempo.

	#Tempo specifies how many times per minute the internal clock 48 will be.
	The internal clock 48 is a half note by default, but can be changed with the #Zenlen command
	or the C command to change it.

	In the case of #Timer, it directly specifies how many times TimerB will be used.

	If you specify this command, a t or T command will be automatically issued at the beginning of part G.
	This command will automatically issue a t or T command at the beginning of part G.

[Example 1] #Tempo 60
This command will automatically issue a t or T command at the beginning of part G. [Example 1] #Tempo 60 [Result] This command sets the tempo to 60 (half note = 60). (Quarter note = 120).

[Example 2] #Timer 100
[Result] Set the tempo to 100 using the internal TimerB value.

[Related] t command (->§11-1)
	T command (->§11-2)
	C command (->§4-11)
	#Zenlen command (->§2-11)
===============================================================================
§2-11 Specifying total note length
	#Zenlen
-------------------------------------------------------------------------------
[format] #Zenlen number
-------------------------------------------------------------------------------
[Range] 1 to 255
-------------------------------------------------------------------------------
	Specifies the total note length.

	Similar to MML's C command, if you specify a value other than 96, a C command will be automatically issued at the beginning of part G.
	If you specify a value other than 96, the C command is automatically issued at the beginning of part G.

	All note lengths you specify must be approximately this number.

	The default is 96, so the available note lengths are
	1,2,3,4,6,8,12,16,24,32,48,96
	The available note lengths are 1,2,3,4,6,8,12,16,24,32,48,96.

[If you change this setting, the tempo value will change, as will the number of notes per minute that can be played at the specified tempo value.
	[Note] If you change the tempo value, the number of notes per minute that will have the specified tempo will change.

[Example: #Zenlen 192
[If you change the tempo value, it will change which notes per minute will have the specified tempo value.
	[Result] All notes are set to internal clock 192, and the available note lengths are increased to 14: 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 192.
	The value specified by the #Tempo and t commands will be the value of the quarter note.

[If you use this command to increase the total note length, you will be able to express more detail, but you will also be able to play more notes.
	However, the larger the note length, the more CPU power will be consumed during performance.

	If you are creating a piece of music to be used as background music for a scene that requires high-speed processing, you may want to
	In particular, if you are creating a piece of music to be used as background music in a scene that requires high-speed processing, you can reduce the CPU power required for the performance process by reducing this value.
	[Related] C command (->)

[Related] C command (->§4-11)
	#Tempo command (->§2-10)
	t command (->§11-1)

===============================================================================
§2-12 Designating octave up/down symbol functions
	#Octave
-------------------------------------------------------------------------------
[Format 1] #Octave Reverse
[Format 2] #Octave Normal
-------------------------------------------------------------------------------
	>, < command's role is reversed with reverse and normal with normal.

	Like MML's X command, when specified, the X command is automatically issued at the beginning of part A.
	The X command is automatically issued at the beginning of part A.

[Example] #Octave Reverse
The X command is automatically issued at the beginning of part A. [Result] > command is octave down, < command is octave up.

[Related] X command (->§4-6)
	> < command (->§4-5)

===============================================================================
§2-13 Setting the default loop count
	#LoopDefault
-------------------------------------------------------------------------------
[format] #LoopDefault number
-------------------------------------------------------------------------------
[Range] 0 to 255
-------------------------------------------------------------------------------
	Set the value to be specified when the numeric value is omitted in the [ End of loop command ].
	The default is 0 (infinite loop).

	The default value is 0 (infinite loop).

[Example] #LoopDefault 2
If no value is specified in the [[Result]] command, the default value is 2 loops.

[Related]] commands (->§10-1)

===============================================================================
§2-14 Setting whether or not to include DT2 in tone data.
	#DT2Flag
-------------------------------------------------------------------------------
[Format 1] #DT2Flag on
[Format 2] #DT2Flag off
-------------------------------------------------------------------------------
	Sets whether or not DT2 is included in the tone data format.

	The default varies depending on the MC options and is
	If /m is specified -> on
	If /m is not specified -> off
	When /m is not specified, the default is off.

	If DT2 is required for a sound source and this flag is not specified as off, then
	If this flag is not specified by off, DT2 is set to 0 for all slots.

[Example] #DT2Flag on
[If this flag is not set to off, DT2 will be set to all slots 0.

[Related] FM tone definition (@) (->§3-1)

===============================================================================
§2-15 Bend range setting
	#Bendrange
-------------------------------------------------------------------------------
[Format] #Bendrange value
-------------------------------------------------------------------------------
[Range] 0 to 255
-------------------------------------------------------------------------------
	Sets the bend width. The default value is 0.

	This is the same as MML's B command, which automatically issues a B command at the beginning of part A.
	The B command is automatically issued at the beginning of part A.

	If a non-zero value is specified, the I command is enabled and the bend width is set to
	If a non-zero value is specified, the I command is enabled and the bend width is shifted by ±8192 semitones.

[Note: Bend specification requires a lot of attention to the I command (->§7-5), and may make MML difficult to read.
	In addition, it may make MML difficult to read.
	It should not be used except for MIDI conversion.

[Example] #Bendrange 12
[The result is I±8192, which shifts the pitch by exactly one octave.

[Related] B command (->§7-4)
	I command (->§7-5)

===============================================================================
§2-16 SSG pitch extended/normal selection
	#Detune
-------------------------------------------------------------------------------
[Format 1] #Detune Extend
[Format 2] #Detune Normal
-------------------------------------------------------------------------------
	Select whether you want the SSG Detune/LFO to be extended or normal.

	When "Extend" is selected, it is the same as specifying the "DX1" command at the beginning of all SSG parts (G, H, and I).
	If you select Extend, it is the same as specifying the "DX1" command at the beginning of all SSG parts (G, H, I).

	In the normal specification, if the DETUNE/LFO is shifted by 1, the pitch value sent to the sound source will also be shifted by 1.
	If the DETUNE/LFO is shifted by 1, the pitch value sent to the sound source will also be shifted by 1. (Even with the same DETUNE value, the higher the pitch value, the larger the shift.)

	In the case of the extended specification, the higher the pitch, the smaller the DETUNE value will be.
	In the case of extended specifications, the DETUNE value will be reduced as you move into the higher registers, and the same DETUNE value will be used to compensate for the same amount of shift at all pitches.

[Example] #Detune Extend
[Result] Changes the detune value of SSG to the extended specification.

[Related] DX command (->§7-3)
	D DD command (->§7-1)
	M MA MB command (->§9-1)

===============================================================================
§2-17 Software LFO speed Extended/Normal selection
	#LFOSpeed
-------------------------------------------------------------------------------
[Format 1] #LFOSpeed Extend
[Format 2] #LFOSpeed Normal
-------------------------------------------------------------------------------
	Selects whether the speed of software LFOs should be extended to be tempo-independent.
	software LFO speed to a tempo-independent extended specification.

	When "Extend" is selected, it is equivalent to specifying the command "MXA1 MXB1" at the beginning of all FM, SSG, and ADPCM parts (A to J).
	This is the same as specifying the command "MXA1 MXB1".

	If you want to change only one of the two LFOs, use the MX command.
	If you want to change only one of the two LFOs, use the MX command.

[Example] #LFOSpeed Extend
[If you want to change only one of the two LFOs, use the MX command.

[Related] MX MXA MXB command (->§9-5)
	M MA MB command (->§9-1)
===============================================================================
§2-18 Software envelope speed expansion/normal selection
	#EnvelopeSpeed
-------------------------------------------------------------------------------
[Format 1] #EnvelopeSpeed Extend
[Format 2] #EnvelopeSpeed Normal
-------------------------------------------------------------------------------
	Selects whether or not to extend the SSG/PCM software envelope speed to a tempo-independent
	Selects whether the SSG/PCM software envelope speed should be tempo independent or not.

	If "Extend" is selected, it is the same as specifying the "EX1" command at the beginning of all SSG and PCM parts (G to J).
	This is the same as specifying the "EX1" command at the beginning of all SSG and PCM parts (G to J).

[Example] #EnvelopeSpeed Extend
[This command is equivalent to specifying "EX1" at the beginning of all PCM parts (G to J).

[Related] EX command (->§8-2)
	E command (->§8-1)

===============================================================================
§2-19 PCM volume value Extended/normal selection
	#PCMVolume
-------------------------------------------------------------------------------
[Format 1] #PCMVolume Extend
[Format 2] #PCMVolume Normal
-------------------------------------------------------------------------------
	The conversion method of "v" value->"V" value in PCM part is
	Normal: V = v×16
	Extend: V = v×v
	Select the conversion method from Normal: V = v×16 to Extend: V = v×v.

	If you select Extend for PMDB2 and PMDVA, or Normal for PMD86, the volume curve at "v" value will be almost linear.
	If you select Extend for PMDB2 and PMDVA, and Normal for PMD86, the volume curve at the "v" value seems to be almost linear.

[Example] #PCMVolume Extend
[Result] The PCM part's "v" value->"V" value conversion method is V=v×v.

[Related] v command (->§5-1)
	V command (->§5-2)

===============================================================================
§2-20 Extension of the third FM channel part
	#FM3Extend
-------------------------------------------------------------------------------
[format] #FM3Extend part symbol 1[part symbol 2[part symbol 3]]]
-------------------------------------------------------------------------------
[symbol] One of LMNOPQSTUUVWXYZabcdefghijklmnopqrstuvwxyz
-------------------------------------------------------------------------------
	Extends the FM Sound Source 3 part with the specified part symbol.
	Can be set for up to 3 channels.

	The third FM channel can play up to four independent parts.
	The third channel of the FM source can play up to four independent parts, but only one part is defined by default, except for PMD/PMDVA1.
	By default, however, only one part is defined, except for PMD/PMDVA1, so use this command to define a new part symbol.

	However, by default, only one part is defined, except for PMD/PMDVA1.
	This command will change that.

[Example] #FM3Extend XYZ
[This command extends parts X, Y, and Z to create a new FM source 3 part.
	In the case of PMD/PMDVA1, change the part names D, E, F to X, Y, Z.

[Related] Correspondence between part symbols and sound sources (->§1-1-3)

===============================================================================
§2-21 Inserting an MML file
	#Include
-------------------------------------------------------------------------------
[format] #Include file name
-------------------------------------------------------------------------------
	Reads and adds an MML file between the #Include line and the next line of MML.
	The extension cannot be omitted.

	The default # instruction, @ tone, ! It is very useful to read MML files that define default #instructions, @tones, variables, etc. from outside.
	This is very useful. However, be careful of the MML length limit (61KB).

	It is also possible to load (nest) INCLUDE files in an INCLUDE file.

[Example] #Include default.mml
Example] #Include default.mml [Result] The default.mml is read and inserted in its place.

===============================================================================
§2-22 Setting volume down by sound source
	#Volumedown
-------------------------------------------------------------------------------
[Format] #Volumedown [F[S[P[R]]]][±]numeric[,[F[S[P[R]]]][±]numeric,]・・・・
-------------------------------------------------------------------------------
[Range] [Without ±] 0 to 255
	[With ±] -128 to +127
-------------------------------------------------------------------------------
	Changes the volume down value by sound source.

	F is for FM, S is for SSG, and
	S is for SSG, P is for PCM, and
	P is for PCM, and R is for rhythm.
	R represents the rhythm source.

	If set, the DF, DS, DP, and DR commands will be automatically issued at the beginning of the G part.
	When set, the DF, DS, DP, and DR commands are automatically issued at the beginning of the G part.

	If the value is preceded by + -, it will be changed relative to the value of the /DF,/DS,/DP,/DR option in PMD.
	If the value is preceded by + or -, it is changed relative to the value of the /DF, /DS, /DP, and /DR options of PMD.
	Note that + decreases the volume.

[Note that the volume down value set here is a local value that is effective only for that song.
	When you start playing the song again, the values specified in the /DF, /DS, /DP, and /DR options of PMD will be reset and the volume will be restored.
	When you start playing again, the values specified in the /DF, /DS, /DP, and /DR options of PMD will be reset and then restored.
	
[Example 1].
#Volumedown FR+16,P+128,S+32
[The result is that FM and Rhythm are added relative to 16, PCM to 128, SSG to 32, and PMD to 32.
	[Example 2] #Volumedown

[Example 2]
#Volumedown F-16
[Result: FM is subtracted (made louder) from 16, relative to the PMD option setting.

[Example 2]
#Volumedown P96
[Result: PCM volume down value is set to 96, regardless of PMD option setting.

[Related] DF DS DP DR command (->§15-4)
	PMD /DF /DS /DP /DR options (->PMD.DOC)

===============================================================================
§2-23 Setting PCM part specifications
	#ADPCM
-------------------------------------------------------------------------------
[Format 1] #ADPCM on
[Format 2] #ADPCM off
-------------------------------------------------------------------------------
	Only valid when playing with PMD86.

	If on, adjust volume/loop to ADPCM (with /s option)
	When "off" is selected, volume and loop are not adjusted to ADPCM (no /s option).

	When off, ADPCM volume/loop is disabled (no /s option).

	Regardless of the state of the /s option, it will change the state to that.

	This is a local setting, effective only for that song, and when playing other songs, the
	It will revert back to the original.

	When this command is used, an A command will be issued at the beginning of the J part.

[Example.]
#ADPCM on
[If the song is played using PMD86, the PCM part will be played with the same specifications as ADPCM.

[Related] A command (->§15-10)

===============================================================================
§2-24 Specifying the measure to start playing
	#Jump
-------------------------------------------------------------------------------
[Format 1] #Jump Measure number
-------------------------------------------------------------------------------
[range] 0-65535
-------------------------------------------------------------------------------
	This is valid only when starting a performance with the /P,/S option of MCH.EXE or MC.EXE.
	Specifies the measure number to start playing.

	M file, so if you replay the file using PMP.COM, etc.
	M file, so if you replay the file using PMP.COM, etc., it will play from the beginning of the song.

	Also, if you specify a large measure number on a model with a slow CPU, it may take a while before the performance starts.
	If you specify a large measure number on a slow CPU model, it may take some time before the performance starts.

[Example]
#Jump 16
[If you start playing with the /P,/S option of MCH.EXE or MC.EXE, playback will start at measure 16.
	If you start playing with the /P,/S option of MCH.EXE or MC.EXE, playback will begin at measure 16.
	
===============================================================================
§2-25 Part extension for PPZ8
	#PPZExtend
-------------------------------------------------------------------------------
[format] #PPZExtend part symbol 1[part symbol 2[part symbol 3]・・・・(up to 8)]]
-------------------------------------------------------------------------------
[symbol] One of LMMNOPQSTUUVWXYZabcdefghijklmnopqrstuvwxyz
-------------------------------------------------------------------------------
	Extends the part for PPZ8 with the specified part symbol.
	It can be set for up to 8 channels.

[Example] #PPZExtend abcdefgh
[Result] Parts a, b, c, d, e, f, g, and h are newly extended to become PPZ8 parts.

[Related] Correspondence between part symbols and sound sources (->§1-1-3)

===============================================================================
§2-26 Specify PCM file name for PPZ used
	#PPZFile
-------------------------------------------------------------------------------
[Format] #PPZFile file name [.PVI/.PZI][,file name [.PVI/.PZI]]
-------------------------------------------------------------------------------
	Defines the PCM (.PVI/.PZI) file name to be used in the PPZ extension part.
	If the extension is omitted, the files are normally searched in the order PZI->PVI when loaded.

	Up to two files can be defined.
	For the second PCM file defined, 128 is added to the tone number and
	The second PCM file is defined as @128 to @255.

	The file name is defined until a CTRL code other than TAB/ESC is reached.
	(Usually until the end of the line (CR).

[Note 1] You cannot add comments with ; at the end.

[Note 2] When defining the second PCM file, do not put spaces, tabs, etc. on either side of the comma [,] symbol.
	Note 2] When defining the second PCM file, no spaces, tabs, etc. can be placed on either side of the comma [,] symbol.

[Note 3] When using MC.EXE, the voice data must be defined in the song data (->MC.DOC).
	When using MC.EXE, make sure that the tone data is defined in the song data (->MC.DOC), otherwise the file will only be loaded when playing immediately with the /P or /S option of MC.EXE.
	DOC), the file will only be loaded when it is played immediately with the /P or /S option of MC.EXE.

[Example] #PPZFile SAMPLE.PZI
[PZI is used as the PCM tone for the part specified by #PPZExtend.

[Example 2] #PPZFile BASEPCM.PZI,EXTEND.PVI
[PZI to the PCM tone of the part specified by #PPZExtend @0 to @127, and
	PZI as @0 to @127 and EXTEND.PVI as @128 to @255.

[PZI as @0 to @127 and EXTEND.PVI as @128 to @255.
[No space is allowed on either side of the comma symbol.
	An error will occur when reading PCM.

===============================================================================
§2-27 General transpose setting
	#Transpose
-------------------------------------------------------------------------------
[Format] #Transpose Value
-------------------------------------------------------------------------------
[Range] -128 to +127
-------------------------------------------------------------------------------
	Sets the transpose value for the entire song.

	If specified, this is the same as specifying the "_M" command at the beginning of all parts except Rhythm.
	This is the same as specifying the "_M" command at the beginning of all parts except Rhythm.

	If there is a part that you do not want to transpose, such as a track used for rhythm, specify "_M0" at the beginning of the track.
	If there is a part that you do not want to transpose, such as a track used for rhythm, issue the "_M0" command at the beginning of that track to cancel it.

[Example] #Transpose 1
[This will move the entire song up a semitone.

[Related] _M command (->§4-16)

===============================================================================
===============================================================================
*******************************************************************************
§3 [[[[ Definition commands ]]]]
*******************************************************************************
===============================================================================

	This command defines the FM tone and MML variables.

	It is processed in the first pass, so it does not matter where it is located in the MML file.

	It does not matter where it is located in the MML file. However, if a duplicate is specified, the one in the later line will take effect.

===============================================================================
§3-1 FM tone definition
	@
-------------------------------------------------------------------------------
[Format 1] @ Tone number ALG FB
	 AR DR SR RR SL TL KS ML DT AMS
	 AR DR SR RR SL TL KS ML DT AMS
	 AR DR SR RR SL TL KS ML DT AMS
	 AR DR SR RR SL TL KS ML DT AMS
[Format 2] @ Tone number ALG FB
	 AR DR SR RR SL TL KS ML DT DT2 AMS
	 AR DR SR RR SL TL KS ML DT DT2 AMS
	 AR DR SR RR SL TL KS ML DT DT2 AMS
	 AR DR SR RR SL TL KS ML DT DT2 AMS
[Form 3] @ Tone number ALG FB
	 AR DR RR SL TL KSL ML KSR EGT VIB AM
	 AR DR RR SL TL KSL ML KSR EGT VIB AM
-------------------------------------------------------------------------------
[Note] The = tone name can be written in any position.
-------------------------------------------------------------------------------
[Range] [Format 1 and 2] ALG ・・・・ 0～7
			FB ・・・・ 0～7
			AR ・・・・ 0～31
			DR ・・・・ 0～31
			SR ・・・・ 0 to 31
			RR ・・・・ 0 to 15
			SL ・・・・ 0 to 15
			TL ・・・・ 0 to 127
			KS ・・・・ 0 to 3
			ML ・・・・ 0 to 15
			DT ・・・・ -3 to 3 or 0 to 7
			AMS ・・・・ 0 to 1
	[Format 2] DT2 ・・・・ 0 to 3
	[Format 3] ALG ・・・・ 0 to 1
			FB ・・・・ 0 to 7
			AR ・・・・ 0～15
			DR ・・・・ 0～15
			RR ・・・・ 0～15
			SL ・・・・ 0 to 15
			TL ・・・・ 0 to 63
			KSL ・・・・ 0 to 3
			ML ・・・・ 0 to 15
			KSR ・・・・ 0～1
			EGT ・・・・ 0 to 1
			VIB ・・・・ 0 to 1
			AM ・・・・ 0 to 1
-------------------------------------------------------------------------------
	This command defines the tone of the FM sound source.

	The @ symbol is always written at the beginning of the line, and one or more
	The @ symbol must be at the beginning of the line, and one or more SPACE, TAB, comma, or line feeds are required between numbers.
	However, only TAB and newline are allowed to separate tone names.

	[Format 1] requires that MC.EXE does not have the /M option, or that
			Format 1] is for MC.EXE without the /M option or with #DT2Flag off.
	[Format 2] is for MC.EXE with the /M option or with #DT2Flag on.
			Format 2] is the format when MC.EXE has the /M option or #DT2Flag is on.
	[Format 3] is the format of MC.EXE with the /L option.
	The format is as follows.

	If you write any non-numeric character from @ to the last value without a; or =, you will get an error.
	This will result in an error.
	You cannot omit any numerical values other than the tone name.

	For the meaning of each parameter, refer to the main unit manual or FM manual.
	For the meaning of each parameter, refer to the main unit manual or FM sound manual.

[Note] When using MC.EXE, make sure to define the tone data in the song data (->MC.DOC).
	If you do not, it will be invalid even if it is defined.

[Example 1]
@ 0 4 5 =falsyn?
    31 0 0 0 0 22 0 2 3 0
    18 10 0 6 0 0 0 8 3 0
    31 0 0 0 0 23 0 4 -3 0
    18 10 0 6 0 0 0 4 -3 0
[Define "falsyn?" for tone number 0.
[Example 2] When MC.EXE /M option is specified or #DT2Flag on is specified
NM AG FB Falcom Synth(?)
@ 0 4 5 =falsyn?
; AR DR SR RR SL TL KS ML DT DT2 AMS
    31 0 0 0 0 22 0 2 3 0 0
    18 10 0 6 0 0 0 8 3 0 0
    31 0 0 0 0 23 0 4 -3 0 0
    18 10 0 6 0 0 0 4 -3 0 0
[Result] Define "falsyn?" for tone number 0.

[Example 3] When MC.EXE /L option is specified
L option; NM AG FB E.Bass
@ 2 0 5 =E.Bass
When MC.EXE /L option is specified ; AR DR RR SL TL KSL ML KSR EGT VIB AM
    11 5 2 2 29 0 0 0 0 0 1 0
    12 8 6 1 0 0 1 1 1 1 0
[Define E.Bass as tone number 2.

[Related] @ command (MML) (->§6-1)
	#DT2Flag command (->§2-14)
	MC.EXE /N /M /L option (->MC.DOC)

===============================================================================
§3-2 MML variable definitions
	!
-------------------------------------------------------------------------------
[Format 1] ! String MML string
[format 2] ! Numeric MML string
-------------------------------------------------------------------------------
[string] Any character type and number of characters. Any type and number of characters, up to 30 characters from the beginning.
[Range] 0 to 255
-------------------------------------------------------------------------------
	Defines MML variables.

	Up to 256 types of string definitions and 256 types of numeric definitions are available.
	Each of them can be defined independently.

	String definitions can be any character, as long as the first character is not a number.
	( ! Snare, etc. can be specified in double-byte characters.)

	There must be at least one space or tab between strings, numbers, and MML strings.
	A space or tab is required between strings, numbers, and MML strings.

	Variables can be nested, but never recursive.

	Variables are used in MML by the ! command (MML).

[Note 1] The maximum length of a string is 30 characters. If you define more than 30 characters, the rest of the string will be ignored.
	If you define more than 30 characters, the rest of the string will be ignored.

[Note 2] If the program recurses and becomes a permanent loop, it will run out of control in the worst case.
	Please be very careful.

[Example 1]
A cde
1 !A fga
A l8 !1 b
[Result] !	
Equivalent to A l8 cdefgab.

[Example 2]
BassDrum @0v12
SnareDrum @1v14
A !BassDrum cc !SnareDrum g !BassDrum c
[Result] A @0v12 cc @1v14
A @0v12 cc @1v14 g @0v12 c

[Failure] !
A cde !B
B cde !A
A !A
[A and !B keep referring to each other, causing the stack to overflow, and in the worst case, runaway.

[Related] ! Command (MML) (->§16-1)

===============================================================================
*******************************************************************************
§4 [[[[ MML command, pitch/tone length part ]]]]
*******************************************************************************
===============================================================================

	The following is an explanation of the MML commands.

	Parameters enclosed in [ ] are optional.

	The [sound source] indicates the part (sound source) where the command can be used.
	The following parts are available

FM FM sound part (A-F for 98 and 88 and FM3 extension part, A-H for 68, A-I for IBM)
SSG SSG sound part (G to I)
PCM PCM sound part (J (J and K for towns only) and PPZ extended part)
R selection Rhythm selection part (K)
R definition Rhythm definition part (R)
FM(OPNA) FM sound source part (dedicated to PMDB2/VA/86 A to F and FM3 extended parts)
FM(OPM) FM sound source part (PMD.X A to H only)
FM(ch3) FM sound source part (dedicated for PMD.COM C to F, PMDB2/VA/86 C and FM3 extended part)
PCM (AD) PCM data part (dedicated to J part of PMDB2/VA)
PCM (86) PCM data source part (PMD86 J part only)
PCM (68) PCM data part (PMD.X J-part only)
PCM(PPZ) PCM sound part (for PPZ extension part only)

	This section contains commands related to pitch and note length.

	In the K (Rhythm Selection) part, these commands are mostly not available.

===============================================================================
§4-1 Specifying pitch and duration
	c/d/e/f/g/a/b/x
-------------------------------------------------------------------------------
[format 1] c/d/e/f/g/a/b [=] [+/-] [note length] [.] [format 2] x
[format 2] x [note length] [.]
-------------------------------------------------------------------------------
[range] a value between 1 and 255 that is approximately the length of all notes (->§2-11), or a clock value with %.
-------------------------------------------------------------------------------
[Sound source] FM / SSG / PCM / R definition
-------------------------------------------------------------------------------
	Represents a single note. Each
	c = Do
	d = re
	e = mi
	f = F
	g = So
	a = la
	b = C
	Corresponds to

	Also, if x is used in the note data, the note played immediately before will be adopted.
	(e.g., c4x8 will be played as c4c8).

	The octave can be raised or lowered by using the o < > commands.
	However, the octave of the previous note will be used as the pitch x.

	In R part and J part (PCM) in PMD.
	X, c, b, and x will sound the same no matter which is specified.

	If the transposition is specified by the _{ } command (->§4-15), the pitches c to b are automatically transposed.
	You can avoid this by adding the = sign (natural).

	+However, you can avoid this by adding the = symbol (natural).
	The + sign (sharp) is a semitone higher, and the - sign (flat) is a semitone lower.
	It is also possible to specify more than one + sign and - sign. (Double flat, etc.)
	However, they cannot be attached to the pitch x.

	If you omit the tone length, the tone length specified by the l command will be used.

	. If you add the symbol (dot), the note length will be multiplied by 1.5.
	If two or more are added, the note length will be increased by 1.5 times.
[Example 1] c2...
[Result] c2&c4&c8

	Use the 3 and 6 series notes after calculating them as 3, 6, 12, 24, 48, and 96th notes.
[Example 2] c12d12e12
[result] cde of eighth note triplets (equivalent to {CDE}4 in N88Basic)
[Supplemental] If you add three twelfths, you get a quarter, so a twelfth note is a quarter note divided into
	So a twelfth note is a quarter note divided into three parts (= eighth note triplet).

	Since fifths, seventh notes, etc. are not divisible, they can be specified in detail using %.
[Example 3] c%4 d%5 e%5 f%5 g%5
[result] cdefg (equivalent to {CDEFG}4 in N88Basic), which is a whole quarter note length with five consecutive notes.
[In the case of C96 (total note length = 96), the internal step for a quarter note is 96 ÷ 4 = 24.
	If we divide 24 by 5, we get 4 more than 4.
	Therefore, if we make four notes of length %5 and one note of length %4
	It will sound like a series of five notes.

	If you are using the W S command, it will automatically add a software echo or
	When using the W S command, the note is automatically processed and expanded so that a software echo or ornamental note is applied.

[Note 1] In PMD.X, c, c+, d in octave 1 are played as d+.

X, c, c+, and d of octave 1 are played as d+. [Note 2] In the PCM part of PMDB2/VA, octave 6 or higher is played as octave 6.
	In the PCM part of PMDB2/VA, octave 6 or higher is played as octave 6.

[Note 3] Scale marks (c/d/e/f/g/a/b) to note points (.) are played without pause. Note 3] Do not leave any space between the
	In particular, the = + - symbols should be written with no space between them. In particular, note that the = + - symbols will be recognized as l= l+ l- commands if there is a gap between them.
	Note that the = + - symbols in particular will be recognized as the respective l= l+ l- commands if there is a gap between them.

[Note 4] Note that in some cases it may not be possible to specify a note length that exceeds the internal clock 255.
[Example of failure] C192 W24,-2 c1.
[Result: Over-length error.
[Note 4] If you want to specify a note length that exceeds 255 clocks, you must execute the W and S commands.

[Note 5] If pitch x is specified in the R part, it will be taken as note data unconditionally, and will not be displayed.
	If you specify a pitch x in the R part, it is unconditionally taken as note data, and is not considered a rest, even if the immediately preceding note is a rest.

[Related] o command (->§4-4)
	> < command (->§4-5)
	_{ } command (->§4-15)
	l command (->§4-8)
	W command (->§12-2)
	S command (->§12-1)

===============================================================================
§4-2 Specifying rests and note lengths
	r
-------------------------------------------------------------------------------
[format] r [note length] [.]
-------------------------------------------------------------------------------
[range] 1-255 (->§2-11) or clock value with %.
-------------------------------------------------------------------------------
[Sound source] FM / SSG / PCM / R definition
-------------------------------------------------------------------------------
	Represents a single rest.

	If the note length is omitted, it will be the note length specified by the l command.

	. If the symbol (dot) is added, the note length will be multiplied by 1.5.
	If two or more are added, the note length will be increased by 1.5 times.

[Example: r4.
[Result] A quarter note rest.

[Related] l command (->§4-8)

===============================================================================
§4-3 Portamento specification
	{ }
-------------------------------------------------------------------------------
[format] {tone1 tone2} [tone length1] [.] [,note length 2]
-------------------------------------------------------------------------------
[range] [note length 1] 1-255, where 1 is the approximate number of all note lengths (->§2-11)
		or clock value with %.
	[Note length 2] The above plus a value shorter than note length 1.
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,PPZ)
-------------------------------------------------------------------------------
	Specifies a note to be connected smoothly from pitch 1 to pitch 2 with a length equal to the note length.
	When pitch 2 is specified, the length of time to wait between the start of the sound and the pitch shift, the so-called delay, is set.
	The delay is set.

	The note length and note point are the same as for the c d e f g a b r command.
	You cannot specify a note length longer than 255 steps.

	Only the c d e f g a b o > < command should be specified in { }.

	It cannot be specified in the R part.

[Note 1] Portamento is not applied to the PCM part of PMD86 and PMD.
	X. If it is specified, pitch 1 will be ignored. ( {cd}2 is equivalent to d2 )

[Note 2] This command does not reflect the effect of the W S command.

[Example 1] {cg}4
[The result is a portamento of quarter-note length, rising from Do to So.

[Example 2] {cg}4,8
[Result] A portamento of quarter-note length, rising from Do to So after an eighth-note delay.
	In fact
	c8&{cg}8
	The result is the same as

[Related] W command (->§12-2)
	S command (->§12-1)

===============================================================================
§4-4 Specifying the octave
	o
-------------------------------------------------------------------------------
[Format] o Numeric
-------------------------------------------------------------------------------
[Range] 1 to 8
	1 to 6 (PCM part in PMDB2)
	1 to 5 (PCM part in PMD.X)
X) -------------------------------------------------------------------------------
[Source] FM / SSG / PCM
-------------------------------------------------------------------------------
	Specify the octave.

	1 to 8 for FM/PSG, 1 to 6 for PCM on 88/VA/98.

	In the X68000 version of the PCM part, 1 to 5 can be specified, and the pitch changes roughly in octave units.
	The default is 4.

	The default is 4.

[Example: o6
[Result] Set octave to 6.

===============================================================================
§4-5 Octave up/down.
	> <
-------------------------------------------------------------------------------
[Format 1] >
[Form 2] <
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM
-------------------------------------------------------------------------------
	If >, move up one octave.
	If < is selected, the octave will be lowered by one octave.

	The X #Octave command allows you to invert the function.

[Example 1] o4 c8>c8
[The eighth note do of octave 4 is followed by the eighth note do of octave 5.

[Note: If you specify a note in a loop, and then go back to the beginning of the loop, the octave will be different.
	If you specify a different octave, it will return to the original octave.
	If you want to specify such an octave, use the __ command.
[Example 2] o4[cdefgab>]2cde
[Result] o4cdefgab o4cdefgab o5cde

[Example 3] o4[cdefgab__12]2__-24cde
[Result] o4cdefgab o5cdefgab o4cde

[Related] X command (->§4-6)
	#Octave command (->§2-12)
	__ command (->§4-14)

===============================================================================
§4-6 Inverting octave up/down symbols
	X
-------------------------------------------------------------------------------
[format] X
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM
-------------------------------------------------------------------------------
	Reverses the function of the > and < commands. Equivalent to the #Octave command, but
	This command is equivalent to the #Octave command, but allows local and temporary changes.

[Example] c>c< X d<d> X
[Result] Equivalent to c>c< d>d<.

[Note 1] If you make a temporary change, be sure to undo it.
	If you do not, all parts will be affected from the next part.

[Note 2] If you want to change the whole MML with this command, you must put it at the beginning of part A.
	[Note 2] If you want to change the whole MML with this command, you need to write it at the beginning of part A. In that case, use #Octave command. If you want to change the entire MML with this command, you must put it at the beginning of part A. In that case, it is exactly the same as the #Octave command.

[Related] #Octave command (->§2-12)
	> < command (->§4-5)

===============================================================================
§4-7 Whole octave change
	o+ o-
-------------------------------------------------------------------------------
[Format 1] o+ number
[Format 2] o- Numeric
-------------------------------------------------------------------------------
[range] -7 to +7
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM
-------------------------------------------------------------------------------
	Increases or decreases all the specified values of the o command from there in the part by the specified number.

	Also increases or decreases the current octave by the specified value at the same time.
	(Issue the o command.) [Example

[Example]
G o-1
H o-0
GH o4 cdefg
[Result] cdefg will be played with o3 for G part and o4 for H part.
	(octave overlap).

===============================================================================
§4-8 Default note length specification
	l
-------------------------------------------------------------------------------
[format] l[%]note length [.].
-------------------------------------------------------------------------------
[range] 1-255, where the value is a fraction of the total note length (->§2-11), or a clock value with %.
-------------------------------------------------------------------------------
[Sound source] FM / SSG / PCM / R selection / R definition
-------------------------------------------------------------------------------
	c d e f g a b r { } l= l+ l- l^ Specifies the length of the note to be used if the length is omitted in the command.
	The default is 4. The default is 4.

[Example 1] l8cdefg
The default is 4. [Example 1] l8cdefg [Result] Play cdefg in eighth-note length.

[Note: When used in a rhythm selection ( K ) part, only the last value specified will be used as the default value from the beginning of the R part.
	When used in a rhythm selection ( K ) part, only the last value specified will be the default value from the beginning of the R part.

	If used in a Rhythm Definition ( R ) part, it will affect the subsequent R parts.
	For example, if you specify a value in R0, it will be affected in R1.

[Example 2]
K l8R0l2
R0 @1c@2c
[The BD and SD of the SSG rhythm will be the length of a half note. (l8 will be ignored.)

[Related] c~b command (->§4-1)
	r command (->§4-2)
	{ } command (->§4-3)
	l= l+ l- l^ command (->§4-9)

===============================================================================
§4-9 Processing the previously specified tone length
	l= l+ l- l^
-------------------------------------------------------------------------------
[format 1] [l] [=] [tone length] [.] [format 2] [l
[Format 2] [l] + tone length [.].
[Format 3] [l] - tone length [.].
[Format 4] [l] ^ number
-------------------------------------------------------------------------------
[range] [note length] A value between 1 and 255 that is approximately the length of all notes (->§2-11)
		or clock value with %.
	[number] 1-255
-------------------------------------------------------------------------------
[Sound source] FM / SSG / PCM / R definition
-------------------------------------------------------------------------------
	Changes the length of the previous note.

	If l=, change to the specified note length.
	If l+, add the specified note length.
	If l-, subtracts the specified note length
	If l^, multiplies by the specified value.
	The l and = signs can be omitted.

	The l and = signs can be omitted.

	. If you add a symbol, the note length will be multiplied by 1.5.
	If two or more are added, the length of the note will be increased by another 1.5 times.
	However, note points that exceed 255 steps cannot be used.

	If only a note point is specified with the l= command, the note point will be added to the previous note length specification.
	If both the note length and the note point are omitted, the note length specified by the l command will be used.

	The l+ command works the same as the & command with the notation of the note length immediately after it.
	(->§4-10 & command)

	The l= command is usually used in combination with MML variables.
[Example 1].
!b @0c ;Bass Drum
s @1c ;Snare Drum
J [!b4!s4!b8!b8!s4]2
[Result]
J [ @0c4 @1c4 @0c8 @0c8 @1c4 ]2

	The l- command is useful for undoing the delay part.
[Example 2]
G l4v10 cdefg ab>c<
H l4v07r8cdefg l-8 v10fg a
[In the last three notes, the timing and volume of the G and H parts are aligned.

[Example 3] a8l=4.
	a8=4.
	a8 4.
	a8l+4
	a4+8
	a4&8
	a2l-8
	a2-8
	a8l^3
	a16^6
	a4.
[The result is all la dotted quarter notes.

[Note 1] The l= and l^ commands will produce an error if the previously specified note length has been compressed or processed.
	Note 1] The l= and l^ commands will result in an error if the previous note length has been compressed or processed.
	An error will also occur if the l- command specifies a note length longer than the previously specified note length.
	If the note length is longer than the previous note length specified with the l- command, an error will also occur.
× x c2&c2 =4 (because the previous note is compressed as c1)
× x W24,-2 c2 =4 (because the previous note is processed as c4(^2c4))
× W24,-2 c2 =4 (because the previous note is processed as c4(^2c4)) × c2&c2^4 (because the previous note is compressed as c1)
× W24,-2 c2^4 (because the previous note is processed as c4(^2c4))
× C192 c1.^4 (because the previous note is decompressed as c%255&c%33)
× x c4-2
× W24,-2 c1-2 (because c1 is processed as c4(^2c4(^4c4(^6c4)))

[Note 2] The note length added by the l+ command is not affected by the W S command.

[Note 3] If the pitch symbol c d e f g a b is immediately followed by = + -, it is considered a natural sharp/flat symbol.
	If a = + - immediately follows the pitch symbol c d e f g a b, it will be judged as a natural, sharp, or flat symbol. In this case, either leave a space or use the
	In this case, leave a space or use the -l symbol.

[Example 4] Natural quarter note with c=4 c
	c =4 c quarter note (equivalent to c4)
	cl=4 c quarter note (equivalent to c4)
	l2c -8 eighth note of c flat
	l2c -8 c dotted quarter note
	l2cl-8 c dotted quarter note
	l4c+8 c sharp eighth note
	l4c +8 c dotted quarter note
	l4cl+8 c dotted quarter note

[Related] & Commands (->§4-10)

===============================================================================
§4-10 Specifying a tie slur
	&& &&
-------------------------------------------------------------------------------
[Format 1] & [Format 2
[Format 2] && [Format 3] && [Tone length][.
[Format 3] & [Tone length][.]
[format 4] && [tone length][.]
-------------------------------------------------------------------------------
[Sound Source] FM / SSG / PCM / R Definition
-------------------------------------------------------------------------------
	Connect the preceding and following notes as a tie (&) or slur (&&).

	The difference between the two is that in the case of a tie, the previous note is not keyed off, but in the case of a slur, it is keyed off.
	The difference between the two is that in the case of a tie, the previous note is not keyed off, but in the case of a slur, it is keyed off, so the attack of the key on is either known (=&&) or not known (=&).
	The difference is whether the attack is known (=&&) or not (=&).

	Be sure to specify it immediately after the pitch command.

	If you specify the note length immediately after the & command, it will be treated as the same as the l+ command.
	If a note length is specified immediately after &, it is treated the same as the l+ command, and the specified note length is added to the previous note length.

[Example 1] a8&2
	a8l+2
	a8&a2
[The result is an eighth note plus a half note, all in la.

	If a note length is specified immediately after &&, a note of the same pitch as the previous note will be added immediately after the command.
	If a note length is specified immediately after &&, a note with the same pitch as the previous note will be issued immediately after the command with the specified note length.

[Example 2] a8&&2
[Result] a8&&a2

[Note 1] While the W and S commands are being executed, only the last note of the volume/tone after processing will be changed. Also, the note immediately after the
	Note 1] While the W and S commands are being executed, only the last volume and pitch of the processed note will be changed, and the note immediately after the & command will not be affected by the W and S commands.

[Note 2] In the Rhythm Definition (R) part, only Format 3 is valid.
	Format 1, 2, and 4 cannot be used.

[Example 3]
R0 @1 c4&c4
[Result: Error, use c2 or c4 r4.
	In the SSG rhythm part, the note does not break when a rest comes.

[Related] l+ command (->§4-9)

===============================================================================
§4-11 Setting the total note length
	C
-------------------------------------------------------------------------------
[Format] C Numeric
-------------------------------------------------------------------------------
[Range] 1 to 255
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R select / R define
-------------------------------------------------------------------------------
	This command determines the length of all notes. It is equivalent to the #Zenlen command.

	If set at the beginning of one of the parts, it will be valid for all parts.

	All note lengths you specify must be approximately this number.

	The default is 96, so the available note lengths are
	1,2,3,4,6,8,12,16,24,32,48,96
	The available note lengths are

	If you want to specify up to 64th notes, specify C192, etc.

If you want to specify up to 64th notes, specify C192, etc. [Note 1] If you change the value, the tempo value will change in terms of which notes per minute will have the specified tempo value.
	[Note 2

[If you change the value, the tempo value will change to the value of notes per minute.

[Example: C192
[This command is used to set the internal clock to 192 for all notes, and to set the available note lengths to 1, 2, 3, and 5.
	Increase the number of available note lengths to 14: 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, and 192.
	The value of the #Tempo and t commands will be the value of the quarter note.

[Related] #Zenlen command (->§2-11)
	#Tempo command (->§2-10)
	t command (->§11-1)
	l command (->§4-8)

===============================================================================
§4-12 Specifying how to cut sound1
	Q
-------------------------------------------------------------------------------
[format] Q [%] number
-------------------------------------------------------------------------------
[Range] 0 to 8 (0 to 255 with %)
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM
-------------------------------------------------------------------------------

	Specifies how the sound is cut.

	As with N88Basic's MML, you can specify from 0 to 8 in 1/8 units.
	When "%" is specified, it is possible to specify in 1/256 units from 0 to 255.

	If 0 is specified, the sound is not cut off until the end.
	The default is 0.

	In practice, the keyoff position is determined by subtracting the value specified by the q command from the position where the sound is to be cut off, as specified by this command.
	In fact, the keyoff will be performed at the timing specified by the q command minus the value specified by this command.

[Example: Q4c4
[This command cuts off the note at the half of the note length.

[Related] q command (->§4-13)

===============================================================================
§4-13 Specifying how to cut a note2
	q
-------------------------------------------------------------------------------
[format 1] q [number 1][-[number 2]] [,number 3]]
[Format 2] q [l-note length [.]] [-[l tone length]] [,l tone length[.]]
-------------------------------------------------------------------------------
[Range] [Number 1] 0 to 255
	[Number 2] 0 to 255, but the difference from Number 1 must be within +127 to -127.
	[Number 3] 0 to 255
	[Note length] A value between 1 and 255 that is approximately the length of all notes.
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM
-------------------------------------------------------------------------------
	Specifies how the sound is cut.

	The sound from here will be

1) If the value 2 is not specified.
	[1) If the value 2 is not specified, the sound will be played for the duration of the value 1.

2) If number 2 is specified
	2) If number 2 is specified, the sound will be played [randomly within the range of number 1 to number 2].
				~~~~~~~~
	The sound will be cut from behind.

	However, if the length of the cut is shorter than the time specified by value 3, the time specified by value 3 will be used.
	However, if the cut-off length is shorter than the time specified in numerical value 3, the time specified in numerical value 3 will be the actual length of the sound.
	(Please note that the number 3 = the length of the note that you want to be pronounced at least this long.)

	The value is set by the length of the sound when l is added, or by the internal clock value when l is not added.
	If not, it is set by the internal clock value.

	If 0 is specified as the value 1, the sound will not be cut off until the end.
	The default value is 0.

	If the same value as number 1 is specified for number 2, or if it is omitted, the cutting time is fixed to the value of number 1.
	The default is fixed. The default is fixed.

	If 0 is specified for number 3, the minimum guaranteed tone length is 1.
	The default is 0.

	The values 1 to 3 can be omitted.
	However, if you specify number 2, number 1 is always required.

	If omitted, no value is specified for numbers 1 and 3, and the previous value is retained.
	To specify only the number 3, specify q,4.

	In practice, the timing is determined by subtracting the values 1 and 2 specified by this command from the position where the sound is cut off, as specified by the Q command.
	If the timing is beyond the timing of numerical value 3, the timing specified by numerical value 3 is used.
	If the timing is beyond the timing of numerical value 3, Keyoff will be performed at the timing specified by numerical value 3.

[Example] Q4 q2 c4
[The internal clock for a quarter note is 24 in C96, so
	Therefore, the keyoff will be performed at the 10th clock, which is the value obtained by subtracting 2 from 12, half of 24.

[Example 2] ql8,l16 c4 c8
[As a result, c4 is actually equivalent to c8 r8, while c8 is equivalent to
	[Example 2] ql8,l16 c4 c8 [Result] c4 is actually equivalent to c8 r8, and c8 is actually equivalent to c16 r16 because the lowest pronunciation length is valid.

[Example 3] q2-4 c4 c4 c4 c4 c4
[For each pronunciation, one of the states q2, q3, or q4 is randomly selected.

[The randomization of volume and pitch can be done with the random wave of the LFO. (→§9-1-4)
	(Example) M0,255,1,6MW3*2

[Related] Q command (->§4-12)

===============================================================================
[Related] Q command (->§4-12)
	


-------------------------------------------------------------------------------
[Format 1] _ +numeric
[Format 2] _ -numeric
[Format 3] __ +numeric
[Format 4] __ -numeric
-------------------------------------------------------------------------------
[range] -128 to +127
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM
-------------------------------------------------------------------------------
	All pitch commands from there will be changed by the specified number of semitones.

	The _ is an absolute value, and the __ is a relative value.

	This command is useful for gliss, etc. as well as for modulation.

	If the _M command (→§4-16) is specified, the master modulation value and the
	If the _M command (→§4-16) is specified, the master modulation value and the modulation value specified here will be added together and set.

[Example] _-2[e__+1]8_0
[Result] dd+eff+gg+a

[Related] _M command (->§4-16)

===============================================================================
§4-15 Transposition settings
	_{ }
-------------------------------------------------------------------------------
[Format 1] _{+ pitch 1 pitch 2 ... }
[Format 2] _{- Intervals 1 Intervals 2...}
[Format 3] _{= Intervals 1 Intervals 2...}
-------------------------------------------------------------------------------
[Sound Source] FM / SSG / PCM
-------------------------------------------------------------------------------
	Sets the transposition settings.

	After specifying this command for the specified part, the specified pitch will be automatically
	After specifying this command in the specified part, sharp, flat, and natural will be automatically added to the specified pitch.

[Example 1] _{-eab}
[Result] Automatically adds flats to M, R, and C. (E flat major, C minor)

[Example 2] _{=eab}
[Result] Restores the settings of Example 1.

===============================================================================
§4-16 Master transposition value setting
	_M
-------------------------------------------------------------------------------
[Format 1] _M + number
[Format 2] _M - numeric
-------------------------------------------------------------------------------
[range] -128 to +127
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM
-------------------------------------------------------------------------------
	This command sets the master modulation value for each part.

	When this command is recognized, the modulation setting will be made immediately.
	When this command is recognized, an immediate transposition setting is made, and the specified value will be increased or decreased by the transposition value of the subsequent _ command.
	When this command is recognized, an immediate modulation setting is made, and the modulation value set by subsequent _ commands will be increased or decreased by the specified value.

[Related] ___ command (->§4-14)
	#Transpose command (->§2-27)

===============================================================================
*******************************************************************************
§5 [[[[ MML command and volume section ]]]]
*******************************************************************************
===============================================================================

	This section contains a list of commands related to volume.

===============================================================================
§5-1 Specifying volume1
	v
-------------------------------------------------------------------------------
[format] v volume value
-------------------------------------------------------------------------------
[Range] 0 to 15 (SSG, SSG rhythm sound part)
	0 to 16 (FM, PCM sound part)
-------------------------------------------------------------------------------
[Sound] FM / SSG / PCM(AD,86,PPZ) / R selection / R definition
-------------------------------------------------------------------------------
	Roughly specify the volume.

	For the SSG rhythm (K/R) part, this is disabled if PPSDRV is not resident.

[Reference] For FM sound sources, v0 to v16 are converted to the following V command values.
v | 0| 1| 2| 3| 4| 5| 6| 7| 8| 9| 10| 11| 12| 13| 14| 15| 16|
V | 85| 87| 90| 93| 95| 98| 101|103|106|109|111|114|117|119|122|125|127|

	For PCM sources, the conversion is as follows
	V(2) is when #PCMVolume is Extend.
v | 0| 1| 2| 3| 4| 5| 6| 7| 8| 9| 10| 11| 12| 13| 14| 15| 16
V(1) | 0| 16| 32| 48| 64| 80| 96|112|128|144|160|176|192|208|224|240|255|
V(2) | 0| 1| 4| 9| 16| 25| 36| 49| 64| 81|100|121|144|169|196|225|255|

[Example] v13
[Result] Sets the volume to 13.

[Related] #PCMVolume command (->§2-19)
	V command (->§5-2)

===============================================================================
§5-2 Specifying volume 2
	V
-------------------------------------------------------------------------------
[format] V volume value
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,86,PPZ) / R selection / R definition
-------------------------------------------------------------------------------
[Range] 0 to 127 (FM sound part)
	0 to 255 (PCM sound source part)
	0 to 15 (SSG sound source, SSG rhythm, PPZ part)
-------------------------------------------------------------------------------
	Specify the volume in detail.

	The K/R part is disabled if PPSDRV is not resident.

[Example: V120
[Result] Set the volume to 120.

===============================================================================
§5-3 Overall volume change 1
	v+ v-
-------------------------------------------------------------------------------
[Format 1] v+ Number
[Format 2] v- Numeric
-------------------------------------------------------------------------------
[range] + 0 to 127
	- 0 to 128
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,86,PPZ) / R select / R define
-------------------------------------------------------------------------------
	Increases or decreases the volume of all volume commands from the part by the specified value.
	The current volume is also increased or decreased by the specified value.

	It also increases or decreases the current volume by the specified value at the same time.
	(Issues the V command)

	The value is specified by the V command level (fine value).

	This is useful when you want to change the overall volume.

[Example 1] v-8
[Subtracts 8 from the volume value of each subsequent volume command for that part.

[Note: If you use this command twice in the same part, the first command becomes invalid after the second one is specified.
	(There is no relative change. (No relative change will be made.) [Example 2

[Example 2] v-4 V100 c4 v-6 V100 d4
[As a result, c4 becomes volume V96 and d4 becomes volume V94 (not V90).

[Related] V command (->§5-2)

===============================================================================
§5-3 Overall volume change 2
	v) v(
-------------------------------------------------------------------------------
[Format 1] v) Numeric
[Format 2] v( number
-------------------------------------------------------------------------------
[range] 0 to 16
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,86,PPZ)
-------------------------------------------------------------------------------
	Increases or decreases the volume of all volume commands from that part by the specified value.
	The difference between this and volume change 1 is that the volume of the command is increased or decreased by the specified value.

	This differs from volume change 1 in the following ways

1) The specified value is the v command level (rough value).
2) The effect is applied only to the v command. (The v command does not change.)
3) Does not increase or decrease the current volume by the specified value when specified.
	(Effective only for the next v command.)

	The following are the three.

[Example 1] v(2)
[Subtracts 2 from the specified value of the v command each time from that part.

[Note: If you use this command twice in the same part, the first command becomes invalid when you specify the second one.
	(There is no relative change. (No relative change is made.) [Related] v command (->)

[Related] v command (->§5-1)

===============================================================================
§5-5 Relative volume change
	) (
-------------------------------------------------------------------------------
[Format 1] ) [^] [%] [number] ( [^] [%] [number] )
[Format 2] ( [^] [%] [number] )
-------------------------------------------------------------------------------
[range] 0-255
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,86,PPZ) / R select / R define
-------------------------------------------------------------------------------
	This function changes the volume relative to the specified value.
	If the value is ( ), it will be added, and if the value is ( ), it will be subtracted.

	If a number is omitted, it will be set to 1.

	If a ^ symbol is added, it limits the notes to be changed to only one of the following
	(accent)

	If the % symbol is added, the change is fine (equivalent to the V command), otherwise it is rough.
	If the % symbol is added, the change will be fine (equivalent to a v command), otherwise it will be rough (equivalent to a v command).

[Note: If % is not specified, the volume value will simply be the same as the value specified in the
	For FM sources, 4 times the specified value.
	For PCM sound sources, the value is changed by 16 times the specified value.
	If no % is specified, the volume value is simply changed by 4 times the specified value for FM sources and by 16 times the specified value for PCM sources.

	So, in the FM section and in the PCM section with #PCMVolume set to Extend
	Therefore, in the FM part and in the PCM part with #PCMVolume in Extend state, there will be a deviation from the expected volume value after the change.
[Example 1] v12 c ) c (FM part)
[Result] V117 c V121 c (louder than v13)
[Example 2] v13 c ( c (FM source)
[Result] V119 c V115 c (smaller than v12)

[Related] V command (->§5-2)
	v command (->§5-1)

===============================================================================
*******************************************************************************
§6 [[[[ MML command and tone specification section ]]]]
*******************************************************************************
===============================================================================

	This section contains commands for specifying tone numbers and defining tones.
	This section contains a summary of commands for specifying tone numbers and defining tones.

===============================================================================
§6-1 Specifying tone number
	@voice
-------------------------------------------------------------------------------
[Format 1] @[@] Tone number
[Format 2] @[@] Tone number [,Number 1[,Number 2[,Number 3]]]
-------------------------------------------------------------------------------
[Range] Tone number FM, PCM 0 to 255
	Tone number SSG 0 to 9
	Tone number SSG Rhythm 0 to 16383
	Value 1 PCM -32768 to +32767
	Value 2 PCM -32768 to +32767
	Value 3 PCM -32768 to +32767
-------------------------------------------------------------------------------
[Sound Source] FM / SSG / PCM / R Definition
-------------------------------------------------------------------------------
	Thereafter, the voice of the specified voice number is set to be used.
	If @@ is indicated, 128 is added to the tone number.
	(The second PPZFile tone selection convenience)
-------------------------------------------------------------------------------
§6-1-1 Specifying tone numbers/FM sound part
-------------------------------------------------------------------------------
	Use the tone number to indicate the tone to be used.

[Example] @1 cde @2 fga
[The tone number 1 will play do-re-mi, and the tone number 2 will play fasola.

[Note: If a slot has been masked with the s command, only the specified slot will be played in that part.
	If a slot is masked by the -s command, voices will be defined only for the specified slot in that part.
	If you use the s command, it is safer to redefine the voices as much as possible.

[Related] s command (->§6-2)
	FM tone definition (@) (->§3-1)

-------------------------------------------------------------------------------
[Related] s command (->§6-2) FM tone definition (@) (->§3-1)
-------------------------------------------------------------------------------
	Select one of the 10 SSG software envelopes available in the MML compiler with the tone number.
	The following is a list of SSG software envelopes that are selected and expanded as E commands.

	The expanded contents are as follows.
@0 E0,0,0,0,0 Standard
@1 E2,-1,0,1 Synth type 1
@2 E2,-2,0,1 Synth type 2
@3 E2,-2,0,8 Synth type 3
@4 E2,-1,24,1 Piano type 1
@5 E2,-2,24,1 Piano type 2
@6 E2,-2,4,1 Glocken/Malimba type
@7 E2,1,0,1 Strings type
@8 E1,2,0,1 Brass type 1
@9 E1,2,24,1 Brass type 2
Do not specify @10 or later.

[Example] @6v10l8 cegb>c<gec
[Result] Play CM7 arpeggio with percussion type software envelope.

[Related] E command (->§8-1)

-------------------------------------------------------------------------------
§6-1-3 Specifying tone number/SSG rhythm definition part (without PPSDRV)
-------------------------------------------------------------------------------
	In the R part, select which of the SSG drum tones defined in the PMD will be used.
	R part selects which of the SSG drum tones defined in the PMD will be used.

	The correspondence between the tone number and the rhythm sound is as follows.
@1 Bass Drum
2 Snare Drum 1
4 Low Tom
8 Middle Tom
@16 High Tom
@32 Rim Shot
@64 Snare Drum 2
@128 Hi-Hat Close
@256 Hi-Hat Open
@512 Crash Cymbal
@1024 Ride Cymbal

	In PMDB2/PMDVA/PMD86, if the /N option (->PMD.DOC) is not specified
	DOC) is not specified, the appropriate sound will be played by the rhythm sound source at the same time.
	In that case, if you add up the values, you can make it sound like several sounds are being played at the same time.
	(SSG rhythms have small numbers. (For SSG rhythmic tones, the tone with the lower number has priority.

[Example 1] @2c
(For SSG rhythm sounds, the lower numbered tone has priority.

[Example 2] @129c
[Result] In case of PMD.COM, @1 bass drum will be played.
	In the case of PMDB2/VA/86, in addition to the above, the hi-hat of the rhythm source will sound at the same time.

-------------------------------------------------------------------------------
§6-1-4 In the case of tone number specification/SSG rhythm definition part (with PPSDRV)
-------------------------------------------------------------------------------
	If PDR and PPSDRV are resident, select the SSGPCM tone.

	In addition to the SSG rhythm in §6-1-3, the specified tone numbers are
	In addition to the SSG rhythm voices described in §6-1-3, three additional voices will be added: @2048, @4096, and @8192.

	The relationship between the tone number and the rhythm tone varies depending on the contents of the .PPS file.

	When playing back a PDR in #Double mode, up to two notes can be added at the same time.
	If the PDR is playing in #Double mode, up to two notes can be added simultaneously to create a sound.

[Example] @4c
[The third SSGPCM sound defined in PPS will be played.

-------------------------------------------------------------------------------
§6-1-5 Specifying tone number/PCM sound part
-------------------------------------------------------------------------------
	In addition to the tone number, PMDB2/PMDVA/PMD86/PMDPPZ add the tone repeat address setting after it.
	In addition to the tone number, PMDB2/PMDVA/PMD86/PMDPPZ allows you to add a repeat address setting after the tone number. (->§6-1 [Format 2])

	Each value can be set to
Value 1 Repeat start position
Numeral 2 End position of repeat (default 0)
Value 3: Release start position (default $8000) *Not valid for PMDPPZ and PMDPPZE.
	A value between -32768 and +32767 can be specified.

	When a positive value (+) is specified for each value, the value is added from the tone start address.
	          When a negative value (-) is specified, the value is subtracted from the tone end address.
	When a negative value (-) is specified, the value is subtracted from the tone end address.

	If numeric value 1 is not specified, no repeat setting is made. (One-shot PCM)

	When numerical value 2 is 0 or not specified, the loop is performed from the repeat start position to the tone end address.
	(One-shot PCM)

	When the value 3 is $8000 or not specified, even if the key is turned off, the repeat setting is not made.
	When the value 3 is $8000 or not specified, the loop from the repeat start position to the repeat end position is retained even if the key is turned off.

	Each value can be set to
	PMD86/PMDPPZ: 1 byte unit, PMDB2/PMDVA: 1 byte unit
	In the case of PMDB2/PMDVA, the value is calculated in units of 16 bytes.

	However, if the /S option (->PMD.DOC) is specified for PMD86
	DOC is specified for PMD86, the calculation is made in units of 32 bytes. (This is because 16 bytes of ADPCM corresponds to 32 bytes of PCM.)

	In this case, each value must be within the range of -1024 to +1023, since the value is only multiplied by 32 internally.
	In this case, each value must be within the range of -1024 to +1023.

[Example: PMDB2
	If the size of the tone in @0 is 4000 bytes, then in units of 16 bytes
	If the tone size of @0 is 4000 bytes, the value in 16-byte units would be: tone start address = 0 / tone end address = 250.
J @0,100,-50,-50 g1
	will be played in the following order.
1) Playback from the first position to the +200 (250 -|number 2|) position.
2) Repeat playback from +100 (number 1) to +200 (250 -|number 2|).
3) At the moment the key is turned off, the range from +200 (250 -|number 3|) to +250 is played back.
	The voice ends.

[When repeat playback is performed using ADPCM of YM2608 (PMDB2/PMDVA)
	When repeat playback is performed in ADPCM on the YM2608 (PMDB2/PMDVA), it seems that the predicted voltage difference for the next data is cleared to 0 at the moment of repeat.
	This seems to be a hardware specification and there is nothing I can do about it.

	This is a hardware specification and there is nothing we can do about it.
	In this case, you can change the repeat address.

	In this case, try changing the repeat address in various ways.

	The trick is to use data that was recorded while the desired sound was being played.
	If you use data that was recorded suddenly while the desired sound was being played, and then return to the beginning of the tone when repeating, you can avoid the phenomenon of the sound becoming muffled when repeating.
	In this case, you can adjust the volume of the tone.
	In this case, use a software envelope to express the temporal change in the volume of the tone.
	In this case, use software envelopes to express the temporal changes in tone volume.

	In addition, if you have a tool that allows you to edit the PCM waveform while viewing it, you can use the
	If you have a tool that allows you to view and edit the PCM waveform, you may want to set the start and end of the repeat at a position close to the ±0 voltage level and choose a location where the voltage change is quiet.
	If you have a tool that allows you to edit while looking at the PCM waveform, you can set the repeat start and end positions to be close to the ±0 voltage range, and select a place where the voltage change is quiet.
	Please try it.

===============================================================================
§6-2 Specifying the slot position for FM sound source
	s
-------------------------------------------------------------------------------
[format] s number
-------------------------------------------------------------------------------
[Range] 0 to 15
-------------------------------------------------------------------------------
[Source] FM
-------------------------------------------------------------------------------
	This is mainly used for FM 3ch parts, and specifies the slot position to be used for performance and definition.
	The value indicates the slot used for the part.

	The value specifies the slot to be used for the part.
	slot1 is 1, slot2 is 2, slot3 is 4, and slot4 is 8.
	The value is the sum of the slots used in the part, 1 for slot1, 2 for slot2, 4 for slot3, and 8 for slot4.

	In the FM 3ch part, each slot (there are four) can be played independently.
	Therefore, it is possible to prepare multiple parts.

	Therefore, you can prepare multiple parts and specify the slots to be used with this command.
	If you have more than one part, and use this command to specify which slot to use, you can play a different phrase for each slot.

[Example 1] To divide the ALG4 voices into slot1,2 / slot3,4, use the command
#FM3Extend X
C s3...
X s12...
	X s12....

	After specifying this command, the tone specification command @ (->§6-1) will not be used.
	After specifying this command, the tone specification command @ (->§6-1) will define only the tone parameters for the slot being used.

	As an exception, FB will only be defined if slot1 is used, and
	            ALG is always defined unconditionally.

	Therefore, it is possible to specify different tone numbers for different parts of the same 3-channel FM source part, as long as the ALG value is the same.
	Therefore, as long as the ALG value is the same, it is possible to specify a different tone number for each part of the same FM 3ch part.

	If you specify this command for a part other than the FM3 channel, only that slot will sound.
	If this command is specified for a part other than the FM3 channel, only that slot will be played. (Slot mask operation)
[Note 1] s3 @200cde s15 fga
	but only slot1 and 2 are defined for the @200 tone, so the
	Therefore, the tone of the fga part will be wrong.

[Note 2] The FM sound source 3ch part (C to F when #FM3Extend is not specified in PMD.COM, C part when #FM3Extend is specified and the specified part)
	C part when #FM3Extend is specified, and the specified part when #FM3Extend is specified) should not overlap.
	The operation is not guaranteed if they overlap.

[Note 3] ALG is defined unconditionally.
	For example, if a part using slots 1 and 2 changes to an ALG4 tone while playing in ALG6, the tones in slots 3 and 4 will be incorrect.
	If the part using slots 1 and 2 changes to the ALG4 tone, the tones of slots 3 and 4 will be distorted. Please be very careful.
	However, as for FB, if FB=7 is used in slot1 and 2, and FB=0 is used in slot3 and 4
	If you use a note with FB=7 in slots 1 and 2 and define a note with FB=0 in slots 3 and 4, FB will not be defined, so it will not affect the performance of slots 1 and 2.

[Example 2] In the case of PMD.COM
; nm alg fbl
@202 004 007
; ar dr sr rr sl tl ks ml dt ams Trumpet *2
 013 014 000 003 001 023 002 004 000 000 ;slot1
 019 003 000 010 000 000 001 008 000 000 ;slot2
 013 014 000 003 001 020 002 004 000 000 ;slot3
 019 003 000 010 000 000 001 004 000 000 ;slot4

C s$3 ;slot1,2 only
D s$c ;slot3,4 only
CD @202v12M12,1,8,2*1
C o3l8W12,-2[[a4ga4>c4d4:c4<ba4g4]4:>c4<ab4g4]2>f4fg4 d4
D o3l8W12,-2[[e4ee4 a4b4:a4 ge4e4]4: a4 fg4d4]2>c4cd4<b4

[Result] Algorithm 4 divides one channel into two slots of 2 slots each.
	It makes the chords play.

===============================================================================
§6-3 FM sound source TL value setting
	O
-------------------------------------------------------------------------------
[Format 1] O Value 1, Value 2
[Format 2] O Value 1,±Value 2
-------------------------------------------------------------------------------
[Range] [Number 1] 1 to 15
	[Number 2] [Format 1] 0 to 127
		[Format 2] -128 to +127
-------------------------------------------------------------------------------
[Source] FM
-------------------------------------------------------------------------------
	Directly sets the TL value of an FM tone.

	This is useful for expressing changes in tone velocity, or for
	It is effective when you want to express human-like wah pedal control, not cyclic like LFO.
	This is useful for expressing human-like wah pedal control.

	The value 1 means that
	slot1 is 1, slot2 is 2, slot3 is 4, and slot4 is 8.
	The total value is specified.

	Value 2 is the TL value to be set.
	＋If + or - is specified (format 2), the value will change relative to the current value.

[Example 1] O3,10
[If you specify + or - (format 2), the value changes relative to the current value.

[Example 2] O5,-2
[Result] The TL values for slots 1 and 4 are set to -2.

===============================================================================
§6-4 FM source FB value setting
	FB
-------------------------------------------------------------------------------
[Format 1] FB Value 1
[Format 2] FB ±value 2
-------------------------------------------------------------------------------
[Range] [Number 1] 0 to 7
	[Number 2] -7 to +7
-------------------------------------------------------------------------------
[Source] FM
-------------------------------------------------------------------------------
	Directly sets the FB value of the FM tone.

	While the O command controls the TL value, this command controls the FB value.
	Other than that, the usage is also the same as the O command.

	The value to be specified is the FB value to be set.
	＋When + or - is specified (format 2), the value changes relative to the current value.

[Example 1] FB3
[Sets the FB value of the current FM tone to 3.

[Example 2] FB-2
[Changes the FB value of the current FM tone to -2 from the current value.

===============================================================================
§6-5 SSG / OPM tone noise output selection
	P
-------------------------------------------------------------------------------
[Format] P Value
-------------------------------------------------------------------------------
[Range] 1 to 3
-------------------------------------------------------------------------------
[Source] FM(OPM) / SSG
-------------------------------------------------------------------------------
	The H-part of FM(OPM) slot4 and the SSG sound source's tonal and noise output are selected.

The SSG tone pads are specified as follows
	1 tone (diflter)
	2 noise
	3 tone + noise

・ FM tone (OPM) H-pattern
	1 tone (dif)
	2 noise

[Example 1] P3 (SSG sound source)
[Result] It is a mix of tone and noise.

===============================================================================
§6-6 Nos. of perimeter wave setting
	w
-------------------------------------------------------------------------------
[Book 1] w value
[Book 2] w ± value
-------------------------------------------------------------------------------
[Range] [Book 1] 0 to 31
	[Book 2] -31 to +31
-------------------------------------------------------------------------------
[Audio Source] FM(OPM) / SSG
-------------------------------------------------------------------------------
	The percussion number of the H-pattern slot4 of FM (OPM) and SSG sound source is set.

	The higher the value, the lower the frequency.

	＋If + or - is indicated, the value will change relative to the current value.

	Even if you set the frequency with this, the noise will not sound unless the noise is turned on with the P command.
	The noise will not sound.

[Note: If SSG sound effects such as SSG drums are being played when this command is executed in the SSG sound part, the sound will not be heard.
	If SSG sound effects such as SSG drums are being played when this command is executed in the SSG sound source part, it will not be set on the spot, but will be set at the first key on after the sound is finished.
	If SSG sound effects such as SSG drums are being played, they will not be set on the spot, but will be set at the first keyon after the sound is finished.

	Until then, it is affected by the change in noise frequency of the SSG sound effect.
	If at all possible, it is better to use SSG noise only in the I part, where it is eliminated by the SSG sound effect.
	It is safer to use SSG noise only in the I-part, where it is eliminated by the SSG sound effect.

[Example 1] w31
[Sets the noise frequency to 31, the lowest possible value.

[Related] P command (->§6-5)

===============================================================================
§6-7 Rhythm pattern selection and performance
	R
-------------------------------------------------------------------------------
[Format] R Numeric
-------------------------------------------------------------------------------
[Range] 0 to 255
-------------------------------------------------------------------------------
[Source] R Select
-------------------------------------------------------------------------------
	By using the rhythm definition part (R), the rhythm pattern defined for the specified numeric number will be played.
	The rhythm pattern defined by the rhythm definition part (R) will be played.

[Example] R0R0R0R1
[This will play the pattern of R0 three times and the pattern of R1 once.

[Related topics] Using the rhythm part (K/R) (->§1-2)

===============================================================================
*******************************************************************************
§7 [[[[ MML command detuning part ]]]]
*******************************************************************************
===============================================================================

	This section contains descriptions of the detuning command, which allows you to make subtle changes to the pitch of a note.
	The explanation is summarized here.

===============================================================================
§7-1 Detuning settings
	D DD
-------------------------------------------------------------------------------
[Format 1] D value
[Format 2] DD value
-------------------------------------------------------------------------------
[range] -32768 to +32767
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,86,PPZ)
-------------------------------------------------------------------------------
	Set the detuning value (the value to shift the frequency).

	The D command specifies the absolute detuning value, and the DD command specifies the current detuning value.
	The DD command changes the detuning value relative to the current detuning value.

	The default detuning value is 0.

	In the case of the SSG sound source, the #Detune or DX command will change the effect of the same value.
	In the case of SSG instruments, the #Detune or DX command will change the effect of the same value.

	In the #Detune Normal or DX0 state, the value output to the FM source LSI is left unchanged.
	In the #Detune Normal or DX0 state, the value output to the FM sound source LSI is shifted by, for example, +1 for +1.

	#In the "Detune Extend" or "DX1" state, the same value is shifted by the same amount in any octave.
	In the #Detune Extend or DX1 state, if the value is the same in any octave, it will be shifted by the same amount. However, if the value is not zero (e.g., D1), it will always be off by at least 1.
	However, if the value is not zero (e.g. D1), the value will always be off by at least one.

	In the case of a PCM or FM sound source, the pitch value is added to or subtracted from the pitch value given to the FM sound source LSI.
	In the case of a PCM or FM sound source, it is added to or subtracted from the pitch value given to the FM source LSI.

	If the DM command (→§7-6) is specified, the master detuning value and the detuning value specified here will be added or subtracted.
	If the DM command (→§7-6) is specified, the master detuning value and the detuning value specified here are added together and set.

[Example].
G D0 v13 o5g1
H D1 v13 o5g1
[The G part and the H part will be pronounced with slightly different frequencies overlapping each other.

[Note: By executing the DD command, the detuning value may exceed +32767 or fall below -32768.
	This command does not check if the detuning value exceeds +32767 or falls below -32768.

[Related] DX command (->§7-3)
	#Detune command (->§2-16)
	DM command (->§7-6)

===============================================================================
§7-2 Specifying the detune for each slot of the FM sound source 3ch part
	sd sdd
-------------------------------------------------------------------------------
[Format 1] sd slot number , number
[Format 2] sdd slot number , number
-------------------------------------------------------------------------------
[Range] slot number 1 to 15
	Numeric -32768 to +32767
-------------------------------------------------------------------------------
[Source] FM(3ch)
-------------------------------------------------------------------------------
	This command can be used to specify only the 3-channel FM sound source part, and sets the detuning value for each slot.

	The sd command specifies the absolute detuning value, and the sdd command specifies the current detuning value.
	The sd command specifies the detuning value absolutely, while the sdd command changes the value relative to the current detuning value.

	The slot number is used to specify the slot, and the numeric value is used to specify the detuning value.

	The slot number is 1 for slot1, 2 for slot2, 4 for slot3, 8 for slot4, and so on.
	The total value is specified.

	It is also possible to use this command together with the D command.
	In this case, the detuning value of the D command is added to or subtracted from all slots used in the specified part.
	In that case, the detuning value of the D command will be added to or subtracted from all slots used by the specified part.

	By default, all slots are set to 0.

[Note: The same value is used for all 3-channel FM parts.
	For example, in PMD.COM, while playing Slot1,2 in C part and Slot3,4 in D part
	If you set sd8,+10 in the C part, Slot4 of the tone being played in the D part will be detuned by
	+In order to avoid this problem, it is recommended to use the following method.

	To avoid this problem, do not specify sd for any other slot than the one being played.
	To avoid such a phenomenon, do not specify any sd other than the performance slot. To avoid this, do not specify sd for slots other than the performance slot.
	If you want to change the playing slot in the middle of a song, you need to set the detuning value of the slot that will no longer be played back to 0.
[For example: sd6,-4
[Result] Slots 2 and 3 will be detuned by -4.

[Related] s command (->§6-2)
	D DD command (->§7-1)

===============================================================================
§[Related] s command (->6-2) D DD command (->7-1)
	DX
-------------------------------------------------------------------------------
[Format] DX Value
-------------------------------------------------------------------------------
[Range] 0 to 1
-------------------------------------------------------------------------------
[Source] SSG
-------------------------------------------------------------------------------
	Selects whether or not to correct the pitch of the SSG sound source.

	If the value is 0, the pitch value sent to the sound source will always be shifted by 1 when using DETUNE/LFO.
	If the value is 0, the pitch value sent to the sound source will always be shifted by 1 when the DETUNE/LFO is used. (Even with the same DETUNE value, the higher the range, the larger the shift.)

	If the value is set to 1, the shift will become smaller as you go to higher registers, and the same DETUNE/LFO value will be sent to the sound source.
	If the value is set to 1, the shift will become smaller as you go up in the higher register, and the same DETUNE/LFO value will cause the shift to be about the same for all notes.

	This is the same function as #Detune, but it can be changed for each part.
	The default value is 0.

[Example: DX1
[Result] Corrects the subsequent detune value for each note.

[Related] #Detune command (->§2-16)
	D DD command (->§7-1)
	M MA MB command (->§9-1)

===============================================================================
§7-4 Bend width setting
	B
-------------------------------------------------------------------------------
[Format] B Value
-------------------------------------------------------------------------------
[Range] 0 to 255
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,86,PPZ)
-------------------------------------------------------------------------------
	Sets a MIDI-like bend width. Similar to #Bendrange.
	Can be set from 0 to 255 in semitone units.

	Writing a non-zero value will activate the I command.

	This value is carried over from part to part.
	For example, if you set only B12 in part C, the bend width will not be set in part AB.
	For example, if you set only B12 in part C, the bend width will not be set in part AB, but it will be set in all parts after part C (CDEFGHIJ + #FM3Extend parts).
	(CDEFGHIJ + #FM3Extend).
	However, if you set it to #Bendrange, it is valid for all parts.


[Note: Once the bend width is set, the cautions described in the I command (->§7-5) become effective.
	In addition, MML becomes very difficult to read, so it is best not to use it except when converting from MIDI data.
	In addition, MML becomes very difficult to read, so it is best not to use it except when converting from MIDI data.

[Example] B12
[Bend range is set to be exactly one octave off at I 8192.

[Related] #Bendrange command (->§2-15)
	I command (->§7-5)

===============================================================================
§7-5 Pitch setting
	I
-------------------------------------------------------------------------------
[Format] I Numeric
I -------------------------------------------------------------------------------
[Range] -32768 to +32767
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,86,PPZ)
-------------------------------------------------------------------------------
	Sets a MIDI-like PITCH value.

	The frequency is shifted by a bend width of ±8192.

	It is disabled unless you set the bend width with the #Bendrange or B command.
	Disabled.

[Note 1] The pitch setting is accurate only for FM sound sources.
	The SSG/ADPCM parts will be pitched up or down to a certain degree, but it is safer not to use them.

[Note 2] When the bend width is set and this command is enabled, the PITCH/DETUNE value will be set to "0".
	The PITCH/DETUNE value will be set only after the next pitch command.

[Example 1]
A B2I0[cdeI8192fga]2
[Result]
A B2[I0cdeI8192fga]2
	The result is the same as

	Also, the "D" command is affected in the same way.
[Example 2]
If you use A B0D10[cdeD0]2, it will be the same as
[Result]
A D10 cdeD0 cdeD0 cdeD0 will be played, but

[Example 3]
A B2D10[cdeD0]2 would be.
[Result] A D10cdeD0
A D10cdeD0 D10cdeD0 will be played, so please be careful.

[Example 4]
A B12o4l8 I0cI1000cI2000cI3000cI4000cI5000cI6000cI7000cI8192c
[Result] Gradually increase the pitch from c in octave 4 to c in octave 5.

[Related] #Bendrange command (->§2-15)
	B command (->§7-4)
	D DD command (->§7-1)

===============================================================================
§7-6 Master detuning settings
	DM
-------------------------------------------------------------------------------
[format] DM value
-------------------------------------------------------------------------------
[range] -32768 to +32767
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,86,PPZ)
-------------------------------------------------------------------------------
	This command sets the master detuning value for each part.

	When this command is recognized, the detuning setting is made immediately, and then the detuning value is set for each part.
	When this command is recognized, the detuning setting is made immediately, and the specified value is increased or decreased to the detuning value by the D command after this.
	When this command is recognized, the detuning setting is made immediately, and the detuning value by subsequent D commands will be set to increase or decrease the specified value.

[Related] D DD command (->§7-1)

===============================================================================
*******************************************************************************
§8 [[[[ MML command envelope section ]]]]
*******************************************************************************
===============================================================================

	This section describes the software envelope commands that change the sound of SSG/PCM.
	related commands that change the SSG/PCM sound.

===============================================================================
§8-1 SSG/PCM software envelope specification
	E
-------------------------------------------------------------------------------
[Format 1] E Number 1 , Number 2 , Number 3 , Number 4
[Format 2] E Number 1 , Number 2 , Number 3 , Number 4 , Number 5 [, Number 6]
-------------------------------------------------------------------------------
[Source] SSG / PCM(AD,86,PPZ)
-------------------------------------------------------------------------------
[Range] [Format 1] Number 1 0 to 255
		Value 2 -15 to +15
		Value 3 0 to 255
		Number 4 0 to 255

	[Format 2] Number 1 0 to 31
		Number 2 0 to 31
		Number 3 0 to 31
		Number 4 0 to 15
		Number 5 0 to 15
		Number 6 0 to 15
-------------------------------------------------------------------------------
	Sets the software envelope. (Only for SSG/ADPCM part of OPN/OPNA)
	Two types of envelopes can be selected. However, they cannot be used simultaneously.

	If 4 numbers are specified, it is treated as format 1, and if 5 or 6 numbers are specified, it is treated as format 2.
	If the number is 4, it is treated as format 1.

	When using #Envelopespeed Normal or EX0, the speed depends on the tempo.
	When #Envelopespeed Extend or EX1 is used, the speed is constant.

-------------------------------------------------------------------------------
§8-1-1 Software envelope specification/format 1
-------------------------------------------------------------------------------
	This is PMD's original simple envelope specification method.

	Value 1 = Attack Length (AL)
	Value 2 = Decay Depth (DD)
	Value 3 = Sustain Rate (SR)
	Number 4 = Release Rate (RR)

	#For Envelopespeed Normal or EX0, 1 clock = 1 internal clock.
	#For Envelopespeed Extend or EX1, 1 clock = approximately 56 Hz.
	The settings will change as follows: 1.

1. after Keyon, wait for AL clock minutes at the set volume, then
	Then add or subtract DD to the volume. 2.

After that, DD is added or subtracted to the volume. 2. every SR clock, the volume is reduced by -1. 3.

After the key is turned off, the volume is adjusted by -1 for each RR clock.

	When SR = 0, no volume decay is applied in step 2.
	When RR = 0, the volume goes to 0 at once when 3.

[Example] C96 EX0 E1,-2,2,1 v13 l16 gr
[The volume will change as follows.
	13 11 11 9 9 7 7 6 5 4 3 2
	↑keyon ↑keyoff

-------------------------------------------------------------------------------
§8-1-2 Software envelope specification/format 2
-------------------------------------------------------------------------------
	The specification method is almost the same as for FM sound sources.

	Value 1 = Attack Rate (AR)
	Value 2 = Decay Rate (DR)
	Value 3 = Sustain Rate (SR)
	Value 4 = Release Rate (RR)
	Number 5 = Sustain Level (SL)
	Number 6 = Attack Level (0 when omitted)

	Attack Level specifies the level at which the attack begins.

	Note that similar does not mean identical in terms of speed.
	Especially in the case of #Envelopespeed Normal or EX0, the speed depends on the tempo.

	For more information about the meaning of the parameters, please refer to the manual of the FM sound source.

[Example: E31,18,4,15,2
[This sets the envelope for the piano type.

-------------------------------------------------------------------------------

[Related] #Envelopespeed command (->§2-18)
	EX command (->§8-2)

===============================================================================
§8-2 Software envelope speed setting
	EX
-------------------------------------------------------------------------------
[format] EX value
-------------------------------------------------------------------------------
[Range] 0 to 1
-------------------------------------------------------------------------------
[Source] SSG / PCM(AD,86,PPZ)
-------------------------------------------------------------------------------
	When the value is 1, the envelope by the E command is changed to an extended specification that makes the speed constant and independent of the tempo.
	If the value is 1, the envelope of the E command is changed to a constant speed independent of the tempo.

	If the value is 0, it depends on the tempo. (The slower the tempo, the slower the envelope.)

	This is the same function as #EnvelopeSpeed, but if you specify it here, you can change it for each part.
	The default is 0.

	The default value is 0.

[Example: EX1
[The envelope of the specified part is made independent of the tempo from there.

[Related] #Envelopespeed command (->§2-18)
	E command (->§8-1)

===============================================================================
*******************************************************************************
§9 [[[[ MML command and LFO section ]]]]
*******************************************************************************
===============================================================================

	This section summarizes LFO (Low Frequency Oscillator) related commands.
	LFO (Low Frequency Oscillator) related commands.

	LFOs are used to change the pitch/volume of FM/SSG/PCM and the TL value of FM sources over time.
	LFO is mainly used for vibrato (pitch), tremolo (volume), and wah-wah (TL).
	By changing the pitch/volume of the FM source and the TL value of the FM source over time, it is possible to create vibrato effects for pitch, tremolo effects for volume, and wah-wah effects for TL value.

	In addition, various waveforms are available, especially random waves, which are useful for processing sound effects.
	In particular, random waves are useful for processing sound effects.
===============================================================================
§9-1 Software LFO specification
	M MA MB
-------------------------------------------------------------------------------
[Format 1] M Number 1
[Format 2] M Sound length [.].
[Format 3] M Number 1 , Number 2 , Number 3 , Number 4
[Format 4] M l tone length[.] , Numeral 2 , Numeral 3 , Numeral 4
[Format 5] MA Number 1
[Format 6] MA l tone length [.]
[Format 7] MA Number 1 , Number 2 , Number 3 , Number 4
[Format 8] MA l tone length [.] , Numeral 2 , Numeral 3 , Numeral 4
[Format 9] MB Number 1
[Format 10] MB l tone length [.].
[Format 11] MB Number 1 , Number 2 , Number 3 , Number 4
[Format 12] MB l tone length [.] , Number 2 , Number 3 , Number 4
-------------------------------------------------------------------------------
[Range] [Number 1] 0 to 255
	[Number 2] 0 to 255
	[Number 3] -128 to +127
	[Number 4] 0 to 255
	[Note length] The value between 1 and 255 that is approximately the length of all notes.
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,PPZ)
-------------------------------------------------------------------------------
	Specifies a software LFO.

	PMD has two software LFOs, which can be used independently of each other.
	PMD has two software LFOs, each of which can be used independently.
	Use M or MA to select the first LFO (LFO1), and use MB to select the second LFO (LFO2).
		 MB specifies the second LFO (LFO2).

	The values to be specified are as follows

	Number 1 = delay
	Number 2 = speed
	Number 3 = depthA
	Value 4 = depthB

	If only delay is specified by itself, only the current delay value will be changed.

	The delay is set by the sound length when l is added, or by the internal clock value when l is not added.
	If not, it is set by the internal clock value.

	LFO speed can be set by
	#The LFO speed depends on the tempo when using LFOSpeed Normal or MX0.
	The LFO speed depends on the tempo in the case of #LFOSpeed Normal or MX0, and is constant in the case of #LFOSpeed Extend or MX1.

	The LFO waveform depends on the one specified by the MW command.
	Depending on the waveform, each number will have a slightly different meaning.

	#LFOSpeed Normal or MX0: 1 clock = 1 internal clock
	In the case of #LFOSpeed Extend or MX1, 1 clock = about 56 Hz.
	In the case of #LFOSpeed Normal or MX0, 1 clock = 1 internal clock.

	In the following explanation, each MX MW * command changes the specified LFO.
	In the following explanation, each MX MW * command should be taken as a command to change the specified LFO (MXB MWB *B for MB).

-------------------------------------------------------------------------------
§9-1-1 Software LFO specification/MW0 (Triangle wave 1)
-------------------------------------------------------------------------------
1) After key on, wait for delay clock.
2) For each speed clock, add depthA to the amount of change in pitch/volume.
3) Repeat 2) for depthB times, or infinite times if 255 is set.
4) Invert depthA positively or negatively, doubling depthB the first time it is inverted.
5) Return to 2).

[D / backslash
		　D / backslash
		D / ＼ / ＼ / ＼
±0→ ・・・・------------ backslash------------/-- → →
　　　 A B C backslash
				A B C
				　B

A to B (length) : delay (parameter 1)
B to C (length) : speed × depthB (Parameter 2 × Parameter 4)
B to D (depth) : depthA × depthB (Parameter 3 × Parameter 4)

-------------------------------------------------------------------------------
§9-1-2 Software LFO specification/MW1 (sawtooth wave)
-------------------------------------------------------------------------------
1) After key on, wait for delay clock.
2) For each speed clock, add depthA to the amount of change in pitch/volume.
3) Repeat 2) for depthB times, or infinite times if 255 is set.
4) Invert the pitch/volume change positively or negatively, and multiply depthB by 2 the first time it is inverted.
5) Return to 2).

[Image] D / / /
		　/ / / /
		/ / / /
±0→ ・・・・------------/------------/-- → →
　　　 A B C ／ ／ ／ ／
		      　A B C
		      A to B (length)

A to B (length) : delay (parameter 1)
B to C (length) : speed × depthB (parameter 2 × parameter 4)
B to D (depth) : depthA × depthB (Parameter 3 × Parameter 4)

-------------------------------------------------------------------------------
§9-1-3 Software LFO specification/MW2 case (square wave)
-------------------------------------------------------------------------------
1) After the key is turned on, wait for the delay clock.
2) Set the amount of change in pitch/volume as depthA x depthB. 3) Wait for 255 clocks.
3) Wait for the speed clock. 255 means no change.
4) Invert the amount of change in pitch/volume.
5) Return to 3).

[Image] D・・・・ ・・・・


±0 → ・・・・ ------------------------------ →
　　　 A B C

			・・・・ ・・・.

A to B (length) : delay (parameter 1)
B to C (length) : speed (parameter 2)
B to D (depth) : depthA × depthB (Parameter 3 × Parameter 4)

-------------------------------------------------------------------------------
§9-1-4 Software LFO specification/MW3 (random wave)
-------------------------------------------------------------------------------
1) After the key is turned on, wait for the delay clock.
2) Set the amount of change in pitch/volume to a random value between 0 and ±(depthA x depthB).
If the value is 255, it will remain unchanged.
4) Return to 2).

[Image] D...
					... ...
		　　D... ...
±0→ ・・・・----------------・・・---------- → 0
　　　 A B C		
				　　A B C
		　　　　... ... ... ...

A to B (length) : delay (parameter 1)
B to C (length) : speed (parameter 2)
B to D (depth) : 0 to ±( depthA × depthB )
		　( 0 to ±(parameter 3 × parameter 4) )

-------------------------------------------------------------------------------
§9-1-5 Software LFO specification/MW4 case (Triangle wave 2)
-------------------------------------------------------------------------------
1) After key on, wait for delay clock.
2) For each speed clock, add depthA to the amount of change in pitch/volume.
3) Repeat 2) for depthB times, or infinite times if 255 is set.
4) Invert depthA positively or negatively; unlike MW0, depthB is not changed here.
5) Return to 2).

[D / ＼ / ＼ / ＼ / ＼
		　/ ＼ / ＼ / ＼ / ＼ / ＼ / ＼ / ＼
		D / backslash / backslash / backslash / backslash / backslash / backslash
±0→ ・・・・------------------------------ →
　　　 A B C

A to B (length) : delay (parameter 1)
B to C (length) : speed × depthB (Parameter 2 × Parameter 4)
B to D (depth) : depthA × depthB (Parameter 3 × Parameter 4)

[In MW0 triangle wave 1, the range is -(depthA × depthB) to +(depthA × depthB).
	In MW4, the range is 0 to +(depthA×depthB).

	This triangle wave 2 is mainly useful for volume LFO (tremolo/wah-wah).
	This triangle wave 2 is useful mainly for volume LFOs (tremolo/wah-wah).
	For pitch LFOs, it can be used to simulate the movement of a guitar arm.

-------------------------------------------------------------------------------
§9-1-6 Software LFO specification/MW5 (Triangle wave 3)
-------------------------------------------------------------------------------
1) After the key is turned on, wait for the delay clock.
2) For each speed clock, add depthA×｜depthA｜ to the amount of change in pitch/volume.
3) Repeat 2) for depthB times, or infinite times if 255 is set.
4) Invert depthA positively or negatively, and when it is inverted for the first time, multiply depthB by 2.
5) Return to 2).

[D / backslash
		　D / backslash
		D / ＼ / ＼ / ＼
±0→ ・・・・------------ backslash------------/-- → →
　　　 A B C backslash
				A B C
				　B C
A to B (length) : delay (parameter 1)
B to C (length) : speed × depthB (Parameter 2 × Parameter 4)
B to D (depth) : depthA × ｜depthA｜ × depthB
		　(Parameter 3 × ｜Parameter 3｜ × Parameter 4)

[Supplement] Deeper triangle wave.

[Note: The possible range of the LFO variation is -32768 to +32767.
	In order to reduce the processing time, there is no check when the range is exceeded.
	Please note that there is no check when this range is exceeded.

[Example] M0,1,32,64 MW5 *1
	In the above example, the number of clocks changes by 32 x 32 = 1024 per 1 clock.
	However, since 32768/1024 = 32 clocks equals +32768, playing a note longer than that will cause the note to be played backwards.
	If you play a note longer than that, the sound will be turned inside out.

-------------------------------------------------------------------------------
§9-1-7 Software LFO specification/MW6 (one-shot)
-------------------------------------------------------------------------------
1) After the key is turned on, wait for the delay clock.
2) For each speed clock, add depthA to the amount of change in pitch/volume.
3) Repeat 2) for depthB times, or infinite times if 255 is set.
3) Repeat 2) for depthB times, or infinitely if 255 is set. 4) Continue to maintain the state after the repetition is complete.

[image] D / ￣￣￣￣￣￣￣￣￣￣￣￣
		　D /
		[Image] D
±0→ ・・・・------------------------------ → A B C
　　　 A B C

A to B (length) : delay (parameter 1)
B to C (length) : speed × depthB (Parameter 2 × Parameter 4)
B to D (depth) : depthA × depthB (Parameter 3 × Parameter 4)

[This is useful when you want to use a volume LFO to temporarily change the sustained tone to a decaying tone.
	Also, depending on how you use it, it may be useful for trumpets.
	Also, depending on how you use it, it can be used to create a fade-in effect after a trumpet sound.
	It can also be used to create a fade-in effect after trumpet sounds.

-------------------------------------------------------------------------------

[Note 1] This command only specifies a value, not the actual LFO.
	* This command only specifies a value, not the actual LFO.
	However, this does not apply if LFO has already been turned on.

[Note 2: If you process this command, you will not be able to use the keyon asynchronous LFO switch.
	LFO switch is set, the previous LFO will be initialized and the next note will have a delay value of
	The next note will be affected by the delay value.

[Example] MW0 M24,1,8,2 *1
[The result is a triangle wave LFO with delay 24, speed 1, and depth 8 x 2 as the first LFO.
	[Result

[Related] #LFOSpeed command (->§2-17)
	MX MXA MXB command (->§9-5)
	MW MWA MWB command (->§9-2)
	* *A *B command (->§9-3)

===============================================================================
§9-2 Software LFO waveform specification
	MW MWA MWB
-------------------------------------------------------------------------------
[Format 1] MW value
[Format 2] MWA value
[Format 3] MWB Numeric
-------------------------------------------------------------------------------
[Range: 0 to 5
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,PPZ)
-------------------------------------------------------------------------------
	Sets the LFO waveform.

	MWA/MWB are the settings for LFO1 and LFO2 respectively.
	MW is equivalent to MWA.

	The values to be specified are as follows. For the actual value, see the explanation of the M MA MB command.
	Refer to the explanation of the M MA MB command.

	0 Triangle wave 1 (default)
	1 Sawtooth wave
	2 Square wave
	3 Random wave
	4 Triangular wave 2
	5 Triangular wave 3
	6 One-shot

[Example] MW2
[The software LFO1 from there is assumed to be a square wave.

[Related] M MA MB command (->§9-1)

===============================================================================
§9-3 Software LFO switch
	* *A *B
-------------------------------------------------------------------------------
[Format 1] * Numeric 1[,Numeric 2].
[Format 2] *A Numeric 1[,[B] Numeric 2]
[Format 3] *B Number 1[,A Number 2].
-------------------------------------------------------------------------------
[range] 0 to 7
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,PPZ)
-------------------------------------------------------------------------------
	Controls software LFO on/off and keyon synchronization.

	By default, the number 1 controls LFO1, and the number 2 (optional) controls LFO2.
	However, you can change the target by adding an A or B symbol after the * or ,.
	The meanings of the values are as follows

	The meanings of the specified values are as follows.

	Value = 0 Turn off LFO (default)
	Value=1 Pitch LFO on, keyon sync
	Value=2 Volume LFO on, keyon sync
	Value=3 Pitch & volume LFO on, keyon sync
	Value=4 Turn off LFO
	Value=5 Turn on pitch LFO, do not sync to keyon
	Value=6 Volume LFO on, no keyon sync
	Value=7 Turn on pitch and volume LFOs, do not sync to keyon

[Example 1] *1
[Result] The target of LFO1 is set to ON for pitch and keyon sync.
	There is no effect on LFO2.

[Example 2] *0,2
[Result] LFO1 is turned off and LFO2 is turned on by volume and keyon sync.

[Example 3] *B5
[Result] Turns on LFO2 with pitch and keyon asynchronous.
	There is no effect on LFO1.

[Note 1] When applying a volume LFO to an FM source, the actual LFO variation value applied to the TL is inverted.
	When the volume LFO is applied to an FM source, the actual LFO variation value applied to the TL is inverted. Therefore, if the LFO is +, the volume will be increased (TL value will be decreased).
	When the LFO is +, the volume goes up (TL value goes down). Please note that the same applies to the wah-wah effect by changing the target SLOT.
	Please be careful.

[Note 2] The PCM(86) part does not apply the pitch LFO.

[Note 3] The rhythm (K/R) part is a PDR operation mode control command.

[Note 4] The same LFO parameters (set by the M MA MB command) are used for both pitch LFO and volume LFO.
	(set by the M MA MB command). If you want to use different parameters at the same time, use the
	If you want to use different parameters at the same time, use them separately in LFO1/LFO2.

[Note 5] If you specify duplicate parameters such as *B1 and B2, the previous B1 part is ignored and the meaning becomes the same as *B2.
	[Note 5] If you specify duplicate values such as *B1 and B2, the preceding B1 part is ignored and becomes the same as *B2.

[Related] M MA MB command (->§9-1)
	* command (PDR operation mode control, ->§15-2)

===============================================================================
[Related] M MA MB command (->§9-1) * command (PDR operation mode control, ->§15-2)
	MM MMA MMB
[Format 1] MM slot number
[Format 2] MMA slot number
[Format 3] MMB slot number
-------------------------------------------------------------------------------
[Range] 0 to 15
-------------------------------------------------------------------------------
[Source] FM
-------------------------------------------------------------------------------
	Sets the slot number that reflects the effect of the software LFO, effective only for FM sound parts.
	Set the slot number to reflect the effect of the software LFO.

	For FM3ch parts, both pitch and volume LFOs are specified.
	For all other FM channels, only the volume LFO is specified.

	MMA sets LFO1, MMB sets LFO2.
	MM is the same as MMA.

	The value to be specified is the total value, where slot1 is 1, slot2 is 2, slot3 is 4, and slot4 is 8.
	The total value is set.

	For example, if you want LFO to be applied to slots 2 and 4, specify MM10.

	If you specify 0, the effect of
	The effect of the volume LFO is reflected in the slot at the carrier position of the tone.
	The effect of the pitch LFO is reflected in all slots.
	(default). (default)

[Example: MM3
[The effect of LFO1 will be reflected in slot1 and slot2.

The effect of LFO1 will be reflected in slot1 and slot2. [Note] If non-zero is specified, this value will remain unchanged even if the tone is changed.

===============================================================================
§9-5 Software LFO speed setting
	MX MXA MXB
-------------------------------------------------------------------------------
[Format 1] MX Numeric
[Format 2] MXA numeric
[Format 3] MXB numeric
-------------------------------------------------------------------------------
[Range] 0 to 1
-------------------------------------------------------------------------------
[Sound source] FM / SSG / PCM(AD,PPZ)
-------------------------------------------------------------------------------
	When n is 1, LFO is changed to a constant speed independent of tempo by M MA MB command.
	If n is 1, the LFO is changed to a constant speed independent of tempo by the M MA MB command.

	MXA is set to LFO1, and MXB is set to LFO2.
	MX is the same as MXA.

	MXA is equivalent to MXA. 0 is tempo-dependent; slower tempo means slower LFO.

	#This is the same function as LFOSpeed, but if you specify it here, you can change it for each part and each LFO.
	The default is 0.

	The default value is 0.

[Example: MXB1
The default value is 0. [Result] LFO2 will be set to a tempo-independent speed.

[Related] #LFOSpeed command (->§2-17)
	M MA MB command (->§9-1)

===============================================================================
[Related] #LFOSpeed command (->§2-17) M MA MB command (->§9-1)
	MP MPA MPB
-------------------------------------------------------------------------------
[Format 1] MP ±Number 1[,Number 2[,Number 3]]
[Format 2] MP ±Number 1[,l-note length[.] [,numeric3]]
[Format 3] MPA ±Number 1[,Number 2[,Number 3]]
[Format 4] MPA ±Number 1[,l-note length[.] [,numeric3]]
[Format 5] MPB ±Number 1[,Number 2[,Number 3]]
[Format 6] MPB ±Number 1[,l-note length[.] [,numeric3]]
-------------------------------------------------------------------------------
[Range] [Number 1] -128 to +127
	[Number 2] 0 to 255
	[Number 3] 0 to 255
	[Note length] 1-255, which is approximately the length of all notes.
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,PPZ)
-------------------------------------------------------------------------------
	Select an ascending/descending type software LFO and turn the LFO on.

	MPA is set to LFO1, MPB is set to LFO2.
	MP is equivalent to MPA.

	±Value 1 = depth
	  Numeric 2 = delay (default: 0)
	  Value 3 = speed (default: 1)

	The delay value is set by the sound length when l is added, or by the internal clock value when it is not added.
	If not, it is set by the internal clock value.

	In practice, it is the same as MA (or MB) number 2, number 3, number 1, 255 *1.

[Example: MP-80
[Result] Set up a descending LFO for the drum part, etc.

[Note: Since you are simply issuing the M and * commands, you can use the MW MWA MWB command to create a rectangle.
	Note] Since this command simply issues M and * commands, it will not work properly when square wave or random wave is selected by the MW MWA MWB command.
	If square wave or random wave is selected by MW MWA MWB command, it will not work properly.

[Related] M MA MB command (->§9-1)
	*A *B command (->§9-3)
	MW MWA MWB command (->§9-2)

===============================================================================
§9-7 Setting the temporal variation of the LFO depth
	MD MDA MDB
-------------------------------------------------------------------------------
[Format 1] MD Number 1[,±Number 2[,Number 3]]
[Format 2] MDA Numeric 1[,±Numeric 2[,Numeric 3]]
[Format 3] MDB Numeric 1[,±Numeric 2[,Numeric 3]]
-------------------------------------------------------------------------------
[Range] [Number 1] 0 to 255
	[Number 2] -128 to +127
	[Number 3] 0 to 127
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,PPZ)
-------------------------------------------------------------------------------
	Sets the temporal variation of the LFO depth (depthA).

	This allows you to create LFOs that get deeper and deeper, or conversely, LFOs that get shallower and shallower.
	The MDA sets LFO1, MFO2, and MFO3.

	MDA sets LFO1, and MDB sets LFO2.
	MD is the same as MDA.

	  Value 1 = speed
	±Value 2 = depth (+ is optional)
	　Numeric 3 = time ( 0 for infinite cycles)

	For each speed cycle of the LFO, depthA is changed (±depth), and the change is repeated for time.
	The change is stopped.

	Regardless of the sign of the LFO's depthA, the depth value changes to a deeper direction with + and to a shallower direction with -.
	When the value 1 is 0, the time is stopped.

	When the value 1 is 0, no temporal change is assumed.

	The value 2 can be omitted only when the value 1 is 0. (It will be 0).

	If number 3 is omitted, the value will be 0 (infinite times).

	The LFO cycle is defined as +1 cycle at the following timing.
	In the case of one-shot LFO, there is no cycle, so it does not change. 1.

In case of triangle wave
	When the LFO change amount becomes 0. 2.

Sawtooth wave and square wave
	When the LFO change amount becomes positive or negative. 3.

Random wave
	When the LFO change amount changes.

[Example 1] MD2,1
[Result] In LFO2 cycle, increase depthA by 1 and keep it until KEYOFF.

[Example 2] MD3,2,4
[Result] In LFO3 cycle, increase depthA by 2 and repeat 4 times.

[Related] M MA MB command (->§9-1)

===============================================================================
§9-10 Hardware LFO speed and delay settings
	H
-------------------------------------------------------------------------------
[Format 1] H Number 1[,Number 2][,Number]]
[Format 2] H Number 1[,Number 2][,l-note length [.]]
-------------------------------------------------------------------------------
[Range] [Number 1] 0 to 7
	[Number 2] 0 to 3
	[Number 3] 0 to 255
	[Note length] 1-255, which is the number of notes in the range.
-------------------------------------------------------------------------------
[Source] FM(OPNA,OPM)
-------------------------------------------------------------------------------
	Set the PMS and AMS of the hardware LFO. (Only for OPNA/OPM FM sound source)

	Value 1 = PMS (speed to pitch)
	Value 2 = AMS (speed to volume)
	Value 3 = Delay (time from keyon to hang, equivalent to the #D command)

	If AMS is omitted, it is set to 0.
	Delay is not set if omitted. (The previous value will be retained.)

	In order to actually start LFO, it is necessary to set the depth using the #/## command.

[Note: In OPNA, even if the hard LFO of the ## command is off, if you increase the AMS, the volume of that part will decrease.
	In OPNA, when the hard LFO of the # command is off, but the AMS is turned up, the volume of that part seems to get lower.
	Therefore, if you want to turn off the LFO completely when using AMS, specify #0H0.
	If you want to turn off the LFO completely when using AMS, specify #0H0.

[Example: H6,2,l4
If you want to turn off the LFO completely when using AMS, specify #0H0. [Example] H6,2,l4 [Result] Set hardware LFO PMS to 6, AMS to 2, and delay to quarter note length.

[Related] # command (->§9-11)
	## command (->§9-12)
	#D command (->§9-13)

===============================================================================
§9-11 Hardware LFO switch, depth setting (OPNA).
	#
-------------------------------------------------------------------------------
[format] # Number 1[,Number 2].
-------------------------------------------------------------------------------
[Range] [Number 1] 0 to 1
	[Number 2] 0 to 7
-------------------------------------------------------------------------------
[Source] FM(OPNA)
-------------------------------------------------------------------------------
	Sets the hardware LFO on/off. (Only for OPNA's FM sound source)

	n1 = switch ( 0 for off / 1 for on, default is 0 )
	n2 = depth ( can be omitted only when switch= 0 )

	This value is common to all FM sound parts ( A to F ).

[Example] #1,6
[Result] Turn on the hardware LFO and set the depth to 6.

[Related] H command (->§9-10)

===============================================================================
§9-12 Hardware LFO frequency, waveform and depth settings (OPM)
	## #f #w #p #a
-------------------------------------------------------------------------------
[format] ## number1,number2,±number3,number4
	#f Number 1
	#w Number 2
	#p ±number 3
	#a Numeric 4
-------------------------------------------------------------------------------
[Range] [Number 1] 0 to 255
	[Number 2] 0 to 3
	[Number 3] -64 to +63
	[Number 4] 0 to 127
-------------------------------------------------------------------------------
[Source] FM(OPM)
-------------------------------------------------------------------------------
	Sets the hardware LFO FRQ, WaveForm, PMD, and AMD. (Only for OPM's FM sound source)

	  Value 1 LFO_FRQ ( Frequency )
	  Value 2 Waveform ( Waveform )
	±Value 3 PMD (Depth to pitch)
	  Value 4 AMD (Depth to Volume)

	You can specify FRQ for #f, Waveform for #w, PMD for #p, and AMD for #a independently.
	Each FM part ( A to I )

	This value is common to all FM sound source parts (A to I).

[Example] ##100,0,20,10
[Set LFO_FRQ to 100, Waveform to 0, PMD to +20, and AMD to 10 for the hardware LFO.
	Set hardware LFO with LFO_FRQ as 100, Waveform as 0, PMD as +20 and AMD as 10.

[Related] H command (->§9-10)

===============================================================================
§9-13 Hardware LFO delay setting
	#D
-------------------------------------------------------------------------------
[Format 1] #D Numeric
[Format 2] #D l tone length [.].
-------------------------------------------------------------------------------
[Range] [Number] 0 to 255
	[Note length] A value between 1 and 255 that is approximately the length of all notes.
-------------------------------------------------------------------------------
[Source] FM(OPNA,OPM)
-------------------------------------------------------------------------------
	Sets the delay of the hardware LFO.
	This is the third parameter of the H command that can be specified independently.

	Temporarily sets PMS/AMS to 0 until the specified time has elapsed after keyon.
	0 until the specified time has passed after keyon.

	The specified value is the sound length when l is added, or the internal clock value when it is not added.
	The specified value is the sound length if l is added, or the internal clock value if not.

	The value is set by the sound length when "l" is added, or by the internal clock value when "l" is not added. It has no meaning unless PMS and AMS are set by the H command.

[Example] #D24
[The hardware LFO will be triggered after a quarter note (at C96) has elapsed since the sound was played.
	[Example] #D24 [Result] Set the hardware LFO to engage after a quarter note (at C96) has passed since the sound was pronounced.

[Related] H command (->§9-10)

===============================================================================
*******************************************************************************
§10 [[[[ MML command loop control section ]]]]
*******************************************************************************
===============================================================================

	This section describes commands to control global and local loops.

	Local loops are useful for reducing the MML size and the size of the compiled data.
	Local loops are useful for reducing the MML size and the size of the compiled data.

	Local looping is useful for reducing the MML size and the size of the compiled data. Global looping is used for infinite looping of a song.

===============================================================================
§10-1 Local loop settings
	[ :]
-------------------------------------------------------------------------------
[format] [ mml1 [:] mml2 ] [number]
-------------------------------------------------------------------------------
[range] 0 to 255
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R selection / R definition
-------------------------------------------------------------------------------
	Sets the loop (repeat).

	The value is the number of times to repeat. 0 means repeat infinitely.

	If omitted, the value specified by #LoopDefault will be set.
	If #LoopDefault is not specified, it will be set to 0.

	If #LoopDefault is not specified, the value is set to 0. If #LoopDefault is specified, the loop is exited at the last loop.

[Example 1] [ cde : fga ]2 b
[Result] Play cde fga cde b.

[Note 1] Nesting is limited to 32 times.
	Nesting is the act of repeatedly creating a loop within a loop.
	[[[[[[[cde]2]2]2]2]2]2]2 is 7 times, but
	In [[cde]2[fga]2[b>cd<]2]2]2, the number of times becomes 2.

[Note 2] The values of the following commands are returned to the values at the start of the loop when the loop is completed.
	[Note 2] The values of the following commands are returned to the values at the start of the loop.
	When the loop is exited, the value will be the one at the end of the loop.

	o > < X ・・・ Octave related
	l ・・・ Default note length setting
	S ・・・ Decorative note setting
	W ・・・ Pseudo echo setting
	C ・・・ Whole note length setting
	_{ } ・・・ Transposition setting

	However, the values of other commands, such as volume settings, are carried over as they are.

[When a single note is specified in MML, the compiler automatically sets the
	"When a note is specified in MML, the compiler automatically sets the following five parameters: pitch, note length, octave, ornamental note, and pseudo-echo.
	It is easy to understand that the compiler automatically sets the following five parameters.

[Example 2] o4l8 cccc
	the compiler will write
[Result] o4c8 o4c8 o4c8 o4c8 o4c8
	The compiler will expand and convert it to data.

[Example 3] o4l8 [ c o5l4c ]2
[Result] o4c8 o5c4 o4c8 o5c4
	The o and l commands are o5l4 at the end of the loop, but
	The o and l commands are o5l4 at the end of the loop, but return to o4l8, the value at the start of the loop, when they return to the beginning of the loop.

[Example 4] o4 [ c : >c ]2 d
[Result] o4c o5c o4c o5d
	When the loop escapes, the value is o4, but after the escape, the value becomes o5 just before the [ ] command.

	If you think the above explanation is not clear enough, be sure to use o and l immediately after the [ and ] commands.
	If you think you don't understand the above explanation well, be sure to set the o and l commands immediately after the [ and ] commands, and the S and W commands if you are using them.
	This will avoid confusion.

[Example 5] [ o4l8 cdl4ef : gab>c ] o5l8 def
[Result] o4l8 cdl4ef gab>c o4l8 cdl4ef o5l8 def

[Related] #LoopDefault command (->§2-13)

===============================================================================
§10-2 Whole loop configuration
	L
-------------------------------------------------------------------------------
[format] L
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R select / R define
-------------------------------------------------------------------------------
	Set to return to the specified position when the MML for that part is finished.

	If it is not specified, the performance will be terminated.

[Note: As with local looping, octave, default note length, etc. will return to the value at the position where L is specified.
	As with local looping, octave, default note length, etc. will return to the value of the position where L is specified.

	The octave, default note length, etc. will return to the value at the position where L is specified, but the values of other commands, such as volume, will be carried over from the end of MML.
	Please note that the values of other commands, such as volume, are carried over from the end of MML.

	It is recommended to initialize each part immediately after L is specified.
	If you do this, you will not get the expected performance immediately after the loop.

[Example of failure]
A @0 v12 cccc
A L cccc
	:
A @1v10 cccc

[The second line will be played @0v12 the first time, but
	The second line is played @0v12 the first time, but @1v10 the second and subsequent times.

[Example]
A @0 v12 cccc
A L @0 v12 cccc
	:
A @1v10 cccc

[The second line is played @0 v12 both the first and second time.

	In fact, commands such as LFO, envelope, modulation, and transposition are also played with
	If there are any changes after L is specified, they will be put in immediately after L is specified.

===============================================================================
*******************************************************************************
§11 [[[[ MML command and tempo setting section ]]]]
*******************************************************************************
===============================================================================

	This section describes the commands for setting the tempo.

===============================================================================
§11-1 Tempo setting 1
	t
-------------------------------------------------------------------------------
[Format] t Numeric
[format 2] t ±numeric
-------------------------------------------------------------------------------
[range] 18-255
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R select / R define
-------------------------------------------------------------------------------
	Specifies the tempo.
	#This is the same as the Tempo command, but it can be changed in the middle of the song.

	A common value is used for all parts.

	＋If + or - is indicated, the value will be changed relative to the current value.

	The internal clock, 48 clocks, is used to set the number of times per minute that the speed of the clock will be increased.
	C96 is the default.

	At C96 (default), the speed is half note = ,.
	When set to C192, the speed will be quarter note=,.

	Values less than 18 cannot be specified.

[Example 1] C96 t100
[Sets the tempo to the rate at which a half note is played 100 times per minute.

[Example 2] t+10
[Result] Increases the tempo value by +10.

[Related] #Tempo command (->§2-10)

===============================================================================
§11-2 Tempo setting 2
	T
-------------------------------------------------------------------------------
[Format] T Numeric
[Format 2] T± Numeric
-------------------------------------------------------------------------------
[Range] 0 to 255
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R select / R define
-------------------------------------------------------------------------------
	This command is used to specify the tempo, but unlike the t command, the value given directly to TIMER-B is set.
	It is the same as the t command.
	#This is the same as the Timer command, but it can be changed in the middle of the song.

	A common value is used for all parts.

	＋If you use + or -, the value will be changed relative to the current value.

	This allows for more detailed settings than the t command, especially at slower tempos.

	In X68000, in order to be compatible with the OPN version, this value is used as the OPN setting value, and the OPM setting value
	This value is used as the OPN setting value to calculate and output the OPM setting value.

	The default value is 200.

[Example 1] T180
[Result] Set the tempo to 180 in Timer-B value.

[Example 2] T+10
[Result] Increases the Timer-B value by +10.

[Related] #Timer command (->§2-10)

===============================================================================
*******************************************************************************
§12 [[[[ MML command, note processing command ]]]]
*******************************************************************************
===============================================================================

	This section describes commands for processing notes, such as ornamental notes and pseudo-echoes.
	commands for processing notes, such as decorative notes and pseudo echoes.

	These commands are unique to PMD and are not found in other music drivers.
	It is possible to use other MML representations without actually using it, but if you can master it, you can get a more realistic sound with fewer sound sources.
	However, if you can master it, you can easily get a more realistic performance with fewer sound sources and better processing.
	However, if you can master it, you can easily get more realistic performance with fewer sound sources.

===============================================================================
§12-1 Decorative note settings
	S
-------------------------------------------------------------------------------
[Format 1] S Number 1[,±Number 2[,Number 3]]
[Format 2] S l-note length [.] [,±numeric2[,numeric3]]
-------------------------------------------------------------------------------
[Range] [Number 1] 0 to 255
	[Number 2] -128 to +127
	[Number 3] 0 to 1
	[Note length] 1-255, which is approximately the length of all notes.
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,86,PPZ)
-------------------------------------------------------------------------------
	A command that is valid for solo parts, from which you can specify the notes to be played.
	This command is useful for solo parts.

	  Number 1 = speed (off by 0)
	±Numeric 2 = depth (default is -1)
	  Number 3 = tie flag (defaults to 1)

	The output pitch will be shifted by a semitone (depth) and then returned to the original pitch at the speed of speed.
	The speed value can be set by adding l.

	The speed value is set by the note length when l is added, or by the internal clock value when l is not added.
	The speed value is set by the note length if l is added, or by the internal clock value if not.

	If the tie flag is set to 0, the notes will not be connected and will look like a gliss.

	If a note length less than ｜speed×depth｜ is specified, no processing is performed.

	If S0 is specified, it will return to normal.

[Example 1] S2,-2e8
[Result] d%2 & d+%2 & e%10

[Example 2] S1,-3,0e8
[Result] c+%1 d%1 d+%1 e%9

[Note 1] Since the data is expanded on the compiler, the data size will increase if too much data is used.
	[Caution 2

[Note 2] You cannot use the l^ l= command while using this command.

[Related] l^ l= command (->§4-9)

===============================================================================
§12-2 Pseudo echo setting
	W
-------------------------------------------------------------------------------
[Format 1] W Number 1[,[%]±Number 2[,Number 3]]
[Format 2] W l tone length [.] [,[%]±numeric2[,numeric3]]
-------------------------------------------------------------------------------
[Range] [Number 1] 0 to 255
	[Numeric 2] -128 to +127
	[Number 3] 0 to 3
	[Note length] The value between 1 and 255 that is approximately the length of all notes.
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM(AD,86,PPZ)
-------------------------------------------------------------------------------
	The compiler will automatically apply a pseudo-echo to the notes you specify from there.
	This is useful when you want to apply an echo but don't have enough parts.

	  Number 1 = delay (off at 0)
	±Number 2 = depth (-1 by default)
	  Number 3 = continue/tie flag (0 by default)

	In practice, after the key is turned on, if the internal clock advances by the delay, the key is turned off (if the tie flag is set, the key is turned off).
	If the tie flag is set, the key is not turned off), the volume is increased or decreased by the depth, and the key is turned on again.
	Key on again. If the "continue" flag is set, this will be repeated as long as the sound length allows.
	If the continue flag is set, it repeats the process as long as the sound length allows.

	The delay value is set by the sound length when l is added, or by the internal clock value when l is not added.
	If not, it is set by the internal clock value.

	After keyoff, the volume returns to the original level.

	The continue/tie flag is set to
		When set to 0: No continuity/tie
		When set to 1: Continuation / Tie
		When set to 2: One time only/No tie
		When set to 3: One time only/with tie

	If % is not specified, depth is set to the v command level.
		 If % is specified, it is treated at the v command level.

	If a note length less than delay is specified, no processing is performed.

	If "W0" is specified, it will return to normal.

[Example 1] W8,-2a4
[result] a%8 (^2 a%8 (^4 a%8

[Example 2] W12,-2,3a2
[Result] a%12& (^2 a%36

[Example 3] W12,%-3,1a2
[Result] a%12 (^%3 a%12 (^%6 a%12 (^%9 a%12

[Note 1] As with the S command, the data is expanded on the compiler.
	If you use too much, the data size will become large.

[Note 2] When specifying the volume with %, the range of volume change is -128 to +127.
	In the case of PCM, the volume is 0-255, so the volume will not change more than the current value of +127 or -128.
	The volume will not change more than the current volume value of +127 or -128.

[Note 3] The l^ l= command cannot be used while this command is in use.

[Related] l^ l= command (->§4-9)

===============================================================================
§12-3 Setting key-on delay for each slots and bts
	sk
-------------------------------------------------------------------------------
[Format 1] sk Number 1[,Number 2]
[Format 2] sk Number 1[,l-note length [.]]
-------------------------------------------------------------------------------
[Range] [Number 1] 0 to 15
	[Number 2] 0 to 255
	[Note length] 1-255, which is the number of notes in the range.
-------------------------------------------------------------------------------
[sound source] FM
-------------------------------------------------------------------------------
	Delays the keyon of the specified slot, which can only be specified in the FM sound section.

	Value 1 = slot number
	Value 2 = delay

	The slot number specifies the slot to delay the keyon for.
	slot1 is 1, slot2 is 2, slot3 is 4, slot4 is 8, and so on.
	Specify the total value.

	The delay value is set by the sound length when "l" is added, or by the internal clock value when it is not added.
	The delay value is set by the sound length if l is added, or by the internal clock value if not.

	The value 2 (note length) can be omitted only when the value 1 is 0.

[Example: sk12,l8
[Result] From there, slots 3 and 4 will be used to delay keyon by an eighth note.

[Note] If a note with a length less than the specified delay value arrives, the keyon of the slot for which the keyon is delayed will not be performed.
	If a note arrives with a length less than the specified delay value, the keyon of the slot with the delayed keyon will not be performed.

===============================================================================
*******************************************************************************
§13 [[[[ MML command, pan setting command ]]]]
*******************************************************************************
===============================================================================

	This section describes the commands for setting the output position (pan) of the sound.

	However, it is not valid when the sound source itself is monaural, such as OPN or SSG.

===============================================================================
§13-1 Panning1
	p
-------------------------------------------------------------------------------
[format] p number
-------------------------------------------------------------------------------
[Range] 0 to 3
-------------------------------------------------------------------------------
[Source] FM(OPNA,OPM) / PCM
-------------------------------------------------------------------------------
	Sets the output position (pan) of the sound.

	The values to be set are as follows.

FM(OPNA),PCM(AD,PPZ) 1 Right
			2 Left
			3 Center (default)

FM(OPM),PCM(68) 1 Left
			2 Right
			3 Center (default)

PCM (86) 1 Right
        		2 Left
			3 Center (default)
			0 Reverse phase

[Reverse phase means that the left and right phases are reversed. The effect is that the sound seems to be played backwards.
	The effect is that the sound seems to be coming from behind you. Especially when you wear headphones, you can really get the effect.
	You can get the effect especially when wearing headphones.

===============================================================================
§13-2 Pan setting 2
	px
-------------------------------------------------------------------------------
[format] px ± number 1[,number 2].
-------------------------------------------------------------------------------
[Range] [Number 1] -128 to +127
	[Number 2] 0 to 1
-------------------------------------------------------------------------------
[Source] FM(OPNA,OPM) / PCM
-------------------------------------------------------------------------------
	Specifies the output position (pan) and forward/reverse phase of the sound.

	Detailed specification is possible only when using the PCM(86,PPZ) part.

FM(OPNA),PCM(AD) Value 1 -128 to -1 Right (constant regardless of value)
				+1 to +127 Left (constant regardless of value)
				0 Center (default)
FM(OPM), PCM(68) Value 1 -128 to -1 Left (constant regardless of value)
				+1 to +127 Right (constant regardless of value)
				0 Center (default)
PCM (86) Numeric value 1 -128 to -1 Left to right
        			+1 to +127 Left (constant regardless of value)
				0 Center (default)
			Value 2 0 Normal phase
				1 Reverse phase
PCM (PPZ) Value 1 -128 to -4 left (constant regardless of value)
				-3 to -1 Lean left
				+1 to +3 Left to right
				+4 to +127 Right (constant regardless of value)
				0 Center (default)

===============================================================================
*******************************************************************************
§14 [[[[ MML command and rhythm sound source command ]]]]
*******************************************************************************
===============================================================================

	This section describes the commands that control the rhythm instruments available in the YM2608.
	This section describes the commands that control the rhythm instruments available in the YM2608.

	This section describes the commands that control the rhythm sound source available in the YM2608. Although they can be specified for all parts, they have no direct effect on the performance of the specified parts.
	This command can be specified for all parts, but it has no direct effect on the performance of the specified part.

	In general, it is easier to understand if the rhythm part is specified at the same time as the
	This is usually easier to understand if it is written at the same time as the rhythm part.
	If you play rhythms only with a rhythm sound source, it is better to use SSG rhythm parts.
	(§1-2-2). (->§1-2-2)

===============================================================================
§14-1 Rhythm source shot dump control
	\b \s \c \h \t \i \bp \sp \cp \hp \tp \ip
-------------------------------------------------------------------------------
[Form 1] \b[p].
[Form 2] \s[p].
[Form 3] \c[p].
[Form 4] \h[p].
[Form 5] \t[p].
[Form 6] \i[p].
-------------------------------------------------------------------------------
[Source] FM(OPNA) / SSG / PCM(AD,86,PPZ) / R selection / R definition
-------------------------------------------------------------------------------
	This command outputs/stops each sound of the rhythm sound source.
	The correspondence between each command and the rhythm sound is as follows.

	b Bass Drum
	s Snare Drum
	c Cymbal
	h Hi-Hat
	t Tom
	i Rim Shot (note that it's not r)

	A "p" will stop (dump) the sound.

	If you want to output both at the same time, use \s\t\i.

[Example 1] \b\s
[Result] The Bass Drum and Snare Drum rhythm instruments will be played simultaneously.

[Example 2] \cp
[Result] Stops the Cymbal sound of the rhythm instrument.

[Note 1] If used before the p and px (pan) commands, for example
	\bp3
	will be judged as \bp 3 and an error will occur.
	\b p3
	to separate the two commands.

[Note 2: Due to OPNA specifications, when outputting SHOT/DUMP rhythms in succession
	[Note 2] Due to the OPNA specification, when outputting a series of SHOT/DUMP rhythm sounds, a rather large weight is required between outputs.

	PMD can handle this by inserting an appropriate weight between the two commands only when they are consecutive.
	However, if a command with no sound length (q, v, etc.) is inserted between the two commands, and the output is effectively continuous, the weighting will be reduced.
	However, if a command with no note length (q, v, etc.) is inserted in between and the output is virtually continuous, the necessary weighting is not inserted and the sound may not be played properly.
	In particular, if a SHOT is followed by another SHOT, it may not be played properly.

	The symptom is especially noticeable when the DUMP command for other rhythm sounds is entered after SHOT.
	Please be careful.

[Example 3]
I [\h \cp r32 ]0
[Result] PMD automatically inserts the weight and the hi-hat is output correctly in 32-minute increments.

[Example 4]
I [\h q0 \cp r32 ]0
[The PMD automatically inserts the weights and the hi-hat output may be abnormal.

===============================================================================
§14-2 Setting the rhythm sound source master volume
	\fnDroid Sans Fallback
-------------------------------------------------------------------------------
[Format] \V [±] Numeric
-------------------------------------------------------------------------------
[Range] 0 to 63
-------------------------------------------------------------------------------
[Source] FM(OPNA) / SSG / PCM(AD,86,PPZ) / R selection / R definition
-------------------------------------------------------------------------------
	Sets the master volume of the rhythm sound source.

	＋A + or - will change the volume relative to the previous volume.

	The volume range is 0-63, with a default of 48.

[Example: \V63
[Result] Maximizes the master volume of the rhythm instrument.

===============================================================================
§14-3 Setting individual rhythm sound volume
	\vb \vs \vc \vh \vt \vi
-------------------------------------------------------------------------------
[Format] \vb [±]Numeric
	\vs [±] numerical value
	\vc [±]numeric
	\vh [±] number
	\vt [±] number
	\vi [±]numeric
-------------------------------------------------------------------------------
[range] 0 to 31
-------------------------------------------------------------------------------
[Source] FM(OPNA) / SSG / PCM(AD,86,PPZ) / R select / R define
-------------------------------------------------------------------------------
	This sets the volume of each rhythm sound source.
	Notating + or - will make relative changes.

	The next letter after \v indicates the corresponding rhythm sound, similar to the shot dump control.
	The next letter of \v represents the corresponding rhythm note, similar to the shot dump control.

[Example 1] \vb25
[Result] Set the Bass Drum volume of the rhythm source to 25

[Example 2] \vs+2
[Result] Increase the volume of the Snare Drum in the rhythm source by 2

===============================================================================
§14-4 Setting the rhythm sound source output position
	\lb \ls \lc \lh \lt \li \mb \ms \mc \mh \mt \mi \rb \rs \rc \rh \rt \ri
-------------------------------------------------------------------------------
[Format] \lb \mb \rb
	\ls \ms \rs
	\lc \mc \rc
	\lh \mh \rh
	\lt \mt \rt
	\li \mi \ri
-------------------------------------------------------------------------------
[Sound source] FM(OPNA) / SSG / PCM(AD,86,PPZ) / R selection / R definition
-------------------------------------------------------------------------------
	Sets the output position for each rhythm sound source.

	The next letter of \ represents the position to be output, as shown below.

	l Left (left)
	r Right (Right)
	m Center (center)

	The next letter represents the corresponding rhythmic note, similar to the shot dump control.
	The next letter represents the corresponding rhythm note, similar to the shot dump control.

[Example: \lh
[Set the Hi-Hat output position of the rhythm source to the left.

===============================================================================
*******************************************************************************
§15 [[[[ MML command, FM sound source LSI/driver control ]]]]
*******************************************************************************
===============================================================================

	This section describes commands to directly control FM sound source LSIs and drivers such as PMD and PDR.
	This section describes commands to directly control FM sound source LSIs and drivers such as PMD and PDR.

	It is rarely used, but if you do use it, you may need to know enough about the control target.
	This section describes commands to directly control FM sound source LSIs and drivers such as PMD and PDR.

===============================================================================
§15-1 Direct output to FM sound source LSI
	y
-------------------------------------------------------------------------------
[format] y number 1, number 2
-------------------------------------------------------------------------------
[Range] [Number 1] 0 to 255
	[Number 2] 0 to 255
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R selection / R definition
-------------------------------------------------------------------------------
	Specifies the value to be output to the FM sound source LSI as it is.

	The numerical value 2 is output as data to the register specified by numerical value 1.

	In the OPNA, the D, E, and F parts output to the back port, but the other parts output to the front port.
	In OPNA, parts D, E, and F are output to the back port, while the other parts are output to the front port.

[Example] y$58,7
[Result] Set the AR of FM channel 1, slot 2 to 7.

[Note 1] Do not use this function unless you have sufficient knowledge of FM sound source LSI.

[Note 2] Although you can fine-tune the FM tone parameters, you may not be able to use them when returning from PAUSE, sound effect, or part mask states.
	Keep in mind that when you return from a PAUSE, sound effect, or part mask state, the voices will be redefined and reverted to their original state.
	Keep this in mind.

	If you want to change the FB and TL values, there are dedicated FB and O commands.
	If you use them, you can avoid such a phenomenon.

[Related] FB command (->§6-4)
	O command (->§6-3)

===============================================================================
§15-2 PDR operation mode control
	*
-------------------------------------------------------------------------------
[Format] * Numeric
-------------------------------------------------------------------------------
[range] 0 to 5
-------------------------------------------------------------------------------
[Source] R-select / R-define
-------------------------------------------------------------------------------
	Used in the K/R part to control the operation mode of the PDR.

	n=0 Set to Double Mode
	n=1 Set to Single Mode
	n=2 Set to 16KHz Mode
	n=3 Set to 8KHz Mode
	n=4 Set to EI Mode
	n=5 Set to DI Mode

[Example] *0
[Result] Set the PDR to Double Mode.

[Note 1] Normally, do not use any value other than 0 and 1 for PDR control. Especially in slow models.
	If *2 is executed with PDR resident, there is a risk of hanging up on the spot.
	Note 2] Software LFO

[Note 2] If the command name is the same as the switch name of the software LFO, it may not be recognized by the specified part.
	[Note 2] The command name is the same as the software LFO switch, and is identified by the specified part. Be careful not to confuse them.

[Related] * Command (software LFO switch) (->§9-3)

===============================================================================
§15-3 Fade-out specification
	F
-------------------------------------------------------------------------------
[Format] F Number
-------------------------------------------------------------------------------
[Range] 0 to 127
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R select / R define
-------------------------------------------------------------------------------
	Fade out from the specified position.

	The speed is specified by a numerical value: 1 is the lowest speed, 127 is the highest speed.

[Example: F16
[Result] Fade out at speed 16.

===============================================================================
§15-4 Volume down setting by sound source
	DF DS DP DR
-------------------------------------------------------------------------------
[Format 1] DF [±] Numeric
[Format 2] DS [±] Numeric
[Format 3] DP [±] Numeric
[Format 4] DR [±]Numeric
-------------------------------------------------------------------------------
[range] [without ±] 0-255
	[With ±] -128 to +127
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R selection / R definition
-------------------------------------------------------------------------------
	Changes the volume down setting by sound source.

	DF is FM sound source, DS is SSG sound source, and
	DS is SSG, DP is PCM, and
	DP is the PCM sound source, and
	DR represents the rhythm source, respectively.

	If you add + or - to a value, it changes it relative to the current value.
	Note that + decreases the volume.

	However, if +0 or -0 is specified, it will be reinitialized to the value specified in the PMD options.
	However, if +0 or -0 is specified, it will be reinitialized to the value specified in the PMD options.

[Example]
G [cdefgab>c< DS+16]8
[Result] The volume of the entire SSG sound source will gradually decrease with each loop.

[Note: The volume down value set here is a local value that is effective only for that song.
	When you start playing the song again, the values specified in the /DF, /DS, /DP, and /DR options of PMD will be
	When you start playing again, the values specified in the /DF, /DS, /DP, and /DR options of PMD will be reset and then restored.

[Related] #VolumeDown command (->§2-22)
	PMD /DF /DS /DP /DR options (->PMD.DOC)

===============================================================================
§15-5 FM sound effect pronunciation
	N
-------------------------------------------------------------------------------
[format] N Numeric
-------------------------------------------------------------------------------
[Range] 0 to 255
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R select / R define
-------------------------------------------------------------------------------
	Sounds an FM sound effect.
	When 0 is specified, it stops.

[Note] FM sound effect can be defined from 0, but 0 cannot be played in MML.
	Example: N4

[Example] N4
[Result: The fourth FM sound effect is played.

===============================================================================
§15-6 Sounding SSG sound effects
	n
-------------------------------------------------------------------------------
[format] n number
-------------------------------------------------------------------------------
[Range] 0 to 255
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R select / R define
-------------------------------------------------------------------------------
	Sounds the SSG sound effect.
	When 0 is specified, it stops.

	If PDR or PPSDRV is resident, the
	1 to 127 SSG sound effect
	128 to 255 SSGPCM sound effect (The value is the number added up to 128.)
	If the PDR and PPSDRV are resident, the SSGPCM sound effect (the value is the number added to 128) is pronounced.

[Example: n15
[The 15th SSG sound effect will be played.

===============================================================================
§15-7 Part mask control
	m
-------------------------------------------------------------------------------
[Format] m Numeric
-------------------------------------------------------------------------------
[range] 0 to 1
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R select / R define
-------------------------------------------------------------------------------
	Controls the mask on/off for the specified part.

	0 turns the mask off (play).
	1 turns the mask on (does not play).

	This is not usually used. It is not usually used.

[Example] m1
[Masks the specified part from being played.

===============================================================================
§15-8 Measure length settings
	Z
-------------------------------------------------------------------------------
[Format] Z Numeric
-------------------------------------------------------------------------------
[Range] 0 to 255
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R select / R define
-------------------------------------------------------------------------------
	Specifies the length of the measure. It has no effect on the performance.

	When incorporating PMD into games, etc., the programmer can specify the length of the measure so that the visuals can be processed according to the measure of the song.
	When PMD is embedded in a game or other application, the programmer can obtain the current measure no. from the programmer so that it can be processed according to the measure of the song in the visuals.
	However, since MML does not have the concept of measures, the current measure number can be obtained from the programmer.
	However, since MML does not have the concept of measures, the driver cannot get an accurate value if it does not know the length of the measure when using 3-beat or variable time.
	measure length.

	So, if you are using triplets or modulation, the driver cannot get an accurate value without knowing the measure length.
	The default is 96.

	The default is 96.

[Example: Z72
The default value is 96. [Example] Z72 [Result] From there, the driver will know that the time signature is in 3/4 time.

[Note: If the time signature changes in the middle of a song, be sure to specify the measure length at the beginning of the measure.
	Note] If the time signature changes in the middle of a song, be sure to specify the measure length at the beginning of the measure.

[If you use this function in reverse, for example, you can make the driver think that a quarter note is a measure.
	If you use this feature in reverse, for example, by having the driver consider a quarter note to be a measure, you can synchronize in quarter note units.

===============================================================================
§15-9 Writing numbers to Status1
	~ ~
-------------------------------------------------------------------------------
[Format 1] ~ Numeric
[Format 2] ~ ± numeric
-------------------------------------------------------------------------------
[Range] [Format 1] 0 to 255
	[Format 2] -128 to +127
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R select / R define
-------------------------------------------------------------------------------
	Write a value to Status1 (which can be obtained by the programmer through the driver).
	Write a value to Status1 (which can be obtained by the programmer through the driver).

	＋When + or - is indicated (format 2), it adds/subtracts to the current Status1.

[Note: The possible range of Status1 is 0-255. If it exceeds this range, CHECK is not performed.
	For example, if you set ~0 ~-1, Status1 will be 255.

[example] ~2
[Result] Write 2 to Status1.

===============================================================================
§15-10 PCM specification selection
	A
-------------------------------------------------------------------------------
[Format] A Numeric
-------------------------------------------------------------------------------
[Range] 0 to 1
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R select / R define
-------------------------------------------------------------------------------
	This is valid when the song is played on PMD86.

	The specification of the PCM part is set to
0 PMD86 normal specification
1 Change the specification to PMDB2 (volume and loop specification will be changed)

	The /s option of PMD86 is also available.

	It is almost the same as the /s option of PMD86, but here it is a local change.
	If you play a different song, the settings will be restored.

[Example: A1
[Result] Match PCM specification to ADPCM.

[Related] #ADPCM command (->§2-23)

===============================================================================
*******************************************************************************
§16 [[[[ MML command and compilation control ]]]]
*******************************************************************************
===============================================================================

	This section describes the various compile-time control commands.

===============================================================================
§16-1 Using definition variables
	!
-------------------------------------------------------------------------------
[Format 1] ! string
[Format 2] ! Numeric
-------------------------------------------------------------------------------
[string] Any character type and number of characters. The number of characters is arbitrary.
[Range] 0 to 255
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R selection / R definition
-------------------------------------------------------------------------------
	The MML string of the variable defined by the specified string or number is attached to the specified location.
	The MML string of the variable defined by the specified string or number is pasted to the specified location.

[Note 1] It is recommended that you avoid variables where one variable name is another variable name plus alpha, such as "!b" and "!bc".
	b" and "!

	For example, if two MML variables are defined as "!b" and "!bc", and an MML variable named "!bcc" arrives, the variable named !
	For example, if two MML variables are defined as "!b" and "!bc", and an MML variable called "!bcc" arrives, it will be very difficult to tell whether it is !

	In such cases, the longer variable name (! bc in this case) is used.
	bc" in this case) is adopted.
	In this case, the longer variable name (! bc) will be used. (! bcc, ! bc, ! b)

	If you want to use !b in this situation, just use !b cc with a space or tab in between.
	If you want to use ! (See Example 1)

[Note 2] ! (See Example 1.) [Note 2] If you want to use a number (abbreviated form of l= in the l= command) after a number, you can also use !
	(See Example 1.) [Note 2] !

[Note 3] When referring to a variable with more than 30 single-byte characters, a space or tab is always
	(No more than 30 characters will be defined.
	(Because it is impossible to determine where the variable ends, since it is not defined any further.)

[Example 1]
! b @0
! bc @1
s @2
A !bcc !sg !bc
[Result] @1 c @2g @1

[Example 1'] !
!b @0
bc @1
s @2
A !b cc !s g !b c
[Result] @0 cc @2 g @0 c

	See MML Variable Definitions (->§3-2) for details.

[Related] ! command (MML variable definitions) (->§3-2)

===============================================================================
§16-2 MML skip control1
	"
-------------------------------------------------------------------------------
[format] "
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R selection / R definition or beginning of line
-------------------------------------------------------------------------------
	Commands with sound length will be skipped until the next " or ' command is found.
	command is skipped until the next " or ' command is found.

	If a " command has already been specified, skipping will be terminated.

	If the " command has already been specified, skipping will be terminated. m command is issued at the same time to mask the part when skipping.
	In MML, the first line of a line is also skipped.

	It can be written in MML or at the beginning of a line.

[Example 1]
A "@0v13o3 cdefgab >@1 cdefgab " >c
[Result]
A m1 @0v13 o3 > @1 m0 >c
	A "@0v13o3 cdefgab >@1 cdefgab " >c [Result] A m1 @0v13 o3 > @1 m0 >c

[Example 2]
" ;start skip
A @0 v13 o5 cde
B @1 v13 o4 ccc
" ;unskip
A gfd
B <ggg>.
[result]
A @0 v13 o5 gfd
B @1 v13 o4 <ggg>

===============================================================================
§16-2 MML skip control 2
	'
-------------------------------------------------------------------------------
[format] '
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R selection / R definition or beginning of line
-------------------------------------------------------------------------------
	This command forcibly terminates the MML skip state.

	At the same time, the m0 command is issued.

	It can be written in MML or at the beginning of a line.

[Example 1]
A " t80 v12 @10 cder ' def
[Result] A t80 v12 @10 def
A t80 v12 @10 def

[Example 2] A
"
A cde
B efg
'
A fga
B ab>c

[result]
A fga
B ab>c

===============================================================================
§16-3 Part-limited specification
	| |!
-------------------------------------------------------------------------------
[format 1] | [symbol[symbol...]] mml
[format 1] |! [symbol[symbol...]] mml
-------------------------------------------------------------------------------
[Sound source] FM / SSG / PCM / R selection / R definition
-------------------------------------------------------------------------------
	This is useful when multiple parts are specified at the beginning of a line, to limit the parts that are compiled from it.
	It limits the parts to be compiled from.

	When ! is appended to the line to limit the parts to be compiled from.

	There must be at least one space or tab between the part symbol and mml as a separator.
	tab is required as a separator.

	The compiler's behavior is to use the alphabet of the part currently being compiled.
	If the alphabet of the currently compiled part is not specified (! ), it will use the
	If there is no character after the |, the compiler will skip the MML to the end of the line.

	If there is no character after |, the entire limiting state is removed.

[Example]
ABC @12v11o4l2 |A D0ccd |B D3efg |C D-3gab |!C >c& |C g4e4 | c
[Result] A @12v11o4l2
A @12v11o4l2 D0 ccd >c& c
B @12v11o4l2 D3 efg >c& c
C @12v11o4l2 D-3gab g4e4 c

===============================================================================
§16-4 Censoring compilation
	/
-------------------------------------------------------------------------------
[format] /
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R-select / R-define
-------------------------------------------------------------------------------
	Cuts off the Compile for that part there.

[Example]
A cde /
A fga
[Result]
A cde

===============================================================================
§16-5 Specifying comments
	;
-------------------------------------------------------------------------------
[format] ;
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R selection / R definition
-------------------------------------------------------------------------------
	Censors the Compile for that line, and ignores the rest as comments.

[Example]
A cde ; comment
A fga
[Result]
A cde
A fga

===============================================================================
§16-6 Comment specification 2
	`
-------------------------------------------------------------------------------
[format] `
-------------------------------------------------------------------------------
[Source] FM / SSG / PCM / R selection / R definition or beginning of line
-------------------------------------------------------------------------------
	Once a line is specified, all MML in between is ignored as a comment until the line is specified again.
	Once specified, all MML in between will be ignored as comments until specified again.

	If it is specified at the beginning of a line, the comment flag is reversed for all parts.
	The flag is inverted.
	If you put it at the beginning of a line, all parts are flagged as comments. definition commands are also ignored.

	It must be in MML or at the beginning of a line.

	If you want to write a document in MML or
	If you want to write a document in MML, or if you want to put a comment in an MML line, this is useful.

[Example 1]
A l4cde ` here is a comment
A comment here ` cde
A l4cde ` here is a comment ` cde [Result] The double-byte characters become comments.

[Example 2]
A cdefg
`
#Detune Extend
A
[A variable is defined, but the line #Detune Extend is ignored.

A is defined, but the #Detune Extend line is ignored. [Note 1] Specifying this in MML in a particular part does not affect other parts.

[Example 3]
`
G cde fga ` b
H cde ` fga b
[As a result, up to a for part G and up to e for part H are ignored as comments.

[Note 2] Only the middle of the part MML can be commented.
	If you want the whole MML to be a comment, you must put it at the beginning of the line.

[Example 4]
` Comment `
	In the above example, the second ` symbol is ignored and all subsequent MMLs are SKIPed.
	In the above example, the second ` symbol is ignored and all subsequent MML is SKIPed.

	In this case, the
` Comment
` Comment
	in this case, it should be written as

===============================================================================
*******************************************************************************
§17 Producer's contact/contact information
*******************************************************************************
===============================================================================
[!!! Attention!!!] The address/tel has been changed as of 1996/03/01.

	Room 102, Printemps Iguchi, 2-34-22 Kamiigusa, Suginami-ku, Tokyo 167, Japan
							Masahiro Kajiwara
						TEL&FAX (03)3395-9766
							(You can call us anytime, 24 hours a day)
				Support BBS [PMD-BBS] (03)3395-9600 (3 lines)
				Please refer to the PMDBBS.CM file for details.

	(Please note that we may not be able to answer questions sent by mail.)

===============================================================================
			--- End of PMDMML.MAN --- (3 lines)
===============================================================================


MCONV.EXE Ver.0.01
　　　　　　　　FMvoice data includer for P.M.D.music data 
　　　　　　　　　　　　　Copyright 1992 PasoRin/T.Hayashi All Rights Reserved

1.1 Introduction
　This program is to store FM voice data for PMD98/VA(C)Kajihara's performance OBJ file which "does not contain FM voice data".
　The author is working on bringing 88 music discs to 98 (^_^;). The author is working on bringing the music disc of 88 to 98. The select and player "PPLAY" made by a junior colleague of mine is also called ".........", which did not think of storing tone data (laughs).


2. How to use
　When you are ready, enter the following command.

　　　　　MCONV music-object FM-voice

It is not allowed to omit the file name. Also, the object file must be in PMD Ver. 2.92 or later format, and the voice data must be in a format that can be used with 98. The object file must be in PMD Ver. 2.92 or later format, and the voice data must be in a format that can be used with 98. The object file is checked for export, but it is not perfect. Please note!
If there are no error messages, the rewriting is complete. You can now enjoy the song without loading the FM tone data.
If there is an error, the rewriting process will be interrupted with a message. The interruption code is as follows.

　　　0: No error, normal completion
　　　1: File not found, size too large, no need to convert
　　　2: File open failure
　　　3: File read failure, write failure
　　　4: OBJ data error

As for the OBJ data in 4, the current version only supports OBJ codes up to PMD Ver. 3.9. In the future, when the number of codes increases along with PMD's functional expansion, an error will occur. At that time, if you want to fix ............, you can do so (oy).


3. Bugs
　I don't think there are any bugs in ............, but I made it in a rush, so there may be bugs. If you find a bug, please send me a bug report (^_^;)(^_^;)(^_^;)(^_^;)(^_^;)(^_^;)(^_^;)(^_^;)(^_^;)(^_^;)
　(^_^;) And I don't need to bother to say it, but it's "no guarantee" (^_^;) I do check the performance data of PMD, but it's not perfect. Even if I wanted to make it perfect, there is no check code in PMD. .........


4. About reprinting
In order to get a wide range of bug reports, reprinting is allowed with some limitations. The conditions for permission are as follows

　　You need to be able to contact the author. No grandchildren are allowed. You can only publish your children. Of course
　　　　We do not allow to publish in places where publishing infringes the author's copyright.
　　Please report reprints (even after the fact).
　　Please contact me with information on where to reprint. I'm hungry for bug reports! (laughs).
　　　　(laughs) In that case, be sure to include the operating machine, data on other resident objects, and any abnormal conditions. 5.


History (big laugh)
　　Ver.0.00 92/05/11 Suddenly I wanted to make it (laugh)


6. Future plan
　Selection of the theme for my thesis: .........



7. Contact
　If you send e-mail to the following BBS, you should be able to contact me.
　　　　　　　　　　　　　　MSI BBS 045-801-7571 MSI00001 Pasorin
　　　　　　　　　　　　　　　　　　　　　　 0466-44-1480(5/23)
　　　　　　　　　　　　　　SETA-NET 03-3788-5411(substitute) SCL70351 Pasorin
　　　　　　　　　　　　　　MSA-NET 03-3486-1456(proxy) MSA01768 Pasolin
　　　　　　　　　　　　　　Doujin Network 03-3857-9575 (proxy) PASORIN PASORIN
　　　　　　　　　　　　　　PASONET 03-3843-1211 (proxy) PS-00932 PASORIN
 

 
 ===================================
 
===============================================================================
  P.M.D. Parameter Viewer Ver. 0.92g document 1996. 4. 6
===============================================================================

Thank you very much for the download. (Thank you very much.

Please read to the end.


===============================================================================
Introduction
===============================================================================


I created a "P.M.D. Parameter Viewer" in the hope that I could see the PMD performance visually (it was really just a thought).

"I made a thing called P.M.D. Parameter Viewer.

For each channel of FM6, SSG3, PCM, and Rhythm

It shows volume, timbre, LFO, detune, and pitch in A to G like MML.

There is also a file select function, so you can select a different song to play after starting.

We hope you will use it as a reference for debugging when composing with PMD.


This is for PMD Ver. 4.8g or later.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


===============================================================================
Operating environment of this software
===============================================================================

NEC PC-9801/9821 series or EPSON PC-286/386/486 series

(+ analog display) that can display 16 out of 4096 colors and can run PMD.

It does not work in high-resolution mode.


===============================================================================
How to use
===============================================================================


You can use this "P.M.D. Parameter Viewer" (hereinafter referred to as PMDPV) and

 (PMD music file) in a directory with a path.


M (PMD music file) in the directory where the path goes.

(Refer to the PMD documentation for details on how to reside PMD, options when residing PMD, etc.)



M ([FILENAME] can be omitted if the song extension is .M)



M ([FILENAME] can be omitted if the song extension is .M) Load the song data with

If a PCM (PPC, P86) or PPS file is defined in the song file

The file is automatically loaded and defined.


If the song data or PCM file cannot be found, search for the environment variable "PMD" and

If the song data or PCM file is not found, it will search the environment variable "PMD" to find it. (For more information about the environment variable "PMD", please refer to the PMD document.



(For details about the environment variable "PMD", please refer to the PMD document.

Key operations in Viewer mode

[SPACE] Start & stop playing
[ESC] Stop & End
[RETURN] Start playing
[Q][f・10] End the performance as it is.
[XFER] Filer mode on
[0 to 9 , * + = ] Part mask (numeric keypad)
[0~9 - ^ \ BS] Part mask (full key)
[HOME CLR] Release all part masks
[HELP] Reverse all part masks
[TAB] Measure jump (enter with numeric keypad, set to 0 with HOME CLR)
[f・1] Switch between d- and c+ in key display
[f-2] key toggles between e- and d+.
[f-3] Use key to switch between g- and f+.
[f-4] Toggle between a- and g+ in key display
[f-5] key toggles between b- and a+.
[ROLL UP] tempo up (upper limit depends on PMD's resident /G option. Default is 250)
[ROLL DOWN] Tempo down (will only go down to 0)
[COPY][/] Pause, unpause ([/] is a numeric keypad)
[INS] Skip 1 measure
[DEL] 1 bar back
[f-6] Increase the volume down value of the FM part
[f-6]+[SHIFT] Decrease the volume down value of the FM part.
[f-7] Increase the volume down value of the SSG part.
[f-7]+[SHIFT] Decrease the volume down value of the SSG part
[f・8] Increase the volume down value of the PCM part
[f・8]+[SHIFT] Decrease the volume down value of the PCM part.
[f・9] Increase the volume down value of the Rhythm part.
[f・9]+[SHIFT] Decrease the volume down value of the Rhythm part.
[f-9]+[SHIFT] Decrease the volume down value of the Rhythm part [f-9]+[SHIFT] Decrease the volume down value of the Rhythm part [f-9]+[SHIFT] Pause, Release Pause
[vf-2] Stop playing
[vf-3] Start playing
[vf-4] Rewind
[vf-5] Fast forward


Key operation in filer mode

[XFER][ESC] Filer mode off
[←][→][↑][↓] Move the cursor (move at high speed by pressing the SHIFT key at the same time)
[BS] Go to the next directory up.
[L] Change drive
[L] Change drive [RETURN] Move directory or load and play song data

Other keys are the same as in Viewer mode, except for Channel Mask.


If you are in Filer mode and the Kana key is locked.

If the Kana key is locked in Filer mode, you will go to Viewer mode when you select a file and start playing.

This key cannot be changed at the moment, but we will do something about it soon.


This may seem like a lot, but it's not much (^^;

If you use it for a while, you'll see what I mean.


===============================================================================
Options at startup
===============================================================================


By specifying options at startup, you can make some differences in the way the program starts and displays.

The options can be before or after the file name.
             They can be lowercase or uppercase.
             The demi-liter can be either / or -. ( e.g. PMDPV /P -L /K )


 /K ・・・ Start playing immediately without waiting for the Spacebar to be pressed.
 /P ・・・ The song data is not loaded, and the playback status remains the same, and the viewer screen appears.
 /+ ・・・ The key display will be changed to a sharp (+) display. (The default is to display the odd-note)
 /A ・・・ Do not set ADPCM, PCM, SSGPCM data.



Note on the P option at startup!


PMD allocates the performance data buffer when it is resident, so once the song data is loaded, the next song can be played.

   PMD reserves the performance data buffer when it is resident, so once the song data is loaded, you can play it as many times as you like unless you load the next song.

   In other words, the /P option should be used under the assumption that there is performance data in the buffer.

   The /P option should be used on the assumption that there is performance data in the buffer. (Same as /P option of PMP.COM (PMD player))

   (Same as the /P option of PMP.COM (PMD Player).) If no data is loaded immediately after PMD is resident, the performance will be strange.


The /P option has higher priority than the song file option.

   A>PMDPV ???? .M /P ← ???? M is not loaded and PMDPV is started.

   M is not loaded and PMDPV is started. (Normally, it is impossible to specify both options.


If you do not specify the song data, the /P option is automatically added.
   (Early on, the /P option can be omitted (^^; A>PMDPV alone is OK))



For example, if you are using MCH.EXE (PMD MML compiler evaluation version) and you want to use


A>MCH /V ???? .MML


MML will start playing suddenly.


A>PMDPV /P ( A>PMDPV alone is also acceptable)


This will take you to the viewer screen without loading the song data.


As an advanced version (laughs)

A>MCH ???? .MML | PMDPV /P

You may want to use pipe processing (^^).

(This is to reduce the time lag, but it is not the original way of using pipes (^^;))




===============================================================================
Explanation of each parameter displayed
===============================================================================


The screen is arranged from the top in the order of FM1-6, PSG1-3, PCM, and Rhythm.

The parameters are listed in order from left to right.


　　　　Description : Display : Explanation
-----------------------------------------------------------------------------
Address currently being played: Addr: 0000 to FFFFF
Address to be looped: Loop: 0000 to FFFF
Volume : 0 to 127 for FM, 0 to 15 for PSG, and 0 to 255 for PCM
Tone number (noise frequency) : Voice : @0 to @255 (Tone Noise Mix for PSG) *1
Pitch, Octave : Key O : A to G (pitch) and 1 to 8 (octave) *2
Panning ： Pan ： R:Right L:Left C:Center ※3
Gate time ： GT ： Gate time, the value specified by q command.
Detune ： Detune ： From -32768 to +32767.
LFO ± value ： LFO ： From -32768 to +32767.
LFO switch : LS : Set to 1 when LFO is turned on.
Portamento Switch : PS : Set to 1 when portamento is present.
 Note 1: Instead of the tone number in the PSG section, Tn (Tone), Ns (Noise), and Mx (Mix) are displayed.
	The average frequency of the noise will be displayed next to Noise and Mix.

The scale displayed is the scale after modulation by the _ command.

The panning of the rhythm part is not displayed. (There's no place for it... ^^;)



In the rhythm part, there is no indication below the volume, and the name of the drum being played is displayed.

The correspondence between the @ command and the ³ command in the R part and the drum name displayed is as follows

The correspondence between the @ command and the ³ command and the drum name displayed in the R part is as follows. (The ³ command does not need to be in the K or R part.


Display @ number Rhythm Instrument MML
------------------------
BaD @ 1 \b
SD1 @ 2 \s
LTm @ 4
MTm @ 8 \t
HTm @ 16
RiS @ 32 \i
SD2 @ 64
HiC @ 128 \h
HiO @ 256
CrC @ 512
RiC @ 1024 \c
ER1 @2048
ER2 @4084
ER3 @8192


Various data will be displayed below it.

　　　Content : Display : Description
-----------------------------------------------------------------------------
Status 1 : STATUS1 : The value written by the ~ command.
Status 2 : STATUS2 : Loop count, set to 255 at the end.

Performance time ：PLAY TIME ： Elapsed time from the start of performance. Total time
Total time ：TOTAL TIME ： Displayed by loop or end of performance.

Current playing measure number ：BAR ：Does not return to 0 even if looping. 5 Jump bar number
5 Jump measure number : JUMP BAR : Normally not displayed.
　　　　　　　　　　　　　　　　　　　　　　See "Measure Jump".

Tempo ：TEMPO ： Value to be specified to Timer-B.  Tempo: TEMPO: Value specified to Timer-B. 6
Tempo 48 ：TEMPO 48 ： Value specified by t command.

PCM (PPC, P86) file name: PCM : PCM file name used by the loaded song.
PPS (PPS) file name : PPS : PPS file name used by the loaded song.


Note 4: The playing time is limited to 18 hours, 12 minutes and 15 seconds (65535 seconds). If it exceeds that time
	(Don't listen to it for 18 hours. (Don't listen to it for 18 hours, lol.)
	Looping does not return to 00:00:00.
	(Don't listen to it for 18 hours, lol.) Looping does not return to 00:00:00.
	(^^;

Note 5: If you use a certain notation in MML (e.g. triplets), the measure number may be different from what the MML author intended.
	If you use a certain notation (e.g. triplets), you may get a different measure number than the MML author intended. In such cases, use the
	Z command (PMDMML.MAN §15-8) and do something about it.

Note 6: In MML, the value is specified by the T command.
	The value specified by the t command is converted to the value of the T command inside PMD and handled.


===============================================================================
Part mask function
===============================================================================


Pressing the numeric keypad or the full key allows you to mask (inaudible) a part.

Once a part is masked, pressing the same key again will unmask it.


The correspondence between keys and parts is as follows

Part Numeric Keypad Full Key
FM 1 1 1
FM 2 2 2
FM 3 3 3
FM 3b * ^
FM 3c + \
FM 3d = BS
FM 4 4 4
FM 5 5 5
FM 6 6 6
SSG 1 7 7
SSG 2 8 8
SSG 3 9 9
PCM 0 0
Rhythm , -

[HOME CLR] ・・・ Release all masks.
[HELP] ・・・ Invert mask


When each key is pressed, the leftmost LED of the part that is turned off goes out and the part line is displayed in black.

When you press each key, the leftmost LED of the part you turned off will turn off, the part line will be displayed in black, and the part will be masked (inaudible).


===============================================================================
Measure Jump
===============================================================================


If you press the [TAB] key while playing, the area to the right of the "JUMP BAR" will be highlighted and you will be prompted to enter a value.

You will be prompted to enter a number.

At this point, you can use the numeric keypad to enter the measure number you want to jump to.

At this point, you can use the numeric keypad to enter the measure number you want to jump to, and you can jump to any measure regardless of the current measure number.

Press the [HOME CLR] key to set the number to 0.

When this number is 0, pressing the [RETURN] key will abort the measure jump.

This means that you cannot jump to measure 0. Because measure 0 means you start from the beginning.

So, if you want to jump to measure 0, just play it again :-)


Naturally, you cannot use the numeric keypad to mask parts or [HOME CLR] to unmask all parts while entering numerical values.

Naturally (^^), you cannot use the numeric keypad to mask parts or [HOME CLR] to release all masks while entering numerical values. All other operations are OK.


===============================================================================
File selector function
===============================================================================


The channel mask function is not available in the file selector mode.

(Because the BS key and other keys overlap.)

The rest of the operations are all possible.


Press the L key to display the list of drives. 

Use the cursor keys to select a drive, and press the Return key or the

Press the L key to display the list of drives.


===============================================================================
Display of error and PCM definition information
===============================================================================


If you use PMDB2.COM, PDR.COM, or PPSDRV.COM and hear the corresponding data

If you are using PMDB2.COM, PDR.COM, or PPSDRV.COM and hear the corresponding data, the error message about PPC, P86, or PPS data (ADPCM, PCM, or SSGPCM data) will be displayed.

A single letter of the alphabet appears in the lower left corner of the screen, just left of the function display.

The letters in ( ) mean that the color is reversed.


P(Yellow) ・・・ PCM (P86) being defined (^^.)
P(Green) ・・・ PCM file is matched, so it is not read.
P(red) ・・・ PCM memory is being accessed by another application.
F (red) ・・・ PCM (PPS, P86) file is not found.
R (red) ・・・ PCM (PPS, P86) file cannot be read.
E (red) ・・・ PCM (PPS, P86) file is not PMD's.
O (red) ・・・ The data of PPS exceeded the reserved area.
8 (red) ・・・・・ P86 data exceeded the reserved area.
A (red) ・・・ ADPCM is not installed or PMDB2 is not resident.
S (red) ・・・ PDR and PPSDRV are not resident.
M (red) ・・・ The song data buffer has been overloaded.


In other words, if something appears in red in the lower left corner, it means "no good" (^^;


If you have any good display method, please let me know.

If you have a better way to display it, I would be very grateful.

I don't like to say "I don't play because there was no PCM file. (^^;

(^^;) I don't like to say "I don't play because there was no PCM file", so I just show the error message and force to play.


===============================================================================
About external characters
===============================================================================


I'm using external characters from 7621h to 7639h.

I've saved them properly and put them back, but I'm not sure if I'm getting HSBs while PMDPV is running, or if I'm turning the printer off and on and then restarting it.

However, if the printer is turned off and rebooted while the PMDPV is running, the external characters cannot be restored.

However, if the printer is turned off and rebooted while PMDPV is running, the external characters cannot be restored (^^), so be careful.

Well, I don't think there is any important data in Gaiji.


===============================================================================
Copyright and so on
===============================================================================


This software is freeware. There is no copyright waiver.

The author is not responsible for any disaster or disorder caused by the use of this software.

The author is not responsible for any damage caused by using this software;

It is not allowed to use this software for commercial purposes.

The author is not responsible for any damage caused by the use of this software.

However, there are no restrictions on the use of PMD as a bonus for listening to music on music discs, games, etc. Please feel free to do so (^^)


===============================================================================
About reprinting
===============================================================================


It's not a big deal, but if I write something like this, people will think, "Damn! I'm not a big fan of this.

I don't really want to write about it (^^;))

I don't want to write too much about it because people will think, "Damn! (I've never written anything like this before.) If you are interested in reprinting this article

If you want to reprint it, please feel free to do so (^^).

Of course, the implicit condition is that the PMD on which this PMDPV can work has already been reprinted (^^)
(Also, please don't change the contents of the archive.

If you are in a situation where you can contact me, please send me an e-mail, even if it's just an after-the-fact report.

If you can contact me, please send me an e-mail. I think. I hope you can send me an email.

DOC to see if it's reprintable or not (lol)


DOC to see if it can be reprinted. ===============================================================================
DOC.
===============================================================================


I've been using PMDPV since the beginning of the project.

I wanted PMDPV to be "natural", or "airy", or something that people could use very naturally.

It is unthinkable (unbearable) that I don't have FD (File & Directory) or LHA in my computer environment now.

I can't imagine (or bear) not having FD (File & Directory) or LHA in my computer environment. However, I'm still far from being able to do that (;_;))


I'll keep reviewing the screen structure, display parameters, and functions.

And I'd like to keep in mind the importance of parameter readability and content.

I'll keep in mind the importance of parameter visibility and content.

I'm sure you have some complaints and bugs (^^;)

If there are any functions or display parameters that you would like to see increased, please let me know.

I'd be very happy to hear from you.

I'd like to have more programming power~(;_;)


In making this, I referred to KAJA's various source lists related to PMD.

I used KAJA's various PMD-related source lists as a reference.


I used PCMLOAD.INC as is for the PCM definition part (^^;

I also used the disk reading routine DISKPMD.INC to search for the environment variable "PMD".

INC to search for the environment variable "PMD" (^^;)


I would like to thank KAJA for all his help.

I would like to take this opportunity to thank you. Thank you very much.


I would like to thank the following people for their comments and advice on this program.

Thank you very much. (__)Peck


	 Special Thanks to GRRIFIN-san
			     K.Saruyama-san
			     Pasorin-san
			     Ms. Odo
			     Shiori Ueno
			     CHEMOOL-san
			     NEO-san
			     KONO-san
			     NNI_STAR!
			     KATSUKI-san
			     NOGICHAN
                             Mr. Moe
                             K-3 (in no particular order)

				Other people who sent me e-mails with their impressions
				It encourages me to develop this program.


I'm very happy to have the support of so many people.

"When I receive an email saying "I'm using it. I'm very happy when I get an email saying "I'm using it" (;_;)


At first, I was hoping that this program would be useful to KAJA, even if only a little.

But while I was making it, I found that it was helping me in the opposite direction...(;_;)

What a pity.


One day, I met KAJA and I was so impressed by his music that I came to this point.

I'm happy to be able to listen to cool songs on PMD...

Wishing for the further development of PMD.



				      1996. 4. planet Anthea (;_;)( ANT00318 )
					        PMD-BBS ( LEIROS )
						Tokyo BBS ( LEIROS )
						SILENCE-CHIKKI NET ( SIL0013 )
						Other (^^;

								LEIROS
 
 =========================================
 	History of P.M.D. Parameter Viewer
								   As of April, 1996



Ver.0.0 It would be nice to be able to see the PMD performance. I thought it would be nice to be able to see the PMD performance, so I worked on the screen structure.


Ver.0.1 At first, I made a screen and displayed all parameters in hexadecimal.


~~~~~~~~~~~~~~~~~~~~~ Not disclosed so far (^^;) ~~~~~~~~~~~~~~~~~~~~~~~~~


Ver. 0.2 The basic display was completed, but the loading of the song data was not completed.
	     It relied on PMP (PMD player) to read song data.


Ver.0.21 LFO Switch and Portament Switch 0 and 1 were reversed.
	     Ver.0.21 LFO Switch and Portament Switch 0 and 1 were reversed, and the spelling of "Driver" was wrong;


Ver.0.3 It can read songs and check PMD resident.


Ver.0.31 Fixed a bug that the display of "E" and "F" in FM part was wrong.


Ver.0.4 Display the envelope of PSG part.


Ver.0.41 Add channel off function.


Ver. 0.42 Turned off by the channel off function, and can be turned back on again.


Ver. 0.43 Display the panning of the FM sound source.
	     Fixed a bug that the file name could not be read if it had more than 15 characters.


Ver.0.5 Add some decoration to the screen. (^^;


Ver.0.51 Add a level meter.
	     Fixed a bug that the level meter was not displayed correctly in 20-line mode.


Ver. 0.52 Added "red zone" to the level meter.
	     Changed PCM part display to musical scale.
	    (I used to use normal sound source until then.
	     Renamed "EFFECT" to "Rhythm".
	     Change the PSG envelope parameters from -128 to +127 except for AL, DR, and RR.
	     Ver.0.53 PSG Envelope


Ver.0.53 PSG envelope parameters DL and DV are changed to display from -128 to +127.
	     Level meter adjustment, color coding
	     Display the name of the file currently being played.
	     Add channel ALL ON function.


Ver.0.6 Add /L option to hide the level meter.
	     Abolished PSG envelope display.
	     Displays the currently played measure, status, and various addresses.


Ver.0.61 Use VSYNC interrupt (I didn't do it until now. (^^;)
	     Improvement of PMD resident check.
	    (Thanks to KAJA for the routine.)


Ver. 0.62 Review of graphics default settings.
	     Ver.0.62 Reviewed graphics default settings.


Ver. 0.63 ESC can be used to quit while the game is stopped.


Ver. 0.63b Display of playing time and loop time.
	     Abolish the data storage address display.


Ver.0.63c Bug fix of playing time display, stop playing by space key.


Ver. 0.63d Fixed a bug in the playing time display.
	     When you start playing, wait until the correct time is reached, and make the playing time display accurate.
	     However, it didn't feel right to use, so it was put in storage (^_^;)


Ver.0.7 for PMD Ver.3.9c
	     Enables to display PCM pan and adjust tempo.
	     Enhanced rhythm sound source related display.


Ver.0.71 Bug fix of PCM scale display
	     When SHIFT+ESC is pressed, the performance is terminated as it is.


Ver. 0.72 "Q" will also end the performance.
	     Bug Fix: Kanji file names could not be displayed.

			       A
Ver. 0.8 The key (black key) can be displayed as either sharp or odd.
	     (In addition, the key display is changed to lowercase.
	     The HELP key can be used to invert the part mask.
	     (The above two points are ideas of Mr. Kono's MXPV (^^))
	     Make the drawing speed of the initial screen faster (^^.)


Ver.0.8k Add keyboard display function.
	     Initialized graphics and improved settings.


Ver.0.81 for PMD Ver.4.0b
	     Added pause function by adding PMD's pause function.
	     SSG tone display is changed to Tone Noise Mix.
	     Improved the keyboard display routine a little.


Ver.0.82 Added /K option not to wait for space key
	     Keep the inversion of the tone and the sharp tone /+ option added
	     Playback can be finished with f and 10.
	     Pause can also be done with the / key (numeric keypad).
	     Change "CraC" to "RidC" and "LTom" to "MTom" in the drum display when using the \ command.


Ver. 0.82b Changed the option to be either before or after the file name.
	     Add "/P" option to display the viewer screen without loading the performance data.


Ver.0.83 for PMD Ver.4.0i
	     Add comment function of PMD to display comments.
	     PLAY, STOP, and PAUSE are displayed according to the flag whether it is playing or not.
	     Improved the operation at the time of starting by /P option.


Ver. 0.83b Support ESC sequence character in comment field.


Ver. 0.83c Make it possible to read PCM data.
	     (Thanks to KAJA for the routine.)


Ver.0.83d For PMD Ver.4.1
	     Changed PCM reading routine because PCM reading relation has been enhanced.


Ver. 0.83e PMD now has a part mask function.
	     The PCM reading routine has been further enhanced.
	     The PCM reading routine has been enhanced and incorporated (^^.)


Ver. 0.83f PCM reading routine now reads PPS files.
	     Also incorporated (^^;;
	     When a data file is not found, the environment variable is checked and
	     (This routine was also provided by KAJA.
	     (This routine was also given by KAJA (^^;;;))


Ver.0.83g Do not read PCM/PPS data /A option added
	     The work of LFO switch and portamento switch has been changed.
	     The PCM reading routine has been changed again in PMD Ver.4.3.
	     Added a new routine that was given to me.
	     Fixed a bug that the performance time is set to 00:00:00 when part masking.
	     FM3b, c and d can be masked in PMDB2.COM.


Ver.0.83h PCM reading routine is a little faster. Also embedded (^^;


Ver.0.83i for PMD Ver.4.4
	     PCM data reading is now super fast, so it is embedded again (^^.)
	     Display the volume down values of FM, SSG, PCM and Rhythm.



Ver.0.83j Fixed a bug in displaying the volume down value.


Ver.0.83k Add /B? option to fast-forward to the specified measure at the start of playing.


Ver.0.83l Extend the rhythm display for SSG PCM.


Ver. 0.83m Added measure display and fast-forward option for PMD, since the measure function relation of PMD was extended to 2 bytes.
	     The measure display and fast-forward options are adapted to it.


Ver.0.83n Automatically detects PMDB2 and PMD86 and displays PCM scale.


Ver. 0.90 Rewrote source code from scratch. (But I used the previous version.
	     Save interrupt vector of stop key (^^.)
	     modified the chain processing of PMD's Timer-A interrupt (^^.)
	     Change the volume down value.
	     Add 1-bar skip function.
	     Read mask status when starting with /P option(^^;


Ver.0.90b Add measure jump function.
	     Fixed a bug that RimShot was not displayed in Ver.0.90;


Ver.0.90c PSG noise average frequency is displayed.
	     Bug fix for /K option(;_;)


Ver.0.90d Fix a bug that the measure jump before the start of the performance was not correct(^^;


Ver.0.90e Adjust the start-up when no option is set.


Ver.0.90f Added the gate time display.
	     The display of the volume was made to correspond also to the W command and so on.
	     added the processing when the song data exceeds the performance buffer.
	     (I used the file "pmp.asm" as a reference.)


Ver.0.91 for PMD Ver.4.7a
	     Changed according to various changes in the performance work.
	     Made it more graphical (← and eliminated the /L option)
	     Improved processing differences between PMD, PMDB2, and PMD86 (mask-related)
	     Added support for changing songs by PMK after starting PMDPV (slow)
	     Various other details (rewind, save file name, display PCM file name, etc.)


Ver.0.92 Add filer function.
	     Fixed a bug that garbage appears on the screen when changing songs with PMK after starting PMDPV (^^.)
	     Abolished /B option.


Ver.0.92b Fixed bugs related to mask and pause when reading song data in filer mode.
	     pause-related bugs when loading song data in filer mode;
	     Fix the bug of level meter in filer mode;
	     Supported Kanji characters for path names and PCM file names in filer mode;


Ver.0.92c Fix a bug of PCM pan display when PMD86 is resident;
	     Display of file name in filer mode.


Ver.0.92d Not for public release (^^;), some functions are added only in this version.


Ver.0.92e Added PCM load routine function for PMDPPZ for 94'Winter Comic PMD.


Ver.0.92f Added processing when the number of files is maximum in filer mode.
	     In filer mode, files with read-only attribute and hidden attribute are also searchable.
	     file search.
	     Added a function to return after selecting a song in filer mode.
	     Added support for "c 9".
Ver. 0.92g Added display of LFO2 (LFO B) and LFO switch 2.
	     Changed pan display from text to arrow (?). to an arrow (?).
	     Changed the time display to digital characters.
	     Changed layout of time and status section.
	     Fixed a bug that T → t conversion was not working well (^^.)


					I often go to the net to play (^^)

				      1996.4. Planet Anthea (;_;) ( ANT00318 )
					        PMD-BBS ( LEIROS )
						Tokyo BBS ( LEIROS )
						SILENCE-CHIKKI NET ( SIL0013 )

								 LEIROS
============================================
EXE in PMDPV92G.LZH in the same directory, and then execute TXTPV92G.COM.

TXTPV.EXE will be created.




After I made PMDPV graphical, some people asked me to keep the text version.

So, here is the text version.


It's text-only, no graphics.



The differences from the graphic version are


The level meter has been removed.

The keyboards have been removed.

The list of files in the filer screen has one more line.

I can't tell the version number or who made it without looking at the "usage" page.


It's like this.


The empty space after the measure number display is where you type in the measure jump number.

It's the kind of thing where you press TAB and enter a number.



I think it's hard to see the title, etc. (^^;

If I mask it, it turns blue, but I don't know. If it's all black, it's a bit awkward to see without a background like the graphic version.

It's a little scary when there is no background like in the graphic version. I think it's better to use x as before.


I'm not sure if it's better to use x as before.

"I'm not sure if it's the same as the previous version;

If you think something is wrong, don't hesitate to contact me. If you think something is wrong, please don't hesitate to let me know (^^ thank you very much).



I used WSP (c) Wakichi to create the self-extracting file.





LEIROS


================
==============================================================================
                     PMD for Windows "PMDWin" Ver.0.36
                        Copyright & Programmed by C60
==============================================================================


------------------------------------------------------------------------------
Introduction

    This program is a dll to listen to the song data of the FM sound source driver "PMD98" for the PC9801 series on Windows.
    This program is a dll to listen to the song data of PMD98 FM sound driver for PC9801 series on Windows,
    It supports all PMD98 song data (PMDB2, PPSDRV, P86DRV, PPZ8).
    It is not possible to make it play only by this dll.
    Please get a player separately.


------------------------------------------------------------------------------
Installation and uninstallation

    (a) Installation
        Place PMDWin.dll in c:\windows\system or c:\winnt\system32 or the same directory as the player.
        Place it in the same directory as the player.
        To play the YM-2608's rhythm sound source, place the following wave file
        (44100Hz, 16bit, monoral. Only PCM format can be used.
        Place the following wave file (44100Hz, 16bit, monoral, cannot use other than PCM format) in the directory specified by the player.

            2608_BD.WAV ;Bass drum
            2608_SD.WAV ;Snare Drum
            2608_HH.WAV ;Hi-Hat
            2608_TOP.WAV ;Cymbal
            2608_TOM.WAV ;Tom
            2608_RIM.WAV ;Rim Shot
        
        
    (b) Uninstallation
        Delete this dll with Explorer, etc.
        Delete the player, wave files, etc. if they are not needed.


------------------------------------------------------------------------------
Operation check environment

    Self-made AT compatible machine (Asustek P5B, Core2Duo 6600, GeForce 9500GT, 
                    Built-in SoundMax Integrated Digital HD Audio, etc.)
            ＋ WindowsXP SP3, synthesized frequency = 55kHz

    Lenovo Thinkpad X200 (Core2Duo P8600, built-in Conexant 20561 SmartAudio HD)
            + Windows7 composite frequency = 55kHz


------------------------------------------------------------------------------
About embedded software

    PMDWin.dll contains an FM sound engine (fmgen 008) written by cisc.
    FM Sound Generator with OPN/OPN
    
        FM Sound Generator with OPN/OPM interface
        Copyright (C) by cisc 1998, 2003.


------------------------------------------------------------------------------
Terms of Use & Reprint

    This software is free software. The copyright of this software is owned by C60.
    However, the copyright of the original FMP is owned by Mr. Guu, the copyright of PMD98 is owned by Mr. KAJA, the copyright of PPZ8 is owned by
    PPZ8 copyright by Ukky, FM sound engine copyright by cisc, BrowseDialog component copyright by
    Copyright of the BrowseDialog component by Mr. Maeda, Copyright of the color changeable track bar by
    copyright by Fumika, TrayIcon component copyright by Yukio Tsujihara.
    (modification and support by Taro Kato).
    WinFMP, PMDWin and FMPMD2000 are not liable for any loss of data or damage to the machine caused by using them.
    WinFMP, PMDWin and FMPMD2000.
    The authors are not responsible for any bugs or defects in WinFMP, PMDWin or FMPMD2000.
    The author is not obligated to fix any bugs in WinFMP, PMDWin or FMPMD2000.
    The author is not obligated to fix any bugs in WinFMP, PMDWin or FMPMD2000, but will make every effort to fix them if you report them.
    Reproduction or distribution of WinFMP, PMDWin and FMPMD2000 is prohibited. However
    However, modifications to the source code of PMDWin and FMPMD2000 are
    PMDWin, FMPMD2000 source code.
    Software incorporating the source code of PMDWin and FMPMD2000 may be
    PMDWin, FMPMD2000 source code can be released as free software with prior notice.
    Software that uses WinFMP.dll and PMDWin.dll can be released as free software.
    Please contact the author before publishing. Please contact the author when you release the software.
    If you wish to incorporate part or all of the source code of PMDWin or FMPMD2000 into commercial software (including shareware)
    or all of the source code of PMDWin or FMPMD2000 into commercial software (including shareware), you need to obtain prior consent from the author of PMDWin or FMPMD2000.
    PMDWin, FMPMD2000.
    When distributing software with modifications to PMDWin or FMPMD2000, the copyright notice of PMDWin or FMPMD2000
    If you distribute modified versions of PMDWin or FMPMD2000, please clearly indicate the copyright of PMDWin or FMPMD2000 and the modifications.
    *.cpp or *.pas(WinFMP.pas, PMDWin.pas, PCMMusDriver.pas,
    FMPMDdefine.pas) that are related to music performance, or if you wish to modify them.
    If you wish to incorporate or modify any part of these files, please disclose the source code.


------------------------------------------------------------------------------
Acknowledgments

    I would like to express my gratitude to Guu for creating FMP, a wonderful sound source driver, and allowing me to publish this program.
    Mr. Guu, who created the wonderful sound driver FMP and allowed me to publish this program.
    Mr. Guu for creating the excellent FMP sound driver and allowing us to publish this program, and Mr. KAJA for creating the sophisticated PMD sound driver and allowing us to publish this program.
    Mr. KAJA, who created PPZ8 and allowed us to publish this program.
    Mr. Guu, who not only created PPZ8 and expanded the expressive power of the sound driver, but also
    Ukky, who not only created PPZ8 and expanded the expressiveness of the sound driver, but also provided the source and allowed us to publish the program.
    Ukky, who not only created and used a high-performance FM sound engine, but also allowed us to publish the program.
    Ukky, who not only created and used a high-performance FM sound engine and allowed us to publish this program, but also fixed bugs in PMDWin.
    cisc, for finding many bugs in PMDWin.
    TAN-Y for finding many bugs, and
    Mamiya who made the WinAMP plugin, and
    Kigami who made PMV, and
    Mr. Maeda and Ms. fumika for releasing useful components.
    Thank you very much for bug reports, valuable comments, and requests.
    Thank you very much.


------------------------------------------------------------------------------
▼ History

ver.0.01 1999/08/02
    Provisional version released.

ver.0.02 1999/08/04
    The sound engine is changed to M88 Ver2.10.
    Fixed a bug that the rhythm does not sound when synthesized at 55KHz.

ver.0.03 1999/08/08
    #LFOSpeed Extend bug fix (>TAN-Y)
    #Detune is doubled when using Detune Extend bug fix(>TAN-Y)
    Relative tempo setting may cause wrong tempo bug fix (>cisc)
    LFO2 delay setting bug fix (>cisc)
    Fix project settings
    Envelope fix x2 (by >TAN-Y)
    Replaced with ver.4.8o (random Q support etc.)
    Added support for reading pvi with ADPCM
    Provisional support for P86 -> PVI Rename
    ADPCM filename can be read from outside
    Tentatively dealt with bug of pitch shift when using _M and x together
    fixed ADPCM volume bug (by >cisc)
    Mix signed and unsigned in fmlfo_sub bug fix (>cisc)

ver.0.04 1999/08/16
    fix SJIS in PCM folder
    Some inequality signs are reversed in _vd_fm(), _vd_ssg() etc. bug fix
    Implementation of SSG drum
    Lighten the weight (limit the range of memset).
    Bug fix for OPNA Rhythm relative volume and pan change
    Bug fix for ADPCM Repeat
    LFO bug fix
    Change work to int
    #? When playing a song that uses _Voldown, it sometimes goes wrong.
    Implementation of fadeout
    You can set whether the rhythm sound source is played at the same time as SSG drum.
    Hardware LFO was not working bug fix

ver.0.05 1999/08/29
    added support for PPZ8
    Support 11kHz, 22kHz playback.
    added support for 2-byte half-width to half-width conversion and escape sequence removal
    Noise frequency may not be set bug fix
    Volume LFO bug fix
    W- bug fix
    Dynamic generation of ppc and p86 file buffers
    Replace with M88 2.11 unit
ver.0.06 1999/09/19
    PPZ8 part portamento bug fix
    Rhytym wave path can be specified.
    y command bug fix
    TimerB setting value was slightly off. bug fix
    Pan setting for C and FM3 ch could be off bug fix
    Force PCM reading.
    Bug fix ADPCM loop
    Internal changes in PCM search part
    Reduce weight of PPZ8 unit
    Replaced with M88 2.12(+α) unit
    wrote the specification of DLL

ver.0.07 1999/10/03
    Support PPS
    The setting of the playback position was made possible.
    The weight reduction of the PPZ8 unit part 2
    Countermeasure against zero percent of PPZ8 unit?
    Bug fix of relative volume change(\v?-) of OPNA Rhythm
    Changed to force o1,o8 when o1~o8 is off in the modulation command.
    Bug fix: DepthA of LFO is negative.

ver.0.08 1999/10/24
    The frequency setting mistake of PPZ8 is corrected.
    Reduction of petit noise of PPSDRV
    Bug fix of detuning of PPSDRV
    The noise might have entered at the time of the tone change in the FM part.
    (Thanks > Mr. cisc)
    There was a thing that noise enters when it sets it after it stops playing by setpos() bug fix

ver.0.09 1999/11/20
    Support P86
    lighten the weight of PPZ8, save memory
    Support fadeout and fadeout2
    MML "" and "'" command does not work properly in SSG, ADPCM and PPZ part.
    Bug fixes
    Fixed bug in setpos() that it did not fix the problem of setting after the performance was stopped.
    bug fix: setpos() could sometimes cause tone distortion.
    Change DLL calling convention from cdecl to stdcall.

ver.0.10 1999/11/28
    The (AD)PCM part might not sound when P86 and PPC are forced to read. bug fix
    Reduce petit noise of PPSDRV
    implementation of getlength and getlength2

ver.0.11 1999/12/18
    The change width of a random LFO was not small.
    In PPZ8, there was a case that the sound came out at the time of v0 bug fix
    The key is sometimes turned on when it is connected with the tie.
    (> Mr. cisc)
    Hardware LFO did not cut at #0 bug fix (> Mr. cisc)

ver.0.12 2000/01/10
    replaced with M88 2.14 unit (extra chunks in rhythm wave)
    Fixed a bug that the program crashes when pmdwininit(NULL) is executed.
    Fix PPZ8's small noise?

ver.0.13 2000/02/06
    switched to VC++ 6.0 Pro
    Fix a bug that setppsuse(true) may cause an access violation.
    When PPS and SSG 3ch(Ich) are used at the same time, there was a case that noise enters.
    Bug fix
    Fixed a bug that extra information was displayed in the memo of sam1.m.

ver.0.14 2000/03/19
    PCM part of PMD86 did not work properly when portamento was used.
    Fixed bug
    Fixed a bug in getlength(), getlength2() that the length of the song was calculated wrongly.
    Added WINAPI to getlength() and getlength2() because I forgot to add it.
    Fixed a possible memory leak in setpcmdir().
    Fixed an embug in FM part due to noise when switching tones.
    Added fgetmemo system.
    added music_load2()
    Replaced with M88 2.16x unit

ver 0.15 2000/06/11
    Add getloopcount().

ver 0.16 2000/08/20
    Fix a bug that SSG3ch may key off even if it is connected with &.
    (Enbug in ver 0.13?).
    Fixed a bug that the pitch of SSG noise may change when replaying.
    Fixed a bug that SSG noise could change pitch when replaying.
    in release)
    Fixed a bug that there was an access violation in getmemo2, getmemo3, fgetmemo2, and fgetmemo3.
    Fixed a bug that caused access violation in
    Fixed a bug where the behavior of fgetmemo2 and fgetmemo3 was reversed.
    Fixed a bug that the spelling of WARNING was wrong.
    Fixed a bug that the result of getlength was slightly different every time.

ver 0.17 2001/01/21
    Implement COM-like interface.
    implemented setfmcalc55k(). setpcmrate() can be used to set not only 11kHz, 22kHz, 44kHz, 55kHz
    other than 11kHz, 22kHz, 44kHz and 55kHz with setpcmrate().
    Implemented setppzrate().
    Improved error checking when song data is invalid in getmemo series.
    Speeded up setpos() and setpos2() processing when the position is set before the current playback position.
    setpos() and setpos2().
    Fixed a bug in which ppz8 sound was not played when playing and getlength() were executed in separate threads at the same time.
    fixed.

ver 0.18 2001/02/17
    Fixed a bug that the sound may become strange when multiple instances of PMDWin are used.
    Replaced with OPNA new core (fmgen001.tar.bz 2000/09/09)

ver 0.19 2001/03/04
    Fixed a bug that a memo could not be read when it was retrieved from an external file by the fgetmemo() system.
    Fixed a bug.
    Replaced by OPNA new core (fmgen003.tar.bz 2001/02/24).
    Speedup option in opna.cpp (#define FM_USE_CALC2, FM_USE_CALC2E,
    NO_BITTYPE_EMULATION) in opna.cpp because I forgot to define them.
    In getlength() and getlength2(), forced to terminate the calculation if the clock is more than 65536.
    when the clock is more than 65536.
    The buffer is now filled with the exit code before reading song data.
    (To prevent illegal song data)
    In DLLinfop.txt, getversion() was mistakenly written as getdllversion().
    Fixed it.

ver 0.20 2001/08/05
    Replaced with OPNA new core (fmgen006.tar.bz 2001/03/30).
    Fixed a bug that the sound of SSG Drum may cut off when SSG 3ch(Ich) and SSG Drum are used at the same time.
    When SSG 3ch(Ich) and SSG Drum are used at the same time, the sound of SSG Drum is sometimes cut off.

ver 0.21 2001/09/16
    Fixed a bug that an access violation occurs when loading a song whose data does not end with 00.
    Fixed a bug.
    Clear the buffers of PPC, PZI, P86 and PPS by pmdwininit().

ver 0.22 2001/09/30
    Fixed a bug that could cause an access violation in PPC, PZI, P86 and PPS.
    Fixed a bug that consumed a lot of stack.

ver 0.23 2001/11/17
    Improve the speed of DLL operation when many threads are used.
    Fix a mistake in pmdwinimport.h

ver 0.24 2002/03/24
    added support for playing only FM part of TOWNS song data
    The file name of the song is stored in the internal buffer even when the PCM reading fails.
    file name to the internal buffer even when PCM reading failed.
    Memory leak occurred when loading PVI with invalid header into PPZ8.
    Fixed a bug.

ver 0.25 2002/08/03
    It was made to read PPS even when the extension of PPS was omitted in the song data.

ver 0.26 2002/08/04
    Fixed a bug that PPS could not be read when the extension of PPS is other than "PPS" in the song data.

ver 0.27 2002/09/22
    Fixed a bug that memory leak occurred when PPZ8 read PVI with invalid header.
    Fixed a memory leak when loading a PVI with invalid header into PPZ8.

ver 0.28 2002/10/27
    Fix the volume balance of P86.

ver 0.29 2003/03/09
    Fixed that the pan was not initialized when P86 was played again.

ver 0.30 2003/06/22
    incorporated fmgen 007a

ver 0.31 2003/08/03
    fixed a bug that setfmcalc55k was not working anymore
    Fixed a bug in getmemo3 / fgetmemo3 that could cause a memory leak when the acquisition string was 0 bytes.
    Fixed a bug in getmemo3 / fgetmemo3 that could cause a memory leak when the get string was 0 bytes.
    Fixed a bug in getmemo3 / fgetmemo3 that could cause a memory leak when the get string was 0 bytes.

ver 0.32 2003/08/13
    Fixed a bug that the return value of the getmemo API was wrong.

ver 0.33 2003/09/28
    incorporated fmgen 008

ver 0.34 2003/12/07
    Fixed a bug that may cause a small noise when replaying.

ver 0.35 2004/01/10
    Volume LFO when using slot mask for LFO2 in FM part
    (when MMB and one of *B2,*B3,*B6,*B7 are used together) did not work properly.
    (when MMB and *B2, *B3, *B6, or *B7 are used together) did not work properly.
    Fixed a problem in which a negative relative value was specified for TL value in the FM part TL value setting command (O command).
    TL value setting command (O command) did not work correctly when a negative relative value was specified for TL value.

ver 0.36 2010/01/11
    Changed the volume of SSG to 86 board equivalent.
    Changed the synthesized frequency from 55555Hz to 55466Hz at 55kHz.

ver 0.37 2020/01/12
    Reflected the modification of PMD 4.8r.
ver 0.38 2020/04/12
    Reflects fixes in PMD 4.8s
    Fixed a bug that prevented normal playback of some song data.
    Fixed a bug in which noise could be introduced in the primary interpolation process.
    Fixed an error in which some API return values were wrong when loading song data.
    Stabilized the operation.
    Many other fixes.

ver 0.39 2020/08/16
    Fixed a bug in the clipping process of MD command.
    Fixed the bug that wait was not applied when writing ADPCM register.
    Fixed the bug that the sound becomes abnormal when writing the ADPCM playback address.



------------------------------------------------------------------------------
Contact information

    E-mail HQD00151@nifty.com
    Homepage http://c60.la.coocan.jp/
    Twitter c60fmp



                                                                C60
=======================
==============================================================================
                     FMP for Windows "WinFMP" Ver.0.18
                        Copyright & Programmed by C60
==============================================================================


------------------------------------------------------------------------------
Introduction

    This program is a dll to listen to the song data of the FM sound source driver "FMP" for PC9801 series on Windows.
    This program is a dll to listen to the song data of the FM sound driver "FMP" of the PC9801 series on Windows.
    It is not possible to play the music only with this dll. Please get a player separately.
    
    From this version, PDZF/Z8X for Windows (created by TAN-Y) is officially supported.
    (PDZFZ8XWin requires Ver. 2.0.0 or later. Ver. 1.1.0 cannot be played.


------------------------------------------------------------------------------
Installation and Uninstallation

    (a) Installation
        Place WinFMP.dll in c:\windows\system or c:\winnt\system32 or
        Place it in the same directory as the player.
        To play the YM-2608's rhythm sound source, place the following wave file
        (44100Hz, 16bit, monoral. Only PCM format can be used.
        Place the following wave file (44100Hz, 16bit, monoral, cannot use other than PCM format) in the directory specified by the player.

            2608_BD.WAV ;Bass drum
            2608_SD.WAV ;Snare Drum
            2608_HH.WAV ;Hi-Hat
            2608_TOP.WAV ;Cymbal
            2608_TOM.WAV ;Tom
            2608_RIM.WAV ;Rim Shot
        
        If you want to use it with PDZF/Z8X for Windows, place it in the same directory as WinFMP.dll
        If you use it with PDZF/Z8X for Windows, please put PDZFZ8XWin.dll(Ver.2.0.0 or later) in the same directory as WinFMP.dll.
        From this version, please do not rename PDZFZ8XWin.dll and WinFMP.dll.
        Please leave them as they are.
        
        
    (b) Uninstallation
        Delete this dll using Explorer or similar.
        Delete the player, wave files, etc. if they are not needed.


------------------------------------------------------------------------------
Operation check environment

    Self-made AT compatible machine (Asustek P5B, Core2Duo 6600, GeForce 9500GT, 
                    Built-in SoundMax Integrated Digital HD Audio, etc.)
            ＋ WindowsXP SP3, synthesized frequency = 55kHz

    Lenovo Thinkpad X200 (Core2Duo P8600, built-in Conexant 20561 SmartAudio HD)
            + Windows7 SP1 composite frequency = 55kHz


------------------------------------------------------------------------------
▼ About embedded software

    WinFMP.dll contains an FM sound engine (fmgen 008) written by cisc.
    FM Sound Generator with OPN/OPN
    
        FM Sound Generator with OPN/OPM interface
        Copyright (C) by cisc 1998, 2003.


------------------------------------------------------------------------------
Terms of Use & Reprint

    This software is free software. The copyright of this software is owned by C60.
    However, the copyright of the original FMP is owned by Mr. Guu, the copyright of PMD98 is owned by Mr. KAJA, the copyright of PPZ8 is owned by
    PPZ8 copyright by Ukky, FM sound engine copyright by cisc, BrowseDialog component copyright by
    Copyright of BrowseDialog component by Mr. Maeda, Copyright of Color Changeable Trackbar by
    The copyright of PPZ8 is owned by Ukky, the copyright of FM sound engine is owned by cisc, the copyright of BrowseDialog component is owned by Maeda, and the copyright of color changeable trackbar is owned by Fumika.
    WinFMP, PMDWin, and FMPMD2000 are copyrighted by the author.
    WinFMP, PMDWin and FMPMD2000.
    The authors are not responsible for any bugs or defects in WinFMP, PMDWin or FMPMD2000.
    The author is not obligated to fix any bugs in WinFMP, PMDWin or FMPMD2000.
    The author is not obligated to fix any bugs in WinFMP, PMDWin or FMPMD2000, but will try to fix them if you report them.
    Reproduction or distribution of WinFMP, PMDWin and FMPMD2000 is prohibited. However
    However, modifications to the source code of PMDWin and FMPMD2000 are
    PMDWin, FMPMD2000 source code.
    Software incorporating the source code of PMDWin and FMPMD2000 may be
    PMDWin, FMPMD2000 source code can be released as free software with prior notice.
    Software that uses WinFMP.dll and PMDWin.dll can be released as free software.
    Please contact the author before publishing. Please contact the author when you release the software.
    If you wish to incorporate part or all of the source code of PMDWin or FMPMD2000 into commercial software (including shareware)
    or all of the source code of PMDWin or FMPMD2000 into commercial software (including shareware), you need to obtain prior consent from the author of PMDWin or FMPMD2000.
    PMDWin, FMPMD2000.
    When distributing software with modifications to PMDWin or FMPMD2000, the copyright notice of PMDWin or FMPMD2000
    If you distribute modified versions of PMDWin or FMPMD2000, please clearly indicate the copyright of PMDWin or FMPMD2000 and the modifications.
    *.cpp or *.pas(WinFMP.pas, PMDWin.pas, PCMMusDriver.pas,
    FMPMDdefine.pas) that are related to music performance, or if you wish to modify them.
    If you wish to incorporate or modify any part of these files, please disclose the source code.


------------------------------------------------------------------------------
Acknowledgments

    I would like to express my gratitude to Guu for creating FMP, a wonderful sound source driver, and allowing me to publish this program.
    Mr. Guu, who created the wonderful sound driver FMP and allowed me to publish this program.
    Mr. Guu for creating the excellent FMP sound driver and allowing us to publish this program, and Mr. KAJA for creating the sophisticated PMD sound driver and allowing us to publish this program.
    Mr. KAJA, who created PPZ8 and allowed us to publish this program.
    Mr. Guu, who not only created PPZ8 and expanded the expressive power of the sound driver, but also
    Ukky, who not only created PPZ8 and expanded the expressiveness of the sound driver, but also provided the source and allowed us to publish the program.
    Ukky, who not only created and used a high-performance FM sound engine, but also allowed us to publish the program.
    Ukky, who not only created and used a high-performance FM sound engine and allowed us to publish this program, but also fixed bugs in PMDWin.
    cisc, for creating and using the
    PDZF/Z8X for Window, and also for finding many bugs.
    Mr. TAN-Y, who not only supported PDZF/Z8X for Window but also found many bugs.
    Mr. Mamiya for making WinAMP plug-ins, Mr.
    Mr. Kigami who made PMV, and
    Mr. Maeda and Ms. fumika for releasing useful components.
    Thank you very much for bug reports, valuable comments, and requests.
    Thank you very much.


------------------------------------------------------------------------------
▼ History

ver.0.01 2000/06/11
    First version released

ver 0.02 2000/08/20
    Q When the length of a note becomes an integer multiple of 256 clocks, the sound is cut off.
    Fixed a bug.
    Fixed a bug in which random LFO was not working properly.
    Fixed a bug in which the display was sometimes corrupted due to insufficient removal of escape sequences.
    Fixed a bug in which the wah-wah would return to 0 when the TL exceeded 127.
    Fixed a bug in which noise would sometimes appear when switching tones.
    Fixed a bug that the wait time when outputting to opna can be reproduced.
    in release)
    Fixed an access violation in fmp_getcomment2, fmp_getcomment3, fmp_fgetcomment2, and fmp_fgetcomment3.
    Fixed a bug that sometimes caused access violations in fmp_getcomment2, fmp_getcomment3
    WARNING was spelled wrongly, so it has been fixed.
    Fixed a bug where the result of fmp_getlength was slightly different each time.

ver 0.03 2001/01/21
    Implemented COM-like interface.
    Implemented fmp_setfmcalc55k(). fmp_setpcmrate() now supports 11kHz, 22kHz, 44kHz,
    other than 11kHz, 22kHz, 44kHz, and 55kHz with fmp_setpcmrate().
    Implemented fmp_setppzrate()
    Fixed possible access violation in fmp_getcomment3() and fmp_fgetcomment3()
    Fixed a bug.
    When a song ends while waiting for synchronization with the W command, fmp_getlength() could not determine the end of the song.
    Fixed a bug that caused fmp_getlength() to go into an infinite loop.
    Improved error check for fmp_getcomment when song data is invalid.
    Speed up fmp_setpos() and fmp_setpos2() when setting the position before the current playback position
    fmp_setpos() and fmp_setpos2().
    Implementation of fmp_getsyncscnt(), fmp_getlastsyncexttime()
    Improved processing speed of fmp_load()
    Fixed a bug that ppz8 sound was not played when playing and getlength() were executed in different threads at the same time
    Fixed a bug that the ppz8 sound could be lost if the performance and getlength() are executed in different threads at the same time.
    Faster processing at the start of a song that uses PPZ8
ver 0.04 2001/02/17
    Fixed a bug that the sound may become strange when multiple instances of WinFMP are used.
    Replaced by OPNA new core (fmgen001.tar.bz 2000/09/09)

ver 0.05 2001/03/04
    Fixed a bug in the fgetcomment() system that could not be read when trying to get a comment from an external file.
    Fixed a bug in the fgetcomment() system that could not be read.
    Replaced with OPNA new core (fmgen003.tar.bz 2001/02/24).
    Speedup option in opna.cpp (#define FM_USE_CALC2, FM_USE_CALC2E,
    NO_BITTYPE_EMULATION) in opna.cpp were off, so I defined them.
    In fmp_getlength() and fmp_getlength2(), if the clock is more than 65536
    fmp_getlength(), fmp_getlength2() now forcibly terminate the calculation when the clock is over 65536.
    The buffer is now filled with the exit code before reading the song data.
    (To prevent illegal song data)
    In DLLinfof.txt, fmp_getversion() was mistakenly written as fmp_getdllversion().
    In DLLinfof.txt, there was a place where fmp_getversion() was miswritten as fmp_getdllversion().

ver 0.06 2001/03/11
    Fixed a bug that the sound of random LFO was sometimes strange.

ver 0.07 2001/09/16
    Fixed a bug in the PPZ section that could cause an access violation if an invalid PVI was read.
    Clear PVI / PZI in fmp_init().
    Replaced with OPNA new core (fmgen006.tar.bz 2001/03/30).

ver 0.08 2001/09/30
    Fixed a bug that could cause an access violation in PPZ8.

ver 0.10 2002/01/14
    Add option to emulate ADPCM Part with PPZ8
    Speed up the reading speed of ADPCM PVI

ver 0.11 2002/01/19
    Bug fix: When emulating ADPCM part in PPZ8
    When emulating ADPCM part with PPZ8, fixed the bug that the sound was out of tune.
    Increased wait time to avoid noise when switching tones.

ver 0.12 2002/03/24
    Fixed a memory leak when loading a PVI with an invalid header into PPZ8.
    Fixed a bug.

ver 0.13 2002/09/22
    A memory leak occurred when PPZ8 loaded a PVI with an invalid header.
    Fixed a bug that had not been removed.

ver 0.14 2003/06/22
    Added fmgen 007a.

ver 0.15 2003/08/03
    Fixed a bug that fmp_setfmcalc55k was not working anymore
    Fixed a bug that fgetcomment / fgetcomment2 did not work properly.
    In fgetcomment2, when filename = NULL, the conversion from 2-byte to 1-byte
    filename = NULL in fgetcomment2.

ver 0.16 2003/09/28
    Added fmgen 008.

ver 0.17 2010/01/11
    Changed SSG volume to 86 board equivalent.
    Changed the frequency at 55kHz synthesis frequency from 55555Hz to 55466Hz

ver 0.18 2012/03/18
    Added official support for PDZFZ8X for Windows
    Fixed a bug of 3-line splitting.
    Fixed a bug in setpos2 that caused an infinite loop.
    Fixed a bug that the count of the whole song and the count of the song loop was wrong.



------------------------------------------------------------------------------
Contact information

    E-mail HQD00151@nifty.com
    Homepage http://c60.fmp.jp/



                                                                C60

==================================

m98 Command Reference (Japanese)
How to write in MML
{ conversion expression,conversion expression,... ,
A to K, or macro line
}
Points to note to prevent compilation errors
The conversion expression must be terminated with a comma.
Always leave a space between '{' and the conversion expression.
Only one channel or one macro should be converted.
Some MML such as T and ^ cannot be used. [Some MML such as T and ^ cannot be used.
Conversion Target Switches
Each conversion command has the following switches
-n note
-l note length
-@ tone number
-v volume
-q quantize
-m macro number
-{ portamento
-p pan
-k key (note) shift
-e sequence
Multiple switches can be written together in a single conversion expression.
Example
rand -nv@,
Convert n, v, and @ at random
Conversion command
rv -switch
Reverse
cdefgab -> bagfedc
mr -switch
Mirror
cdefgab -> cdefedc
rmr -switch
Reverse Mirror
cdefgab -> bagfgab
rr( n ) - switch
Rotate n times to the right
cdefgab -> bcdefga
rl( n ) -switch
Rotate n times to the left
cdefga -> defgabc
rand(n) -switch
Change the value of switch randomly, where n is its probability (%)
crand( n ) -switch
randomly change the position of the switch, where n is the probability (%)
Filter command
@grp( n1,n2... )
Set the tone used by the rand command
@grpl( n1,n2 )
Specify a range of tones to be used by the rand command
lgrp( n1,n2... )
Set the value of "l" to be used by the rand command
mgrp( n1,n2... )
Set the macro number used in the rand command
mgrpl( n1,n2 )
Specify a range of macro numbers to be used in the rand command
ngrp<octave+note, or all+octave
Example
ngrp<4c,4e,4g>,rand -n,
in this case chosen from c,e,g in octave 4 = randomly generated c major chord
ngrp<all5>.
In this case, chosen from all notes in octave 5
qgrp( n1,n2... )
Sets the value of q used by the rand command
kgrp( n1,n2... )
Sets the value of k to be used in the rand command
rfil( min,max )
Set the minimum and maximum values used in the rand command.
rep( min,max )
Sets the minimum and maximum number of repeats of a note.
Example
If you execute rep(1,3),rand -n, the following mml will be generated (note is random)
ccceeffffaabbbgg
mask( n1,n2... ) - switch
Mask the nth element specified by switch so that it is not converted
Subroutine
call(n)
Call subroutine n
mcopy(n)
Copy the macro number n
Initialization command
preserve -switch
Preserve the length, volume, etc. of the last sound of MML in the macro, and append them to the end of the converted MML.
Command to prevent the following cases
o5cdefgab>c → crand -n, → o5cedf>c<gab
Before the conversion, the sound following this MML should start at o6, but after the conversion, it starts at o5.
In this case, by adding preserve -n
o5cedf>c<gabo6
and the last note (=octave) will be preserved.
v, @, l, etc. can be specified in the same way.