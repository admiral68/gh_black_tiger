Bank Switch: Write to IO $01

Breakpoints:
ROM:$09db => IPT_SERVICE1 on IN0
ROM:$0aa7 => After write screen warning
ROM:$0b44
ROM:$00EA => Dynamic breakpoints

$411

$13F1

$33d -- end of "wait"


$346 --- first screen ends



$b7f (after clearing scores)
$b97


EA
346
411
bpset 1442,a==$40
33D
22B8




bp 65,a != 0
bp 6a,a != 0
bp 1442,a==$40



bp b3
bp ea
bp 3c9
bp 3cf
bp 346
bp 408
bp 411
bp 1d6d
bp 1dfb
bp 235c
bp 2364
bp 239e
bp 27c3
bp 301e
bp 32C7
bp 32FE
bp 3683
bp 3dc3
bp 47e9
bp 481e
bp 8446
bp 8800
bp 8D0E

bp 1352
bp 20ec

bp 683
bp 2343


13E6:Maybe draw sprites

c000 -- BG VIDEO RAM... 16x8 tiles (16 w 8 h)
LW+(BITS0-3 of HW) = TILE SELECTION
(BITS4-6 of HW) = PALETTE
BIT 7 of HW: FLIP HORIZONTALLY

FE28:
WORD -- PALETTE
WORD -- LOCATION (X = MSB) (Y = LSB) -- 10 00 = top left of screen;    10 F0 = top right of screen
                                        E0 00 = bottom left of screen; E0 F0 = bottom right of screen
DEBUG FE28:
1) BP ac3c
2) BP ac45
3) CTRL+M. Set to FE20. Values will be from Fe28 to Fe28+1c0
4) hit first bp
5) change values
6) F5. Changes should show.



128 pieces of sprites can be used simultaneously


SPRITE STRUCTURE (in Z80 src code):

Byte 0  |  Byte 1  |  Byte 2  |  Byte 3
-----------------------------------------
(tile/sp)   attrib       y pos      x pos
index

attrib
   bits 0-2: palette (0-7)
   bit 3: flip tile/sprite piece horizontally
   bit 4: if set, subtract 256 from x pos
   bits 5-7: index |= ((attrib & E0) << 3) --- Indexes up to 7FF



PLAYER ANIMATION STRUCT:

BYTE 1: FIRST INDEX (add 1 for tile 2, 8 for tile 3, 9 for tile 4 index)
BYTE 2: ATTR (INCLUDING ALL BITS)
BYTE 3: WEAPON INDEX
BYTE 4: WEAPON ATTR (ALL BITS)
BYTE 5: WEAPON X OFFSET (FROM FIRST SPRITE TILE)
BYTE 6: WEAPON Y OFFSET (FROM FIRST SPRITE TILE)

For flipped tiles, put first index on right, second on left.

e=1,w=2,d=4,u=8,f=10,j=20

    Type *copy(uint32_t srcoffset = 0, uint32_t srclength = 0x7fffffff)
    {
        assert(m_spriteram != nullptr);
        if (m_spriteram != nullptr)
            memcpy(&m_buffered[0], m_spriteram + srcoffset, (std::min<size_t>)(srclength, m_spriteram.bytes() / sizeof(Type) - srcoffset) * sizeof(Type));
        return &m_buffered[0];
    }
STRUCT:
0:
1:attr (color=AND7;FLIPX=AND8)
2:y-6
3:x-128

        int attr = buffered_spriteram[offs+1];
        int sx = buffered_spriteram[offs + 3] - ((attr & 0x10) << 4);
        int sy = buffered_spriteram[offs + 2];
        int code = buffered_spriteram[offs] | ((attr & 0xe0) << 3);
        int color = attr & 0x07;
        int flipx = attr & 0x08;

        m_gfxdecode->gfx(2)->transpen(bitmap,cliprect,
                code,
                color,
                flipx,flip_screen(),
                sx+128,sy+6,15);

    Bank06::827e 10              ??         10h                                              X LOC
    Bank06::827f 00              ??         00h
    Bank06::8280 88              ??         88h                                              Y LOC
    Bank06::8281 03              ??         03h
    Bank06::8282 da b7           dw         Maybe_PutNoPrizeInWall
    Bank06::8284 02              ??         02h
    Bank06::8285 2d              ??         2Dh    -
    Bank06::8286 ff              ??         FFh
    Bank06::8287 ff              ??         FFh

LEVEL_01_BOSSES_CREATION
AddLevel01BossBlocks

void gfx_element::transpen(bitmap_ind16 &dest, const rectangle &cliprect,
        u32 code, u32 color, int flipx, int flipy, s32 destx, s32 desty,
        u32 trans_pen)
ID\  En  CPU                   Address       Condition         Action
 1   O   :maincpu              043B
 2   O   :maincpu              0466
 4   O   :maincpu              1CD9
 5   O   :maincpu              1B49
 6   X   :maincpu              1E25
 7   X   :maincpu              1E2C
12   X   :maincpu              01B4
16   O   :maincpu              03D0
18   O   :maincpu              14AF
1A   X   :maincpu              550B
1D   O   :maincpu              30C8
1F   O   :maincpu              1BD0
20   X   :maincpu              8625
21   X   :maincpu              86A1
22   X   :maincpu              86B4
23   X   :maincpu              86B9
24   X   :maincpu              86BF
25   X   :maincpu              86C8
26   X   :maincpu              86D3
27   X   :maincpu              06DA
28   O   :maincpu              07E8
29   O   :maincpu              07F0
2A   X   :maincpu              07F9
2B   O   :maincpu              0803
2C   X   :maincpu              86BC
2D   O   :maincpu              A1B5
2E   O   :maincpu              1932
2F   X   :maincpu              1BFB
30   X   :maincpu              8118          a > 0
31   X   :maincpu              868F          a>0
32   X   :maincpu              195C
33   O   :maincpu              1CC7
34   X   :maincpu              7138
35   X   :maincpu              714A
36   X   :maincpu              7147
37   X   :maincpu              719A
38   X   :maincpu              714B
39   X   :maincpu              719B
3A   X   :maincpu              ACEF
3B   X   :maincpu              AD40
3C   X   :maincpu              AD91
3D   O   :maincpu              B924

   ID\  En  CPU                   Space      Addresses         Type   Condition
 1   X   :maincpu              program    2A02-2A02         read
 2   O   :maincpu              program    F955-F955         write
 3   O   :maincpu              program    ECAC-ECAC         write
 4   O   :maincpu              program    F940-F940         write
 5   O   :maincpu              program    56DA-5711         read
 6   O   :maincpu              program    E100-E100         write
 7   O   :maincpu              program    FE00-FFFF         write
 8   O   :maincpu              program    E100-E101         read
 9   X   :maincpu              program    E0E7-E0E7         write
 A   X   :maincpu              program    8286-8286         read
 B   X   :maincpu              program    827E-827E         read






bp ea
bp 3c4
bp 3c9
bp 3cf
bp 411,hl!=$1429 && hl!=$144D
bp 1d6d
bp 1dfb
bp 27c3
bp 301e
bp 32fe,hl!=$9456 && hl!=$96c2
bp 3683
bp 3dc3
bp 72ea
bp a1e9



bp 195c--player sprite draw?



audiocpu: C001 sound one? c800 sound 2?

c500 - queue for YM1. C515 start ptr (big endian) C517 end ptr (big endian) c51b - Original control value (from A)
C530 - queue for YM2. C545 start ptr (big endian) C547 end ptr (big endian) c54b - Original control value (from A)


HOW TO: TEST AUDIO CLIPS
0) Start MAME debugger for blktiger (mame -debug blktiger)
1) set bp 1b4 in maincpu
2) CTRL+M. Set watch to E150
3) F5 (continue)
4) set pc=1ac when bp 1b4 is hit
5) F5 (continue). This puts Black Tiger into test mode.
6) Put values from 0h to 43h into E151 (in memory watch window). 0, 1F, and 38 will not play sounds. They stop the current sound.
7) Change byte at E162 to 51 (in memory watch window). Voila. Sound plays.



ID\  En  CPU                   Address       Condition         Action
 1   X   :maincpu              00EA
 2   X   :maincpu              0346
 3   X   :maincpu              0411
 4   X   :maincpu              1442          a==$40
 5   O   :maincpu              2F2D
 7   O   :maincpu              32C7
 8   X   :maincpu              8446
 9   X   :maincpu              8800
 A   X   :maincpu              8D0E
 D   X   :maincpu              1939
 E   X   :maincpu              1E25
 F   X   :maincpu              8446
11   X   :maincpu              862B
14   X   :maincpu              86BF
15   X   :maincpu              86C5
17   X   :maincpu              24A0






    map(0x0000, 0x7fff).rom();
    map(0xc000, 0xc7ff).ram();
    map(0xc800, 0xc800).r("soundlatch", FUNC(generic_latch_8_device::read));
    map(0xe000, 0xe001).rw("ym1", FUNC(ym2203_device::read), FUNC(ym2203_device::write));
    map(0xe002, 0xe003).rw("ym2", FUNC(ym2203_device::read), FUNC(ym2203_device::write));


charlayout
spritelayout


static GFXDECODE_START( gfx_blktiger )
    GFXDECODE_ENTRY( "gfx1", 0, charlayout,   0x300, 32 )   /* colors 0x300-0x37f */
    GFXDECODE_ENTRY( "gfx2", 0, spritelayout, 0x000, 16 )   /* colors 0x000-0x0ff */
    GFXDECODE_ENTRY( "gfx3", 0, spritelayout, 0x200,  8 )   /* colors 0x200-0x27f */
GFXDECODE_END


    m_scroll_x[0] = 0;
    m_scroll_x[1] = 0;
    m_scroll_y[0] = 0;
    m_scroll_y[1] = 0;
    m_scroll_bank = 0;
    m_screen_layout = 0;



                             SOUNDS_TABLE                                    XREF[1]:     Maybe_PlaySoundEffect:020e(*)
        ram:0dc1 00 ff           dw         FF00h                                            Sound 0: FF stops music playing
        ram:0dc3 49 0e           dw         PLAYER_LOSES_VITALITY_SOUND                      = 8Fh
        ram:0dc5 9e 0e           dw         PLAYER_DEATH_SOUND                               = 8Fh
        ram:0dc7 7f 0f           dw         ENEMY_INJURED_BLOOP_SOUND                        = CFh
        ram:0dc9 d4 0f           dw         ENEMY_DEFEATED_SOUND                             = CFh
        ram:0dcb fe 0f           dw         ITEM_TAKEN_SOUND                                 = 88h
        ram:0dcd 7b 10           dw         PLAYER_TAKES_ZENNY_COIN_SOUND                    = 88h
        ram:0dcf f5 10           dw         FIRE_PILLAR_WARNING_SOUND                        = 88h
        ram:0dd1 5e 11           dw         POT_BREAKS_REVEALS_COIN_SOUND                    = C8h
        ram:0dd3 c7 11           dw         FIRE_PILLAR_SOUND                                = C8h
        ram:0dd5 08 12           dw         SMALL_EXPLOSION_SOUND                            = C8h
        ram:0dd7 32 12           dw         WEAPON_CLASH_METALLIC_BATTLE_SOUND               = 88h
        ram:0dd9 84 12           dw         KILL_BAT_SOUND                                   = C8h
        ram:0ddb ae 12           dw         PLAYER_EARNS_EXTRA_LIFE_SOUND                    = 8Fh
        ram:0ddd 64 13           dw         POT_BREAKS_SOUND                                 = 88h
        ram:0ddf bc 13           dw         PLAYER_DISCOVERS_TREASURE_SOUND                  = C8h
        ram:0de1 86 14           dw         BIG_BOSS_HIT_SOUND                               10
        ram:0de3 b0 14           dw         TIME_EXPIRING_SOUND                              = 81h
        ram:0de5 ee 14           dw         PLAYER_GETS_ITEM_FROM_OLD_MAN_SOUND              = 88h
        ram:0de7 cc 15           dw         BOOM_EXPLOSION_SOUND                             = C8h
        ram:0de9 0d 16           dw         UNKNOWN_ALARM_SOUND                              = 81h
        ram:0deb 4e 16           dw         IMPACT_SOUND                                     = C8h
        ram:0ded 78 16           dw         CLASH_SPINNING_COIN_SOUND                        = C8h
        ram:0def a2 16           dw         PLAYER_LOSES_ARMOR_SOUND                         = 8Fh
        ram:0df1 08 17           dw         MICHELIN_MAN_FIREBREATHING_SOUND                 = C8h
        ram:0df3 35 17           dw         FIRETHROWER_TAUNT_SOUND                          = C8h
        ram:0df5 b2 17           dw         PLAYER_CLIMB_SOUND                               = 88h
        ram:0df7 c8 17           dw         FLAIL_EMPTY_HIT_SOUND                            = 88h
        ram:0df9 de 17           dw         PLAYER_LANDS_ON_PLATFORM_SOUND                   = 88h
        ram:0dfb 1c 18           dw         PLAYER_ASCENDS_DURING_CUTSCENE_SOUND             = 88h
        ram:0dfd 32 18           dw         PLAYER_GRABS_LADDER_SOUND                        = 88h
        ram:0dff 01 ff           dw         FF01h                                            1f: stops playing music
        ram:0e01 10 1b           dw         COIN_OR_CREDIT_ADDED_SOUND                       = 4Fh    O
        ram:0e03 8c 1b           dw         LEVEL_1_MUSIC                                    Level 1 music
        ram:0e05 de 1f           dw         LEVEL_2_MUSIC                                    = 06h
        ram:0e07 ef 23           dw         LEVEL_3_MUSIC                                    = 06h
        ram:0e09 b7 27           dw         LEVEL_4_MUSIC                                    = 06h
        ram:0e0b 27 2d           dw         LEVEL_5_MUSIC                                    = 06h
        ram:0e0d 07 32           dw         LEVEL_6_MUSIC                                    = 06h
        ram:0e0f c4 35           dw         LEVEL_7_MUSIC                                    = 06h
        ram:0e11 7c 3a           dw         LEVEL_8_MUSIC                                    Level 8 music
        ram:0e13 cb 3f           dw         BOSS_MUSIC_01                                    = 06h
        ram:0e15 f5 41           dw         FIGHT_DRAGON_MUSIC_01                            = 06h
        ram:0e17 8b 44           dw         FIGHT_DRAGON_MUSIC_02                            = 06h
        ram:0e19 70 47           dw         OLD_MAN_SHOP_MUSIC                               = 06h
        ram:0e1b 7e 49           dw         DUNGEON_MUSIC_01                                 = 06h
        ram:0e1d 96 4b           dw         ENTER_INITIALS_MUSIC                             = 06h
        ram:0e1f 9d 51           dw         AFTER_ENTER_INITIALS_MUSIC                       = 06h
        ram:0e21 82 52           dw         INTRO_MUSIC                                      30
        ram:0e23 48 54           dw         GAME_OVER_MUSIC                                  = 06h
        ram:0e25 13 55           dw         SUCCESSFULLY_FINISH_LEVEL_MUSIC                  = 06h
        ram:0e27 fa 55           dw         FINISH_LEVEL_8_MUSIC                             = 06h
        ram:0e29 a4 5e           dw         CONTINUE_MUSIC                                   = 06h
        ram:0e2b 51 60           dw         MAYBE_PERFECT_BONUS_MUSIC                        = 06h
        ram:0e2d d2 60           dw         UNKNOWN_FANFARE_MUSIC                            = 06h
        ram:0e2f 6d 61           dw         UNKNOWN_FANFARE_MUSIC_02                         = 06h
        ram:0e31 04 ff           dw         FF04h                                            38 stops music playing
        ram:0e33 36 62           dw         UNKNOWN_FANFARE_MUSIC_03                         = 06h
        ram:0e35 5c 18           dw         FLAIL_HIT_SOUND                                  = 88h
        ram:0e37 86 18           dw         FALLING_SOUND                                    = C1h
        ram:0e39 9c 18           dw         BOUNCING_SOUND_(LOOPS)                           = C1h
        ram:0e3b c9 18           dw         OLD_MAN_TALKING_SOUND                            = C8h
        ram:0e3d 57 19           dw         OLD_MAN_TALKING_SOUND_02                         = C8h
        ram:0e3f a9 19           dw         DRAGON_DIE_SOUND                                 = 90h
        ram:0e41 90 1a           dw         MAYBE_BLOCK_BOUNCE_UP_SOUND                      40
        ram:0e43 ba 1a           dw         FALLING_SOUND_02                                 = C8h
        ram:0e45 d0 1a           dw         BOSS_HIT_SOUND                                   = C8h
        ram:0e47 e6 1a           dw         DRAGON_SPEW_FIRE_SOUND                           43 might be the last sound


BP: 1B4 (allows entry to test menu; PC=1ac)
  : 5501 (change a => 1-7 for changing coin award from killing enemy)

                             DEMON_ACTION_SELECTION_TABLE                    XREF[2]:     Maybe_HandleDemon:a07d(*),
                                                                                          Maybe_HandleDemon:a081(R)
    Bank02::acae 04              ??         04h
    Bank02::acaf 03              ??         03h
    Bank02::acb0 00              ??         00h
    Bank02::acb1 00              ??         00h
    Bank02::acb2 01              ??         01h
    Bank02::acb3 00              ??         00h
    Bank02::acb4 05              ??         05h
    Bank02::acb5 03              ??         03h
    Bank02::acb6 04              ??         04h
    Bank02::acb7 02              ??         02h
    Bank02::acb8 03              ??         03h
    Bank02::acb9 00              ??         00h
    Bank02::acba 00              ??         00h
    Bank02::acbb 03              ??         03h
    Bank02::acbc 00              ??         00h
    Bank02::acbd 00              ??         00h

                             JMP_TBL_DEMON_ACTIONS_01                        XREF[1]:     Maybe_HandleDemon:a082(*)
    Bank02::a088 94 a0           dw         Maybe_DemonSpearThrow2
    Bank02::a08a a9 a0           dw         Maybe_HandleDemon06
    Bank02::a08c b2 a0           dw         Maybe_HandleDemon05
    Bank02::a08e ba a0           dw         Maybe_HandleDemon03
    Bank02::a090 c1 a0           dw         Maybe_HandleDemon04
    Bank02::a092 c9 a0           dw         Maybe_HandleDemon02

                             JMP_TBL_DEMON_ACTIONS_01                        XREF[1]:     Maybe_HandleDemon:a082(*)
    Bank02::a088 94 a0           dw         Maybe_DemonSpearThrow2
    Bank02::a08a a9 a0           dw         Maybe_DemonAction01
    Bank02::a08c b2 a0           dw         Maybe_DemonAction02
    Bank02::a08e ba a0           dw         Maybe_DemonAction03
    Bank02::a090 c1 a0           dw         Maybe_DemonAction04
    Bank02::a092 c9 a0           dw         Maybe_DemonAction05

                             ORANGE_MICHELIN_MAN_JMP_TBL                     XREF[1]:     Maybe_OrangeMichelinManUpdate00:
    Bank03::840b 15 84           dw         Maybe_OrangeMichelinManUpdate01
    Bank03::840d fd 85           dw         Maybe_OrangeMichelinManUpdate02
    Bank03::840f 0d 86           dw         Maybe_OrangeMichelinManUpdate03
    Bank03::8411 7c 86           dw         Maybe_OrangeMichelinManUpdate04
    Bank03::8413 ae 86           dw         Maybe_OrangeMichelinManUpdate05



(IX+0x0) = alive flag? ($80 or not)
(IX+0x1) = x pos
(IX+0x3) = y pos
(IX+0x5) = sprite attr of tile
(IX+0x6) = animation x offset ($80 special case)
(IX+0x7) = animation y offset ($80 special case)
(IX+0x8) = something to do with X/Y (X bounds?) velocity?
(IX+0x9) = something to do with X/Y (Y bounds?) velocity?

(IX+0xa) = animation duration!
(IX+0xb) = entity class
(IX+0xc) = bitflags (?) x8=AdjustSpriteXAndYForScrolling, x1=
(IX+0xd) = used for offset into jump table?? (inanimate sprite ID?)
(IX+0xe) = maybe health? (enemy only)

(IX+0xf) = maybe injury that lags?

(IX+0x10)
(IX+0x11) = sprite anim table offset
(IX+0x12) = Sprite anim y offset hi(?)
(IX+0x13) = ROM Bank
(IX+0x14) = sprite facing flag(?) 0 = r, 1 = l
(IX+0x15) = character health points (enemy too?)
(IX+0x16) =
(IX+0x18) = EC5C--???
(IX+0x19) =
(IX+0x1a) = sprite struct location
(IX+0x1c) = *ending animation bookmark
(IX+0x1d) =
(IX+0x1e) = current animation bookmark

(IX+0x20) = -> maybe related sprite variable ptr?
(IX+0x21) =


ORANGE SKELETON                         0x1
ORANGE SKELETON (2)                     0x2
PURPLE SKELETON                         0x3
BROWN ORC L1                            0x4
BROWN ORC L2                            0x5
BROWN ORC L3                            0x6
BROWN ORC R4/L4                         0x7
BROWN ORC L5/R5                         0x8
ORANGE MICHELIN MAN                     0x9
YELLOW MICHELIN MAN                     0xa
PURPLE MICHELIN MAN                     0xb
MAN-EATING YELLOW PLANT                 0xc
MAN-EATING PURPLE PLANT                 0xd
FIRETHROWER L1                          0xe
BLUE GOOP                               0xf
BLUE GOOP 4                             0x10
RED GOOP                                0x11
BLUE GOOP 7                             0x12
PURPLE WITCH                            0x13
RED WITCH                               0x14
NINJA                                   0x15
SPINNING COIN                           0x16
BAT                                     0x17
SNAKE                                   0x18
PURPLE BLOCK                            0x19
ORANGE BLOCK                            0x1a
DEMON                                   0x1b
LEVEL 03 DRAGON                         0x1c
LEVEL 06 DRAGON                         0x1d
LEVEL 08 DRAGON                         0x1e
LEVEL 05 WARTHOG BOSS                   0x1f
LEVEL 07 WARTHOG BOSS                   0x20
OLD MAN THAT GIVES ZENNY                0x21
OLD MAN THAT HAS SHOP (1)               0x22
OLD MAN THAT GIVES VITALITY             0x23
OLD MAN THAT GIVES MORE TIME            0x24
OLD MAN THAT GIVES ADVICE/SCULL         0x25
OLD MAN THAT GIVES GRATITUDE            0x26
OLD MAN THAT GIVES ADVICE/SEEK          0x27
OLD MAN THAT HAS SHOP (2)               0x28
FALLING ROCK                            0x29

        ram:27ae dd 72 11        LD         (IX+0x11)=>MAYBE_DUNGEON_VECTOR_LO,D             2A or 80/81
        ram:27b1 dd 73 12        LD         (IX+0x12)=>MAYBE_DUNGEON_VECTOR_HI,E             00, 12 or d0


19/8/2021:

bp 2181;bp 219f;bp 2a1f;bp 3bad;bp 4546;bp 47bc;bp 47d9;bp 4faf;bp b9c;bp 1f1e;bp 2040;bp 23e8;bp 2721;bp 534a;bp 5a44
                             LEVEL_01_DATA_TBL_042a                          XREF[1]:     ram:2b00(*)
    Bank05::8560 60 86           dw         DAT_Bank05__8660
    Bank05::8562 62 86           dw         DAT_Bank05__8662
    Bank05::8564 64 86           dw         DAT_Bank05__8664                                 = DCh
    Bank05::8566 86 86           dw         DAT_Bank05__8686
    Bank05::8568 88 86           dw         DAT_Bank05__8688
    Bank05::856a 8a 86           dw         DAT_Bank05__868a
    Bank05::856c 8c 86           dw         DAT_Bank05__868c                                 = DCh
    Bank05::856e ae 86           dw         DAT_Bank05__86ae




     F400  80 00 70 00 90 00 00 00 0C 20 70 03 08 01 01 00   ..p...... p.....
     F410  00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00   ................
     F420  01 00 00 00 00 00 00 00 00 00 00 FE 00 00 00 00   ................
     F430  00 00 00 00 00 00 00 00 00 00 00 00 00 01 07 9C   ................
     F440  00 00 20 00 96 08 01 0D 00 00 00 02 08 04 00 00   .. .............
     F450  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F460  00 00 30 00 96 08 01 00 00 00 00 00 00 00 00 00   ..0.............
     F470  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F480  00 00 40 00 96 08 6F 00 00 00 00 00 00 00 00 00   ..@...o.........
     F490  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F4A0  00 00 50 00 96 08 6F 00 00 00 00 00 00 00 00 00   ..P...o.........
     F4B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F4C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F4D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F4E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F4F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................


                             ZENNY_COIN_TEMPLATE_DATA_TBL                    XREF[1]:     ram:5514(*)
        ram:5558 66 55           dw         ZENNY_01_COIN_TEMPLATE                           = 80h
        ram:555a 86 55           dw         ZENNY_05_COIN_TEMPLATE                           = 80h
        ram:555c a6 55           dw         ZENNY_10_COIN_TEMPLATE                           = 80h
        ram:555e c6 55           dw         ZENNY_50_COIN_TEMPLATE                           = 80h
        ram:5560 e6 55           dw         ZENNY_100_COIN_TEMPLATE                          = 80h
        ram:5562 06 56           dw         ZENNY_500_COIN_TEMPLATE                          = 80h
        ram:5564 26 56           dw         ZENNY_1000_COIN_TEMPLATE                         = 80h


b0 06
b0 16



40 e9

00 37 56 79 AC FF 95 B7 DA FC
00 75 96 B9 EC FF 95 B7 DA FC
     DA00  00 37 56 79 AC FF 95 B7 DA FC 55 77 AA CC 00 11   .7Vy......Uw....
     DA10  00 00 00 00 06 08 0D 80 55 77 99 BB 60 B0 FF 11   ........Uw..`...
     DA20  00 60 80 A4 C6 D9 55 77 99 BB EE 96 B8 DA FC 11   .`....Uw........
     DA30  00 70 A0 C6 D9 DD 66 88 9A BD EF 96 B8 DA FC 11   .p....f.........
     DA40  00 70 94 B5 E7 FA 66 88 9A BD EF 96 B8 DA FC 11   .p....f.........
     DA50  00 63 95 C8 DA FC 33 66 99 CC FF 80 B4 E7 FA 11   .c....3f........
     DA60  00 70 A0 C4 D6 E9 FE 55 77 99 BB 06 08 0B EE 11   .p.....Uw.......
     DA70  00 61 82 B4 E8 FC 55 77 99 BB FF 76 97 C9 FC 11   .a....Uw...v....
     DA80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     DA90  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................

00 03 05 07 0A 0F 00 04 06 08
00 00 00 00 00 0F 00 04 06 08
     DE00  00 03 05 07 0A 0F 00 04 06 08 05 07 0A 0C 00 01   ................
     DE10  00 05 07 0A 0C 0D 0D 00 05 07 09 0B 00 00 0F 01   ................
     DE20  00 00 00 00 00 00 05 07 09 0B 0E 00 04 06 08 01   ................
     DE30  00 00 00 00 00 00 06 08 0A 0D 0F 00 04 06 08 01   ................
     DE40  00 00 06 09 0D 0F 06 08 0A 0D 0F 00 04 06 08 01   ................
     DE50  00 00 00 05 07 09 03 06 09 0C 0F 00 00 00 00 01   ................
     DE60  00 00 00 00 00 00 00 05 07 09 0B 00 00 00 0E 01   ................
     DE70  00 00 00 00 00 00 05 07 09 0B 0F 00 04 06 08 00   ................
     DE80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     DE90  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................


Player?
(IX+0x1c) = deltax
(IX+0x1d) = deltay
     F940  40 00 9E 00 90 45 01 FF 10 20 08 04 0B 00 01 01   @....E... ......
     F950  0C 0C 00 00 01 01 00 00 5C EC FE AC 07 9B 0F 9B   ........\.......
     F960  F5 20 00 00 01 00 00 00 00 00 00 00 00 00 00 00   . ..............
     F970  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F980  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F990  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F9A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F9B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F9C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F9D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F9E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     F9F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FA00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FA10  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FA20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FA30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FA40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FA50  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FA60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FA70  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FA80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FA90  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FAA0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
     FAB0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................


    Bank08::9410 22 08 60        player_a
                 08 fb 08
       Bank08::9410 22              db        22h                     index_tile_1
       Bank08::9411 08              int:3     0h                      palette
       Bank08::9411 08              int:1     1h                      horiz_flip
       Bank08::9411 08              int:1     0h                      x_minus_256
       Bank08::9411 08              int:3     0h                      high_bits_ti
       Bank08::9412 60              db        60h                     weapon_index
       Bank08::9413 08              int:3     0h                      palette_weapon
       Bank08::9413 08              int:1     1h                      horiz_flip_w
       Bank08::9413 08              int:1     0h                      x_minus_256_
       Bank08::9413 08              int:3     0h                      high_bits_ti
       Bank08::9414 fb              db        FBh                     x_offs_weapo
       Bank08::9415 08              db        8h                      y_offs_weapo



                             JMP_TBL_022+1                                   XREF[2,1]:   FUN_ram_2793:27a7(*),
                             JMP_TBL_022                                                  FUN_ram_2793:27ab(R),
                                                                                          FUN_ram_2793:27ad(R)
        ram:2a02 12 2a           dw         FUN_ram_2a12                                     Bank 05 (level 1)
        ram:2a04 12 2a           dw         FUN_ram_2a12                                     level 2
        ram:2a06 12 2a           dw         FUN_ram_2a12                                     level 3
        ram:2a08 00 80           dw         WORD_Bank05__8000                                level 4
        ram:2a0a 12 2a           dw         FUN_ram_2a12                                     level 5
        ram:2a0c 12 2a           dw         FUN_ram_2a12                                     level 6
        ram:2a0e 12 2a           dw         FUN_ram_2a12                                     level 7
        ram:2a10 d0 81           dw         WORD_Bank05__81d0                                level 8


        ram:27ae dd 72 11        LD         (IX+0x11)=>DAT_ram_e041,D                        2A or 80/81
        ram:27b1 dd 73 12        LD         (IX+0x12)=>DAT_ram_e042,E                        00, 12 or d0

                             DATA_TABLE_AAA+1                                XREF[2,1]:   FUN_ram_2793:27a7(*),
                             DATA_TABLE_AAA                                               FUN_ram_2793:27ab(R),
                                                                                          FUN_ram_2793:27ad(R)
        ram:2a02 12 2a           dw         2A12h                                            Bank 05 (level 1)
        ram:2a04 12 2a           dw         2A12h                                            level 2
        ram:2a06 12 2a           dw         2A12h                                            level 3
        ram:2a08 00 80           dw         8000h                                            level 4
        ram:2a0a 12 2a           dw         2A12h                                            level 5
        ram:2a0c 12 2a           dw         2A12h                                            level 6
        ram:2a0e 12 2a           dw         2A12h                                            level 7
        ram:2a10 d0 81           dw         81D0h                                            level 8


c3 01


ID   En  CPU                   Address\      Condition         Action
 1   X   :maincpu              00EA
 5   X   :maincpu              033D
 2   X   :maincpu              0346
20   X   :maincpu              03ED
21   X   :maincpu              03EE
22   X   :maincpu              03FC
 3   X   :maincpu              0411
40   X   :maincpu              06DA
43   X   :maincpu              07F6
 4   X   :maincpu              1442          a==$40
28   X   :maincpu              195C
2A   X   :maincpu              198F
29   X   :maincpu              1B49
2D   X   :maincpu              1B6F
2E   X   :maincpu              1B96
53   X   :maincpu              1BFB
2C   X   :maincpu              1DFC
2F   X   :maincpu              1E25
 7   X   :maincpu              22E1
 8   X   :maincpu              230B
1F   X   :maincpu              2343
25   X   :maincpu              237C
13   X   :maincpu              240E          a != 0
15   X   :maincpu              2418
1B   X   :maincpu              266E
1C   X   :maincpu              26B2
1E   X   :maincpu              26B6
1D   X   :maincpu              26FA
24   X   :maincpu              2793
23   X   :maincpu              2A12
63   X   :maincpu              2A2F
64   X   :maincpu              2A50
66   X   :maincpu              2A53
65   X   :maincpu              2AF5
26   X   :maincpu              2B20
5D   X   :maincpu              2B3B
5F   X   :maincpu              2B47
60   X   :maincpu              2B4F
62   X   :maincpu              2B52
61   X   :maincpu              2B77
5E   X   :maincpu              2B83
4B   X   :maincpu              2ED8
4E   X   :maincpu              2F07
4F   X   :maincpu              2F16
50   O   :maincpu              32C7
32   X   :maincpu              800C
30   X   :maincpu              803B
54   X   :maincpu              806A
55   X   :maincpu              809B
35   X   :maincpu              80A9
36   X   :maincpu              80F0
37   X   :maincpu              811E
33   X   :maincpu              8446
5B   X   :maincpu              85BF
57   X   :maincpu              8625
38   X   :maincpu              862B
39   X   :maincpu              863B
3A   X   :maincpu              8665
3E   X   :maincpu              86BF
3F   X   :maincpu              86C5
3B   X   :maincpu              86C8
42   X   :maincpu              86D3
58   X   :maincpu              8800
59   X   :maincpu              8AEA
5A   X   :maincpu              8D0E
5C   X   :maincpu              909B
46   X   :maincpu              90A5
48   X   :maincpu              A0CB
4A   X   :maincpu              A1B8





                             PLAYER_ANIMATION_OFFSET_TABLE_02+1              XREF[2,1]:   FUN_Bank08__8126:81fa(*),
                             PLAYER_ANIMATION_OFFSET_TABLE_02                             FUN_Bank08__8126:820c(R),
                                                                                          FUN_Bank08__8126:820e(R)
    Bank08::9698 ac 96           dw         PLAYER_LEVEL_1_NO_ARMOR_WALKING_AND_KNEELING_T   = 9730h
    Bank08::969a b8 96           dw         PLAYER_LEVEL_1_NO_ARMOR_FIGHTING_TABLE_01        = 97F0h
    Bank08::969c c4 96           dw         WORD_Bank08__96c4                                = 98B0h
    Bank08::969e d0 96           dw         WORD_Bank08__96d0                                = 9970h
    Bank08::96a0 e8 96           dw         WORD_Bank08__96e8                                = 99D0h
    Bank08::96a2 dc 96           dw         WORD_Bank08__96dc                                = 9A30h
    Bank08::96a4 f4 96           dw         WORD_Bank08__96f4                                = 9A90h
    Bank08::96a6 00 97           dw         WORD_Bank08__9700                                = 9B20h
    Bank08::96a8 0c 97           dw         WORD_Bank08__970c                                = 9B80h
    Bank08::96aa 18 97           dw         WORD_Bank08__9718                                = 9BE0h
                             PLAYER_LEVEL_1_NO_ARMOR_WALKING_AND_KNEELING_T  XREF[1]:     Bank08::9698(*)
    Bank08::96ac 30 97           dw         PLAYER_LEVEL_1_NO_ARMOR_WALKING_RIGHT            = C6h
    Bank08::96ae 60 97           dw         PLAYER_LEVEL_1_NO_ARMOR_CROUCHING_RIGHT          = B2h
    Bank08::96b0 90 97           dw         PLAYER_LEVEL_1_NO_ARMOR_CROUCHING_LEFT           = B2h
    Bank08::96b2 90 97           dw         PLAYER_LEVEL_1_NO_ARMOR_CROUCHING_LEFT           = B2h
    Bank08::96b4 c0 97           dw         PLAYER_LEVEL_1_NO_ARMOR_WALKING_LEFT             = C6h
    Bank08::96b6 90 97           dw         PLAYER_LEVEL_1_NO_ARMOR_CROUCHING_LEFT           = B2h
                             PLAYER_LEVEL_1_NO_ARMOR_FIGHTING_TABLE_01       XREF[1]:     Bank08::969a(*)
    Bank08::96b8 f0 97           dw         PLAYER_LEVEL_1_NO_ARMOR_FIGHTING_RIGHT_POS_1     = D2h
    Bank08::96ba 20 98           dw         PLAYER_LEVEL_1_NO_ARMOR_FIGHTING_CROUCH_RIGHT_01 = B4h
    Bank08::96bc 50 98           dw         PLAYER_LEVEL_1_NO_ARMOR_FIGHTING_CROUCH_LEFT_01  = B4h
    Bank08::96be 50 98           dw         PLAYER_LEVEL_1_NO_ARMOR_FIGHTING_CROUCH_LEFT_01  = B4h
    Bank08::96c0 80 98           dw         PLAYER_LEVEL_1_NO_ARMOR_FIGHTING_LEFT_POS_1      = D2h
    Bank08::96c2 50 98           dw         PLAYER_LEVEL_1_NO_ARMOR_FIGHTING_CROUCH_LEFT_01  = B4h





                             FLYING_DEMON_RIGHT_ANIMATION_03                 XREF[1]:     Maybe_HandleDemon:a069(*)
    Bank02::a48a 04 a6 aa        dnw_char                                                    if 0, ks death animation. If FF,
                 00 fd
    Bank02::a48f 04 b0 aa        dnw_char                                                    if 0, ks death animation. If FF,
                 00 fd
    Bank02::a494 04 b2 aa        dnw_char                                                    if 0, ks death animation. If FF,
                 00 fd
    Bank02::a499 04 b0 aa        dnw_char                                                    if 0, ks death animation. If FF,
                 00 fd
    Bank02::a49e 04 a6 aa        dnw_char                                                    if 0, ks death animation. If FF,
                 00 fd
    Bank02::a4a3 04 b0 aa        dnw_char                                                    if 0, ks death animation. If FF,
                 00 fd
    Bank02::a4a8 04 b2 aa        dnw_char                                                    if 0, ks death animation. If FF,
                 00 fd
    Bank02::a4ad 04 b0 aa        dnw_char                                                    if 0, ks death animation. If FF,
                 00 fd
    Bank02::a4b2 04 a6 aa        dnw_char                                                    if 0, ks death animation. If FF,
                 00 fd
    Bank02::a4b7 00              ??         00h
    Bank02::a4b8 4b a0           dw         Maybe_HandleDemon
                             FLYING_DEMON_ANIMATION_TABLE_01+1               XREF[2,1]:   FUN_Bank02__a0a9:a0d5(*),
                             FLYING_DEMON_ANIMATION_TABLE_01                              FUN_Bank02__a0a9:a0d9(R),
                                                                                          FUN_Bank02__a0a9:a0db(R)
    Bank02::a4ba da a4           dw         dnw_character_anim_frame_Bank02__a4da            =




                             ORANGE_DRAGON_LEFT_OFFSET_TABLE_01+1            XREF[2,1]:   Maybe_OrangeDragonFight02:8171(R
                             ORANGE_DRAGON_LEFT_OFFSET_TABLE_01                           Bank04::82e1(*),
                                                                                          Maybe_OrangeDragonFight02:8173(R
    Bank04::82e9 79 85           dw         MAYBE_ORANGE_DRAGON_LEFT_02                      =
    Bank04::82eb d2 84           dw         MAYBE_ORANGE_DRAGON_LEFT_01                      =
    Bank04::82ed d2 84           dw         MAYBE_ORANGE_DRAGON_LEFT_01                      =
    Bank04::82ef 79 85           dw         MAYBE_ORANGE_DRAGON_LEFT_02                      =
    Bank04::82f1 d2 84           dw         MAYBE_ORANGE_DRAGON_LEFT_01                      =
    Bank04::82f3 79 85           dw         MAYBE_ORANGE_DRAGON_LEFT_02                      =
    Bank04::82f5 d2 84           dw         MAYBE_ORANGE_DRAGON_LEFT_01                      =
    Bank04::82f7 d2 84           dw         MAYBE_ORANGE_DRAGON_LEFT_01                      =
    Bank04::82f9 79 85           dw         MAYBE_ORANGE_DRAGON_LEFT_02                      =
    Bank04::82fb d2 84           dw         MAYBE_ORANGE_DRAGON_LEFT_01                      =
    Bank04::82fd d2 84           dw         MAYBE_ORANGE_DRAGON_LEFT_01                      =
    Bank04::82ff d2 84           dw         MAYBE_ORANGE_DRAGON_LEFT_01                      =
    Bank04::8301 d2 84           dw         MAYBE_ORANGE_DRAGON_LEFT_01                      =
    Bank04::8303 79 85           dw         MAYBE_ORANGE_DRAGON_LEFT_02                      =
    Bank04::8305 79 85           dw         MAYBE_ORANGE_DRAGON_LEFT_02                      =
    Bank04::8307 d2 84           dw         MAYBE_ORANGE_DRAGON_LEFT_01                      =

                             ORANGE_DRAGON_LEFT_OFFSET_TABLE_02+1            XREF[2,1]:   Maybe_OrangeDragonFight02:8171(R
                             ORANGE_DRAGON_LEFT_OFFSET_TABLE_02                           Bank04::82e3(*),
                                                                                          Maybe_OrangeDragonFight02:8173(R
    Bank04::8309 e9 88           dw         MAYBE_ORANGE_DRAGON_LEFT_06                      =
    Bank04::830b e9 88           dw         MAYBE_ORANGE_DRAGON_LEFT_06                      =
    Bank04::830d e9 88           dw         MAYBE_ORANGE_DRAGON_LEFT_06                      =
    Bank04::830f 42 88           dw         MAYBE_ORANGE_DRAGON_LEFT_05                      =
    Bank04::8311 07 87           dw         MAYBE_ORANGE_DRAGON_LEFT_03                      =
    Bank04::8313 42 88           dw         MAYBE_ORANGE_DRAGON_LEFT_05                      =
    Bank04::8315 07 87           dw         MAYBE_ORANGE_DRAGON_LEFT_03                      =
    Bank04::8317 e9 88           dw         MAYBE_ORANGE_DRAGON_LEFT_06                      =
    Bank04::8319 e9 88           dw         MAYBE_ORANGE_DRAGON_LEFT_06                      =
    Bank04::831b e9 88           dw         MAYBE_ORANGE_DRAGON_LEFT_06                      =
    Bank04::831d e9 88           dw         MAYBE_ORANGE_DRAGON_LEFT_06                      =
    Bank04::831f 42 88           dw         MAYBE_ORANGE_DRAGON_LEFT_05                      =
    Bank04::8321 42 88           dw         MAYBE_ORANGE_DRAGON_LEFT_05                      =
    Bank04::8323 07 87           dw         MAYBE_ORANGE_DRAGON_LEFT_03                      =
    Bank04::8325 42 88           dw         MAYBE_ORANGE_DRAGON_LEFT_05                      =
    Bank04::8327 e9 88           dw         MAYBE_ORANGE_DRAGON_LEFT_06                      =




                             BROWN_ORC_PACING_LEFT_THEN_RIGHT_03             XREF[2]:     Maybe_BrownOrc09:a3bf(*),
                                                                                          Bank01::a7f9(*)
    Bank01::a748 08 80 45        decision                                                    duration (?) in vblanks
                 ff 00 00
                 c5 a3
    Bank01::a750 08 82 45        decision                                                    duration (?) in vblanks
                 ff 00 00
                 c5 a3
    Bank01::a758 08 84 45        decision                                                    duration (?) in vblanks
                 ff 00 00
                 c5 a3
    Bank01::a760 08 82 45        decision                                                    duration (?) in vblanks
                 ff 00 00
                 c5 a3
    Bank01::a768 28 82 45        decision                                                    duration (?) in vblanks
                 00 00 00
                 c5 a3
    Bank01::a770 08 80 4d        decision                                                    duration (?) in vblanks
                 01 00 00
                 c5 a3
    Bank01::a778 08 82 4d        decision                                                    duration (?) in vblanks
                 01 00 00
                 c5 a3


        ram:330b dd 77 0a        LD         (IX+0xa),A                                        saves either FF or FE to IX+A



                             handle_fe_flag                                  XREF[1]:     ram:32f4(j)
        ram:330a 7e              LD         A,(HL=>BROWN_ORC_PACING_RIGHT_THEN_LEFT)         =
        ram:330b dd 77 0a        LD         (IX+0xa),A
        ram:330e 23              INC        HL
        ram:330f 23              INC        HL
        ram:3310 7e              LD         A,(HL=>BROWN_ORC_PACING_RIGHT_THEN_LEFT.charac   = null
        ram:3311 dd 77 05        LD         (IX+0x5),A
        ram:3314 e6 08           AND        0x8
        ram:3316 20 14           JR         NZ,facing_right




















bp a547; bp a57c


bp a547; bp a57c; bp a6e9; bp abd8; bp ac17; bp ad34; bp ad69; bp ae9a; bp b266; bp b2a5; bp b3c2; bp b3f7; bp b528; bp b944; bp b955; bp b96b; bp b989; bp b999; bp b9a9; bp ba57; bp 82ed; bp 82fd; bp 830e; bp 8ac0; bp 8ad0; bp 8c58; bp 8c68;













bp 809b
bp 80fd
bp 811c
bp 8185
bp 8424
bp 8542
bp 8561
bp 8a61
bp 8b8b
bp 8baa
bp 947b
bp 94bb
bp 95cf
bp 9604
bp 9735
bp 9c13
bp 9c53
bp 9d70
bp 9da5
bp 9f12
bp a3ea
bp a42a
bp a547
bp a57c
bp a6e9
bp abd8
bp ac17
bp ad34
bp ad69
bp ae9a
bp b266
bp b2a5
bp b3c2
bp b3f7
bp b528
bp b944
bp b955
bp b96b
bp b989
bp b999
bp b9a9
bp ba57
bp 82ed
bp 82fd
bp 830e
bp 8ac0
bp 8ad0
bp 8c58
bp 8c68
bp 8db1
bp 8dc1
bp 8df6
bp 8e50
bp 9364
bp 9374
bp 93a9
bp 9403
bp 9939
bp 996b
bp 9a61
bp 9a83
bp 9a9a
bp 9b13
bp a021
bp a039
bp a111
bp a15c
bp a1cd
bp a1f0
bp a24d
bp ae1e
bp ae3c
bp 8070
bp 8084
bp 8096
bp 80ba
bp 8212
bp 8226
bp 8238
bp 825c
bp 850c
bp 85f1
bp 86df
bp 8715
bp 90e4
bp 91d3
bp 92c1
bp 92f7
bp 9ce6
bp 9dd5
bp 9ec3
bp 9ef9
bp a746
bp a75f
bp a76b
bp ada9
bp b726
bp b9c1
bp 8081
bp 9e5d
bp 9ebb
bp ab48
bp abd2
bp ac0d
bp b1e8
bp b272
bp b2ad
bp b888
bp b912
bp b955
bp ba3f
bp 9a99
bp 9aad
bp 9c3f
bp 9c53
bp 9ca0
bp 9fb2
bp 9fc6
bp a1be
bp a1d2
bp a21f
bp a5da
bp a602
bp a62a
bp a652
bp a67a
bp a6e8
bp a71a
bp a7d4
bp a813
bp a9f7
bp b381
bp b3d7
bp b421
bp b434
bp a1c7
bp a27e
bp a44b
bp a4d5
bp a510
bp 2ffc
bp 32dc
bp 3661
bp 3da1
bp 48e3
bp 493a
bp 72ff








809b
80fd
811c
8185
8424
8542
8561
8a61
8b8b
8baa
947b
94bb
95cf
9604
9735
9c13
9c53
9d70
9da5
9f12
a3ea
a42a
a547
a57c
a6e9
abd8
ac17
ad34
ad69
ae9a
b266
b2a5
b3c2
b3f7
b528
b944
b955
b96b
b989
b999
b9a9
ba57
82ed
82fd
830e
8ac0
8ad0
8c58
8c68
8db1
8dc1
8df6
8e50
9364
9374
93a9
9403
9939
996b
9a61
9a83
9a9a
9b13
a021
a039
a111
a15c
a1cd
a1f0
a24d
ae1e
ae3c
8070
8084
8096
80ba
8212
8226
8238
825c
850c
85f1
86df
8715
90e4
91d3
92c1
92f7
9ce6
9dd5
9ec3
9ef9
a746
a75f
a76b
ada9
b726
b9c1
8081
9e5d
9ebb
ab48
abd2
ac0d
b1e8
b272
b2ad
b888
b912
b955
ba3f
9a99
9aad
9c3f
9c53
9ca0
9fb2
9fc6
a1be
a1d2
a21f
a5da
a602
a62a
a652
a67a
a6e8
a71a
a7d4
a813
a9f7
b381
b3d7
b421
b434
a1c7
a27e
a44b
a4d5
a510
2ffc
32dc
3661
3da1
48e3
493a
72ff



It looks to me as though this is going to be an issue with the sprite multiplexing. This is when the sprites are "stamped" on top of the background image to produce the final image which is then rasterised. At some points it looks as though the mask data (data used to indicate which parts of the sprites are visible and which are transparent and should let the background show through) is actually being rasterised.

I'd be suspecting things like '245s (buffers which gate the ROMs on and off the cpu bus), '166 (shift registers, sometimes used to mux the sprites into the data stream that makes up the display) and '139s (multiplexers which control whether the data should be read from the background image RAM or sprite RAM) around the sprite data. You should be able to tell from MAWS what ROMS hold the sprites. In fact, I've just gone and looked and found this:

ROM_REGION( 0x40000, "gfx3", 0 )
    ROM_LOAD( "bd-08.5a",   0x00000, 0x10000, CRC(e2f17438) SHA1(3e5fdae07d40febedc59c7c7c4d9c6f0d72b58b5) )    /* sprites */
    ROM_LOAD( "bd-07.4a",   0x10000, 0x10000, CRC(5fccbd27) SHA1(33c55aa9c12b3121ca5c3b4c39a9b152b6946461) )
    ROM_LOAD( "bd-10.9a",   0x20000, 0x10000, CRC(fc33ccc6) SHA1(d492626a88565c2626f98ecb1d74535f1ad68e4c) )
    ROM_LOAD( "bd-09.8a",   0x30000, 0x10000, CRC(f449de01) SHA1(f6b40e9eb2471b89c42ab84f4214295d284db0c3) )
The key data is that in red - those should match up with ROM labels.
(I got this data by googling MAWS, then entering the game name, following the link at the top for the game, clicking the link for the game driver which will be a filename ending in .c and then clicking the source: link on the final page. Scroll down and you can see the memory map and which ROMs are loaded into what memory addresses. Happily, most of the MAME drivers indicate what type of data is concerned.) All of that led me to
http://maws.mameworld.info/maws/mamesrc/src/mame/drivers/blktiger.c
So, I'd be looking at any chips of those type which are nearby the above ROMs. You might have to use a continuity tester (or visual trace) to trace the data lines from the sprite roms to the logic as they could be on separate boards.
Best bet is to google the datasheets for those 3 logic chips and have a read, then with the datasheets in hand use your logic probe to test each pin. It'll start becoming obvious where you should expect data (pulses on the probe) and give you clues when you don't see it, either a static high or low. In the datasheets the symbol / means active low. For example, /RESET is active low, so in normal use the game will dip it low at startup, then hold the line high unless it needs to reset the game.
Just one caveat to mention - I'm on a conf call whilst writing this and I occasionally have to speak so I may have got the specific 74 series IC numbers wrong as I wrote them off the top of my head, plus various manufacturers accomplished this in different ways using different logic. Regardless, you know which ROMs hold the sprite data so locate them, locate the logic which is attached to them, get the datasheets and get probing to see what activity you can find. Sadly, this is probably not going to be a good starter board as having schematics (and a single PCB) would make things a lot simpler for people to help. But let's give it a bash first :)
tim
PS Obviously, follow the other suggestions about checking that everything is seated cleanly and that you've not got oxide coatings on the ribbon cables or IC legs first before you start in-depth work like this. I've fixed a surprising number of faulty boards just by reinserting interboard connectors a few times to scrub the oxide coating.
PPS I'm currently writing some docs on how to start fixing things and have written some of the section that deals with sprites e.g. what they are, why they're used and so on. If I get time to polish it up I'll post that as knowing what a sprite is and why they're used is useful background. In very short summary, a sprite is data that is added to the bit stream that makes up the video just before it's converted into RGB signals. This means that if you disabled the sprites, you'd just see the background elements of the gfx.
The reason sprites are useful is because the sprite data is merged with the background and then sent to the raster (the display producing hardware) so having a sprite on the screen means it's not overwriting any of the RAM which holds the background image. This is beneficial because when you move a sprite, you don't have to replace the bits of background that were obscured by the sprite in its previous position as the sprite data was never "stamped" into the RAM holding the background image.
Imagine a game without sprites - when you moved your character you'd leave a trail of images behind. That would be unacceptable, so the game hardware would need to look where the character had been, rebuild the background image and then stamp the character into RAM at the new location. As soon as you move, it has to recheck the background image and rebuild it. This takes lots of CPU cycles which is bad.
Whereas using sprites all you need to do is enable the rasteriser (the bit which reads the video RAM and generates the image for the screen) to know when a sprite should be drawn. When it knows a sprite is to be drawn, the rasteriser flicks from reading the background image RAM to reading the sprite RAM, so the sprite appears in the video stream.
On the next frame, if you've moved the sprite you don't have to touch-up the background image RAM, you just tell the rasteriser that the sprite is now to be drawn at new coordinates. Blammo! Loads of CPU cycles saved and a lot less juggling of image data.
Finally, this is a terribly condensed explanation of what sprites are and how they work, but hopefully it's good enough to explain the concept.