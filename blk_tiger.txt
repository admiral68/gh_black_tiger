*****************************************************************************************
* GENERAL NOTES:                                                                        *
*****************************************************************************************

SCREEN SIZE: 256x224

JOYSTICK & BUTTON INPUT VALUES: e=1,w=2,d=4,u=8,f=10,j=20

Bank Switch: Write to IO $01

*****************************************************************************************
* GAME NOTES:                                                                           *
*****************************************************************************************

PLAYER SPRITE VARIABLE:

(0x3)   = Y POS HI

(0x8)   = X OFFSET(?) SCROLL VELOCITY?
(0x9)   = Y OFFSET(?) SCROLL VELOCITY?
(0xf)   = maybe action counter
(0x1c)  = deltax(?)
(0x1d)  = deltay(?)
(0x23)
(0x26)
(0x27)  =  counter: times cycled through (0xf)


ENEMY VARIABLE:

(IX+0x0) = alive flag? ($80 or not)
(IX+0x1) = x pos
(IX+0x3) = y pos
(IX+0x5) = sprite attr of tile
(IX+0x6) = animation x offset ($80 special case)
(IX+0x7) = animation y offset ($80 special case)
(IX+0x8) = something to do with X/Y (collision checking)
(IX+0x9) = something to do with X/Y (collision checking)

(IX+0xa) = animation duration!
(IX+0xb) = entity class
(IX+0xc) = bitflags (?) x8=UpdateSpriteXAndYLocationsAfterScroll, x1=has weapon(?), x2=can attack(?);0x10 = not dead, just hidden
(IX+0xd) = sprite touched by player function offset
(IX+0xe) = maybe health? (enemy only)

(IX+0xf) = maybe weapon damage inflicted on player

(IX+0x10) = maybe activate attack x distance(?)

(IX+0x11) = sprite anim table offset
(IX+0x12) = Sprite anim y offset hi(?)
(IX+0x13) = ROM Bank
(IX+0x14) = sprite facing flag(?) 0 = r, 1 = l
(IX+0x15) = character health points (enemy too?)
(IX+0x16) =
(IX+0x17) = Score offset!
(IX+0x18) = EC5C--???
(IX+0x19) =
(IX+0x1a) = sprite struct location
(IX+0x1c) = *ending animation bookmark
(IX+0x1d) =
(IX+0x1e) = current animation bookmark

(IX+0x20) = -> maybe related sprite variable ptr?
(IX+0x21) =


ORANGE SKELETON                         0x1
ORANGE SKELETON (2)                     0x2
PURPLE SKELETON                         0x3
BROWN ORC L1                            0x4
BROWN ORC L2                            0x5
BROWN ORC L3                            0x6
BROWN ORC R4/L4                         0x7
BROWN ORC L5/R5                         0x8
ORANGE MICHELIN MAN                     0x9
YELLOW MICHELIN MAN                     0xa
PURPLE MICHELIN MAN                     0xb
MAN-EATING YELLOW PLANT                 0xc
MAN-EATING PURPLE PLANT                 0xd
FIRETHROWER L1                          0xe
BLUE GOOP                               0xf
BLUE GOOP 4                             0x10
RED GOOP                                0x11
BLUE GOOP 7                             0x12
PURPLE WITCH                            0x13
RED WITCH                               0x14
NINJA                                   0x15
SPINNING COIN                           0x16
BAT                                     0x17
SNAKE                                   0x18
PURPLE BLOCK                            0x19
ORANGE BLOCK                            0x1a
DEMON                                   0x1b
LEVEL 03 DRAGON                         0x1c
LEVEL 06 DRAGON                         0x1d
LEVEL 08 DRAGON                         0x1e
LEVEL 05 WARTHOG BOSS                   0x1f
LEVEL 07 WARTHOG BOSS                   0x20
OLD MAN THAT GIVES ZENNY                0x21
OLD MAN THAT HAS SHOP (1)               0x22
OLD MAN THAT GIVES VITALITY             0x23
OLD MAN THAT GIVES MORE TIME            0x24
OLD MAN THAT GIVES ADVICE/SCULL         0x25
OLD MAN THAT GIVES GRATITUDE            0x26
OLD MAN THAT GIVES ADVICE/SEEK          0x27
OLD MAN THAT HAS SHOP (2)               0x28
FALLING ROCK                            0x29

0_POINTS        0x0
5_POINTS
10_POINTS
15_POINTS
20_POINTS
30_POINTS
50_POINTS
80_POINTS
100_POINTS
150_POINTS
200_POINTS
300_POINTS
500_POINTS
800_POINTS
1000_POINTS
1500_POINTS
2000_POINTS
3000_POINTS
5000_POINTS
7000_POINTS
10000_POINTS
15000_POINTS
20000_POINTS
30000_POINTS
40000_POINTS
50000_POINTS
60000_POINTS
70000_POINTS
80000_POINTS
90000_POINTS
100000_POINTS

                             PLAYER_TOUCH_OTHER_SPRITE_ACTION_JUMP_TABLE     XREF[1]:     Maybe_CheckEnemyTouchesPlayer:474b(*)
0x0     NullFunction01
0x1     NullFunction01
0x2     NullFunction02
0x3     PlayerTakesZennyCoin1Point
0x4     PlayerTakesZennyCoin5Points
0x5     PlayerTakesZennyCoin10Points
0x6     PlayerTakesZennyCoin50Points
0x7     PlayerTakesZennyCoin100Points
0x8     PlayerTakesZennyCoin500Points
0x9     PlayerTakesZennyCoin1000Points
0xa     PlayerTakesKey
0xb     PlayerTakesHourglass
0xc     NullFunction01
0xd     NullFunction01
0xe     NullFunction01
0xf     NullFunction01
0x10    Maybe_UseKey01
0x11    MaybePlayerOpensTreasureChestGetsZennyCoins
0x12    PlayerOpensChestTakesTreasure100Points
0x13    PlayerOpenChestTakesTreasure500Points
0x14    PlayerTakesTreasure1000Points
0x15    MaybePlayerOpensTreasureChestGetsVitality
0x16    Maybe_FinishThisSpriteAnimation
0x17    PlayerTakesShurikenExtraGuyPrize
0x18    PlayerTakesStarArmor
0x19    PlayerTakesPOWPrize
0x1a    PlayerTakesShieldFor30SecondsOfTime
0x1b    PlayerTakesItemFor1000Points
0x1c    PlayerTakesBarrelArmorPrize
0x1d    PlayerTakesStrawberryArmorPrize
0x1e    PlayerTakesItemFor1000Points
0x1f    PlayerTakesDragonflyFor5000Points
0x20    PlayerTakesElephantPrizeFor500Zenny
0x21    PlayerTakesPumpkinSpiderPrizeFor7000Points
0x22    Maybe_DoDungeon
0x23    PlayImpactSound
0x24    AddFirethrower02
0x25    Maybe_NinjaSomething
0x26    Maybe_UseAPotion
0x27    Maybe_DamagePlayer
0x28    AddPurpleFireSprite
0x29    Maybe_StartNewOrangeFire01
0x2a    Maybe_UseAPotion02
0x2b    Maybe_UseAPotion03
0x2c    PlayActivateOldManSound
0x2d    PlayActivateOldManSound
0x2e    PlayActivateOldManSound
0x2f    PlayActivateOldManSound
0x30    PlayActivateOldManSound
0x31    PlayActivateOldManSound
0x32    PlayActivateOldManSound
0x33    PlayActivateOldManSound
0x34    Maybe_UpdateBat


                             SOUNDS_TABLE                                    XREF[1]:     Maybe_PlaySoundEffect:020e(*)
        ram:0dc1 00 ff           dw         FF00h                                            Sound 0: FF stops music playing
        ram:0dc3 49 0e           dw         PLAYER_LOSES_VITALITY_SOUND                      = 8Fh
        ram:0dc5 9e 0e           dw         PLAYER_DEATH_SOUND                               = 8Fh
        ram:0dc7 7f 0f           dw         ENEMY_INJURED_BLOOP_SOUND                        = CFh
        ram:0dc9 d4 0f           dw         ENEMY_DEFEATED_SOUND                             = CFh
        ram:0dcb fe 0f           dw         ITEM_TAKEN_SOUND                                 = 88h
        ram:0dcd 7b 10           dw         PLAYER_TAKES_ZENNY_COIN_SOUND                    = 88h
        ram:0dcf f5 10           dw         FIRE_PILLAR_WARNING_SOUND                        = 88h
        ram:0dd1 5e 11           dw         POT_BREAKS_REVEALS_COIN_SOUND                    = C8h
        ram:0dd3 c7 11           dw         FIRE_PILLAR_SOUND                                = C8h
        ram:0dd5 08 12           dw         GAS_JET_SOUND                                    = C8h
        ram:0dd7 32 12           dw         WEAPON_CLASH_METALLIC_BATTLE_SOUND               = 88h
        ram:0dd9 84 12           dw         KILL_BAT_SOUND                                   = C8h
        ram:0ddb ae 12           dw         PLAYER_EARNS_EXTRA_LIFE_SOUND                    = 8Fh
        ram:0ddd 64 13           dw         POT_BREAKS_SOUND                                 = 88h
        ram:0ddf bc 13           dw         PLAYER_DISCOVERS_TREASURE_SOUND                  = C8h
        ram:0de1 86 14           dw         BIG_BOSS_HIT_SOUND                               10
        ram:0de3 b0 14           dw         TIME_EXPIRING_SOUND                              = 81h
        ram:0de5 ee 14           dw         PLAYER_GETS_ITEM_FROM_OLD_MAN_SOUND              = 88h
        ram:0de7 cc 15           dw         BOOM_EXPLOSION_SOUND                             = C8h
        ram:0de9 0d 16           dw         UNKNOWN_ALARM_SOUND                              = 81h
        ram:0deb 4e 16           dw         IMPACT_SOUND                                     = C8h
        ram:0ded 78 16           dw         CLASH_SPINNING_COIN_SOUND                        = C8h
        ram:0def a2 16           dw         PLAYER_LOSES_ARMOR_SOUND                         = 8Fh
        ram:0df1 08 17           dw         MICHELIN_MAN_FIREBREATHING_SOUND                 = C8h
        ram:0df3 35 17           dw         FIRETHROWER_TAUNT_SOUND                          = C8h
        ram:0df5 b2 17           dw         PLAYER_CLIMB_SOUND                               = 88h
        ram:0df7 c8 17           dw         FLAIL_EMPTY_HIT_SOUND                            = 88h
        ram:0df9 de 17           dw         PLAYER_LANDS_ON_PLATFORM_SOUND                   = 88h
        ram:0dfb 1c 18           dw         PLAYER_ASCENDS_DURING_CUTSCENE_SOUND             = 88h
        ram:0dfd 32 18           dw         PLAYER_GRABS_LADDER_SOUND                        = 88h
        ram:0dff 01 ff           dw         FF01h                                            1f: stops playing music
        ram:0e01 10 1b           dw         COIN_OR_CREDIT_ADDED_SOUND                       = 4Fh    O
        ram:0e03 8c 1b           dw         LEVEL_1_MUSIC                                    Level 1 music
        ram:0e05 de 1f           dw         LEVEL_2_MUSIC                                    = 06h
        ram:0e07 ef 23           dw         LEVEL_3_MUSIC                                    = 06h
        ram:0e09 b7 27           dw         LEVEL_4_MUSIC                                    = 06h
        ram:0e0b 27 2d           dw         LEVEL_5_MUSIC                                    = 06h
        ram:0e0d 07 32           dw         LEVEL_6_MUSIC                                    = 06h
        ram:0e0f c4 35           dw         LEVEL_7_MUSIC                                    = 06h
        ram:0e11 7c 3a           dw         LEVEL_8_MUSIC                                    Level 8 music
        ram:0e13 cb 3f           dw         BOSS_MUSIC_01                                    = 06h
        ram:0e15 f5 41           dw         FIGHT_DRAGON_MUSIC_01                            = 06h
        ram:0e17 8b 44           dw         FIGHT_DRAGON_MUSIC_02                            = 06h
        ram:0e19 70 47           dw         OLD_MAN_SHOP_MUSIC                               = 06h
        ram:0e1b 7e 49           dw         DUNGEON_MUSIC_01                                 = 06h
        ram:0e1d 96 4b           dw         ENTER_INITIALS_MUSIC                             = 06h
        ram:0e1f 9d 51           dw         AFTER_ENTER_INITIALS_MUSIC                       = 06h
        ram:0e21 82 52           dw         INTRO_MUSIC                                      30
        ram:0e23 48 54           dw         GAME_OVER_MUSIC                                  = 06h
        ram:0e25 13 55           dw         SUCCESSFULLY_FINISH_LEVEL_MUSIC                  = 06h
        ram:0e27 fa 55           dw         FINISH_LEVEL_8_MUSIC                             = 06h
        ram:0e29 a4 5e           dw         CONTINUE_MUSIC                                   = 06h
        ram:0e2b 51 60           dw         MAYBE_PERFECT_BONUS_MUSIC                        = 06h
        ram:0e2d d2 60           dw         UNKNOWN_FANFARE_MUSIC                            = 06h
        ram:0e2f 6d 61           dw         UNKNOWN_FANFARE_MUSIC_02                         = 06h
        ram:0e31 04 ff           dw         FF04h                                            38 stops music playing
        ram:0e33 36 62           dw         UNKNOWN_FANFARE_MUSIC_03                         = 06h
        ram:0e35 5c 18           dw         FLAIL_HIT_SOUND                                  = 88h
        ram:0e37 86 18           dw         FALLING_SOUND                                    = C1h
        ram:0e39 9c 18           dw         BOUNCING_SOUND_(LOOPS)                           = C1h
        ram:0e3b c9 18           dw         OLD_MAN_TALKING_SOUND                            = C8h
        ram:0e3d 57 19           dw         OLD_MAN_TALKING_SOUND_02                         = C8h
        ram:0e3f a9 19           dw         DRAGON_DIE_SOUND                                 = 90h
        ram:0e41 90 1a           dw         MAYBE_BLOCK_BOUNCE_UP_SOUND                      40
        ram:0e43 ba 1a           dw         FALLING_SOUND_02                                 = C8h
        ram:0e45 d0 1a           dw         BOSS_HIT_SOUND                                   = C8h
        ram:0e47 e6 1a           dw         DRAGON_SPEW_FIRE_SOUND                           43 might be the last sound



*****************************************************************************************
* VIDEO RAM/MAP NOTES:                                                                  *
*****************************************************************************************

VIDEO RAM:

WORD -- LOCATION (X = MSB) (Y = LSB) -- 10 00 = top left of screen;    10 F0 = top right of screen
                                        E0 00 = bottom left of screen; E0 F0 = bottom right of screen

c000 -- BG VIDEO RAM... 16x8 tiles (16 w 8 h)
LW+(BITS0-3 of HW) = TILE SELECTION
(BITS4-6 of HW) = PALETTE
BIT 7 of HW: FLIP HORIZONTALLY


 void gfx_element::transpen(bitmap_ind16 &dest, const rectangle &cliprect,
        u32 code, u32 color, int flipx, int flipy, s32 destx, s32 desty,
        u32 trans_pen)                                       

SHOWS VIDEO

        ram:236c 3e 80           LD         A,0x80                                           Finally enable screen?? (Shut of
        ram:236e cd 86 03        CALL       ClearVideoControlValue                           Yes! Pops all elements onto screen


*****************************************************************************************
* STACK NOTES:                                                                          *
*****************************************************************************************

FIRST BYTE = 0 : FREE
FIRST BYTE = 1 : ACTIVE
FIRST BYTE = 2 : DONE
FIRST BYTE = 4 : SWITCH TO THIS STACK
FIRST BYTE = 8 : JUMP TO BC

STACKS:
        ram:01b4 3e 00           LD         A,0x0
        ram:01b6 01 45 08        LD         BC,Maybe_InitializeGraphics
        ram:09fe 01 58 11        LD         BC,Maybe_SetupGameplay
    Bank07::a9df 01 e8 a9        LD         BC,DoSwitchesTest

        ram:23c8 3e 01           LD         A,0x1
        ram:23ca 01 20 2b        LD         BC,DoTimeRemaining
        ram:5177 01 de 51        LD         BC,DrawSelectionBox
        ram:6492 01 94 65        LD         BC,CheckUserSelectDuringShopping

        ram:235c 3e 02           LD         A,0x2
        ram:235e 01 93 27        LD         BC,Maybe_UpdateDungeonMap
        ram:517f 01 76 52        LD         BC,FUN_ram_5276
        ram:649a 01 3a 66        LD         BC,CheckPlayerMakesPurchaseSelection

        ram:2727 3e 03           LD         A,0x3
        ram:2729 01 42 27        LD         BC,FlashPoisonWarningOnScreen
        ram:2732 01 5d 27        LD         BC,FlashLoseDirectionWarningOnScreen
        ram:273b 01 78 27        LD         BC,DrawPoisonAndLoseDirectionStringsToScreen

        ram:2364 3e 04           LD         A,0x4
        ram:2366 01 12 2a        LD         BC,Maybe_UpdateDungeonMapTiles
    Bank07::b925 01 07 bf        LD         BC,DrawOrangeDragonInIntro

        ram:095a 3e 05           LD         A,0x5
        ram:095c 01 e6 13        LD         BC,DoTestScreenActions

        ram:0952 3e 06           LD         A,0x6
        ram:0954 01 b5 09        LD         BC,Maybe_PlayerPutsCoinInSlot

        ram:0b85 3e 07           LD         A,0x7
        ram:0b87 01 3d 11        LD         BC,EraseInsertCoinAndPrintFiveHighestScores

    Bank02::9b0b 3e 08           LD         A,0x8
    Bank02::9b0d 01 b4 2b        LD         BC,DoTimeRemaining::contd

*****************************************************************************************
* MAME DEBUGGING NOTES:                                                                 *
*****************************************************************************************

     --------------------
     * HOW TOS:         *
     --------------------

TO: GET TO A LEVEL IN MAME/BLK TIGER
1: bp 1e7a;bp 231d;bp 22f5;bp 22fb;bp 22ec;bp 2269;bp 227a
2: Key 9; Key 1
3: 1e7a: a=(0,1,2,3,4,5,6,7);F5
4: 2269: F3b6=(0,1,2,3,4,5,6,7,8);F3A1=(0,1,2,3,4,5,6,7);F5
5: 227a: de=800;f5
6: hit fire button to bypass intro
7: 22ec: a=73;f5
8: 22f5: de=3200;f5
9: 22fb: a=8;F3AC=(0,1,2,3,4);f5
10: 231d save state here

     --------------------
     * OTHER:           *
     --------------------

    m_scroll_x[0] = 0;
    m_scroll_x[1] = 0;
    m_scroll_y[0] = 0;
    m_scroll_y[1] = 0;
    m_scroll_bank = 0;
    m_screen_layout = 0;

BP: 1B4 (allows entry to test menu; PC=1ac)
  : 5501 (change a => 1-7 for changing coin award from killing enemy)




 ) : standard parentheses
++ -- : postfix increment/decrement
++ -- ~ ! - + b@ w@ d@ q@ : prefix inc/dec, binary NOT, logical NOT, unary +/-, memory access
* / % : multiply, divide, modulus
+ - : add, subtract
<< >> : shift left/right
< <= > >= : less than, less than or equal, greater than, greater than or equal
== != : equal, not equal
& : binary AND
^ : binary XOR
| : binary OR
&& : logical AND
|| : logical OR
= *= /= %= += -= <<= >>= &= |= ^= : assignment
, : separate terms, function parameters

DEBUGGER COMMANDS:

rpset
rp[set] {<condition>}[,<action>]]

Sets a new registerpoint which will be triggered when <condition> is met. The condition must be specified between curly braces to prevent the condition from being evaluated as an assignment.
The optional <action> parameter provides a command that is executed whenever the registerpoint is hit. Note that you may need to embed the action within braces { } in order to prevent commas and semicolons from being interpreted as applying to the rpset command itself.
Each registerpoint that is set is assigned an index which can be used in other registerpoint commands to reference this registerpoint.

Examples:

rp {PC==0150}

Set a registerpoint that will halt execution whenever the PC register equals 0x150.

temp0=0; rp {PC==0150},{temp0++; g}

Set a registerpoint that will increment the variable temp0 whenever the PC register equals 0x0150.

rp {temp0==5}

Set a registerpoint that will halt execution whenever the temp0 variable equals 5.

bpset
bp[set] <address>[,<condition>[,<action>]]

Sets a new execution breakpoint at the specified <address>.
The optional <condition> parameter lets you specify an expression that will be evaluated each time the breakpoint is hit. If the result of the expression is true (non-zero), the breakpoint will actually halt execution; otherwise, execution will continue with no notification.
The optional <action> parameter provides a command that is executed whenever the breakpoint is hit and the <condition> is true. Note that you may need to embed the action within braces { } in order to prevent commas and semicolons from being interpreted as applying to the bpset command itself. Each breakpoint that is set is assigned an index which can be used in other breakpoint commands to reference this breakpoint.

bplist -- lists all the breakpoints



source
source <filename>

The source command reads in a set of debugger commands from a file and executes them one by one, similar to a batch file.

Examples:

source break_and_trace.cmd

Reads in debugger commands from break_and_trace.cmd and executes them.



statesave
statesave[ss] <filename>

The statesave command creates a save state at this exact moment in time. The given state file gets written to the standard state directory (sta), and gets .sta added to it - no file extension necessary. All output for this command is currently echoed into the running machine window.

Examples:

statesave foo

Writes file 'foo.sta' in the default state save directory.



stateload
stateload[sl] <filename>

The stateload command retrieves a save state from disk. The given state file gets read from the standard state directory (sta), and gets .sta added to it - no file extension necessary. All output for this command is currently echoed into the running machine window. Previous memory and PC tracking statistics are cleared.

Examples:

stateload foo

Reads file 'foo.sta' from the default state save directory.



save[{d|i}] <filename>,<address>,<length>[,<cpu>]

The save/saved/savei commands save raw memory to the binary file specified in the <filename> parameter.
'save' will save program space memory, while 'saved' will save data space memory and 'savei' will save I/O space memory.
<address> indicates the address of the start of saving, and <length> indicates how much memory to save. The range <address> through <address>+<length>-1 inclusive will be output to the file.
You can also save memory from another CPU by specifying the <cpu> parameter.

Examples:

save venture.bin,0,10000

Saves addresses 0-ffff in the current CPU to the binary file 'venture.bin'.

saved harddriv.bin,3000,1000,3

Saves data memory addresses 3000-3fff from CPU #3 to the binary file 'harddriv.bin'.



load[{d|i}] <filename>,<address>[,<length>,<cpu>]

The load/loadd/loadi commands load raw memory from the binary file specified in the <filename> parameter.
'load' will load program space memory, while 'loadd' will load data space memory and 'loadi' will load I/O space memory.
<address> indicates the address of the start of saving, and <length> indicates how much memory to load. The range <address> 
through <address>+<length>-1 inclusive will be read in from the file.

If you specify <length> = 0 or a length greater than the total length of the file it will load the entire contents of the file and no more.
You can also load memory from another CPU by specifying the <cpu> parameter.

NOTE: This will only actually write memory that is possible to overwrite in the Memory Window

Examples:

load venture.bin,0,10000

Loads addresses 0-ffff in the current CPU from the binary file 'venture.bin'.

loadd harddriv.bin,3000,1000,3

Loads data memory addresses 3000-3fff from CPU #3 from the binary file 'harddriv.bin'.


*****************************************************************************************
* MAME NOTES:                                                                           *
*****************************************************************************************

ROM_REGION( 0x40000, "gfx3", 0 )
    ROM_LOAD( "bd-08.5a",   0x00000, 0x10000, CRC(e2f17438) SHA1(3e5fdae07d40febedc59c7c7c4d9c6f0d72b58b5) )    /* sprites */
    ROM_LOAD( "bd-07.4a",   0x10000, 0x10000, CRC(5fccbd27) SHA1(33c55aa9c12b3121ca5c3b4c39a9b152b6946461) )
    ROM_LOAD( "bd-10.9a",   0x20000, 0x10000, CRC(fc33ccc6) SHA1(d492626a88565c2626f98ecb1d74535f1ad68e4c) )
    ROM_LOAD( "bd-09.8a",   0x30000, 0x10000, CRC(f449de01) SHA1(f6b40e9eb2471b89c42ab84f4214295d284db0c3) )

static GFXDECODE_START( gfx_blktiger )
    GFXDECODE_ENTRY( "gfx1", 0, charlayout,   0x300, 32 )   /* colors 0x300-0x37f */
    GFXDECODE_ENTRY( "gfx2", 0, spritelayout, 0x000, 16 )   /* colors 0x000-0x0ff */
    GFXDECODE_ENTRY( "gfx3", 0, spritelayout, 0x200,  8 )   /* colors 0x200-0x27f */
GFXDECODE_END







Breakpoints:
ROM:$09db => IPT_SERVICE1 on IN0
ROM:$0aa7 => After write screen warning
ROM:$0b44
ROM:$00EA => Dynamic breakpoints

$411
$13F1

$33d -- end of "wait"
$346 --- first screen ends

$b7f (after clearing scores)
$b97

EA
346
411
bpset 1442,a==$40
33D
22B8



bp 65,a != 0
bp 6a,a != 0
bp 1442,a==$40



bp b3
bp ea
bp 3c9
bp 3cf
bp 346
bp 408
bp 411
bp 1d6d
bp 1dfb
bp 235c
bp 2364
bp 239e
bp 27c3
bp 301e
bp 32C7
bp 32FE
bp 3683
bp 3dc3
bp 47e9
bp 481e
bp 8446
bp 8800
bp 8D0E

bp 1352
bp 20ec

bp 683
bp 2343



STRUCT:
0:
1:attr (color=AND7;FLIPX=AND8)
2:y-6
3:x-128



ID\  En  CPU                   Address       Condition         Action
 1   O   :maincpu              043B
 2   O   :maincpu              0466
 4   O   :maincpu              1CD9
 5   O   :maincpu              1B49
 6   X   :maincpu              1E25
 7   X   :maincpu              1E2C
12   X   :maincpu              01B4
16   O   :maincpu              03D0
18   O   :maincpu              14AF
1A   X   :maincpu              550B
1D   O   :maincpu              30C8
1F   O   :maincpu              1BD0
20   X   :maincpu              8625
21   X   :maincpu              86A1
22   X   :maincpu              86B4
23   X   :maincpu              86B9
24   X   :maincpu              86BF
25   X   :maincpu              86C8
26   X   :maincpu              86D3
27   X   :maincpu              06DA
28   O   :maincpu              07E8
29   O   :maincpu              07F0
2A   X   :maincpu              07F9
2B   O   :maincpu              0803
2C   X   :maincpu              86BC
2D   O   :maincpu              A1B5
2E   O   :maincpu              1932
2F   X   :maincpu              1BFB
30   X   :maincpu              8118          a > 0
31   X   :maincpu              868F          a>0
32   X   :maincpu              195C
33   O   :maincpu              1CC7
34   X   :maincpu              7138
35   X   :maincpu              714A
36   X   :maincpu              7147
37   X   :maincpu              719A
38   X   :maincpu              714B
39   X   :maincpu              719B
3A   X   :maincpu              ACEF
3B   X   :maincpu              AD40
3C   X   :maincpu              AD91
3D   O   :maincpu              B924

   ID\  En  CPU                   Space      Addresses         Type   Condition
 1   X   :maincpu              program    2A02-2A02         read
 2   O   :maincpu              program    F955-F955         write
 3   O   :maincpu              program    ECAC-ECAC         write
 4   O   :maincpu              program    F940-F940         write
 5   O   :maincpu              program    56DA-5711         read
 6   O   :maincpu              program    E100-E100         write
 7   O   :maincpu              program    FE00-FFFF         write
 8   O   :maincpu              program    E100-E101         read
 9   X   :maincpu              program    E0E7-E0E7         write
 A   X   :maincpu              program    8286-8286         read
 B   X   :maincpu              program    827E-827E         read



bp ea
bp 3c4
bp 3c9
bp 3cf
bp 411,hl!=$1429 && hl!=$144D
bp 1d6d
bp 1dfb
bp 27c3
bp 301e
bp 32fe,hl!=$9456 && hl!=$96c2
bp 3683
bp 3dc3
bp 72ea
bp a1e9





ID\  En  CPU                   Address       Condition         Action
 1   X   :maincpu              00EA
 2   X   :maincpu              0346
 3   X   :maincpu              0411
 4   X   :maincpu              1442          a==$40
 5   O   :maincpu              2F2D
 7   O   :maincpu              32C7
 8   X   :maincpu              8446
 9   X   :maincpu              8800
 A   X   :maincpu              8D0E
 D   X   :maincpu              1939
 E   X   :maincpu              1E25
 F   X   :maincpu              8446
11   X   :maincpu              862B
14   X   :maincpu              86BF
15   X   :maincpu              86C5
17   X   :maincpu              24A0


bp a5;


19/8/2021:

bp 2181;bp 219f;bp 2a1f;bp 3bad;bp 4546;bp 47bc;bp 47d9;bp 4faf;bp b9c;bp 1f1e;bp 2040;bp 23e8;bp 2721;bp 534a;bp 5a44
wp e041,2,r;bp 235c



ID   En  CPU                   Address\      Condition         Action
 1   X   :maincpu              00EA
 5   X   :maincpu              033D
 2   X   :maincpu              0346
20   X   :maincpu              03ED
21   X   :maincpu              03EE
22   X   :maincpu              03FC
 3   X   :maincpu              0411
40   X   :maincpu              06DA
43   X   :maincpu              07F6
 4   X   :maincpu              1442          a==$40
28   X   :maincpu              195C
2A   X   :maincpu              198F
29   X   :maincpu              1B49
2D   X   :maincpu              1B6F
2E   X   :maincpu              1B96
53   X   :maincpu              1BFB
2C   X   :maincpu              1DFC
2F   X   :maincpu              1E25
 7   X   :maincpu              22E1
 8   X   :maincpu              230B
1F   X   :maincpu              2343
25   X   :maincpu              237C
13   X   :maincpu              240E          a != 0
15   X   :maincpu              2418
1B   X   :maincpu              266E
1C   X   :maincpu              26B2
1E   X   :maincpu              26B6
1D   X   :maincpu              26FA
24   X   :maincpu              2793
23   X   :maincpu              2A12
63   X   :maincpu              2A2F
64   X   :maincpu              2A50
66   X   :maincpu              2A53
65   X   :maincpu              2AF5
26   X   :maincpu              2B20
5D   X   :maincpu              2B3B
5F   X   :maincpu              2B47
60   X   :maincpu              2B4F
62   X   :maincpu              2B52
61   X   :maincpu              2B77
5E   X   :maincpu              2B83
4B   X   :maincpu              2ED8
4E   X   :maincpu              2F07
4F   X   :maincpu              2F16
50   O   :maincpu              32C7
32   X   :maincpu              800C
30   X   :maincpu              803B
54   X   :maincpu              806A
55   X   :maincpu              809B
35   X   :maincpu              80A9
36   X   :maincpu              80F0
37   X   :maincpu              811E
33   X   :maincpu              8446
5B   X   :maincpu              85BF
57   X   :maincpu              8625
38   X   :maincpu              862B
39   X   :maincpu              863B
3A   X   :maincpu              8665
3E   X   :maincpu              86BF
3F   X   :maincpu              86C5
3B   X   :maincpu              86C8
42   X   :maincpu              86D3
58   X   :maincpu              8800
59   X   :maincpu              8AEA
5A   X   :maincpu              8D0E
5C   X   :maincpu              909B
46   X   :maincpu              90A5
48   X   :maincpu              A0CB
4A   X   :maincpu              A1B8




bp a547; bp a57c


bp a547; bp a57c; bp a6e9; bp abd8; bp ac17; bp ad34; bp ad69; bp ae9a; bp b266; bp b2a5; bp b3c2; bp b3f7; bp b528; bp b944; bp b955; bp b96b; bp b989; bp b999; bp b9a9; bp ba57; bp 82ed; bp 82fd; bp 830e; bp 8ac0; bp 8ad0; bp 8c58; bp 8c68;




bp 809b
bp 80fd
bp 811c
bp 8185
bp 8424
bp 8542
bp 8561
bp 8a61
bp 8b8b
bp 8baa
bp 947b
bp 94bb
bp 95cf
bp 9604
bp 9735
bp 9c13
bp 9c53
bp 9d70
bp 9da5
bp 9f12
bp a3ea
bp a42a
bp a547
bp a57c
bp a6e9
bp abd8
bp ac17
bp ad34
bp ad69
bp ae9a
bp b266
bp b2a5
bp b3c2
bp b3f7
bp b528
bp b944
bp b955
bp b96b
bp b989
bp b999
bp b9a9
bp ba57
bp 82ed
bp 82fd
bp 830e
bp 8ac0
bp 8ad0
bp 8c58
bp 8c68
bp 8db1
bp 8dc1
bp 8df6
bp 8e50
bp 9364
bp 9374
bp 93a9
bp 9403
bp 9939
bp 996b
bp 9a61
bp 9a83
bp 9a9a
bp 9b13
bp a021
bp a039
bp a111
bp a15c
bp a1cd
bp a1f0
bp a24d
bp ae1e
bp ae3c
bp 8070
bp 8084
bp 8096
bp 80ba
bp 8212
bp 8226
bp 8238
bp 825c
bp 850c
bp 85f1
bp 86df
bp 8715
bp 90e4
bp 91d3
bp 92c1
bp 92f7
bp 9ce6
bp 9dd5
bp 9ec3
bp 9ef9
bp a746
bp a75f
bp a76b
bp ada9
bp b726
bp b9c1
bp 8081
bp 9e5d
bp 9ebb
bp ab48
bp abd2
bp ac0d
bp b1e8
bp b272
bp b2ad
bp b888
bp b912
bp b955
bp ba3f
bp 9a99
bp 9aad
bp 9c3f
bp 9c53
bp 9ca0
bp 9fb2
bp 9fc6
bp a1be
bp a1d2
bp a21f
bp a5da
bp a602
bp a62a
bp a652
bp a67a
bp a6e8
bp a71a
bp a7d4
bp a813
bp a9f7
bp b381
bp b3d7
bp b421
bp b434
bp a1c7
bp a27e
bp a44b
bp a4d5
bp a510
bp 2ffc
bp 32dc
bp 3661
bp 3da1
bp 48e3
bp 493a
bp 72ff








809b
80fd
811c
8185
8424
8542
8561
8a61
8b8b
8baa
947b
94bb
95cf
9604
9735
9c13
9c53
9d70
9da5
9f12
a3ea
a42a
a547
a57c
a6e9
abd8
ac17
ad34
ad69
ae9a
b266
b2a5
b3c2
b3f7
b528
b944
b955
b96b
b989
b999
b9a9
ba57
82ed
82fd
830e
8ac0
8ad0
8c58
8c68
8db1
8dc1
8df6
8e50
9364
9374
93a9
9403
9939
996b
9a61
9a83
9a9a
9b13
a021
a039
a111
a15c
a1cd
a1f0
a24d
ae1e
ae3c
8070
8084
8096
80ba
8212
8226
8238
825c
850c
85f1
86df
8715
90e4
91d3
92c1
92f7
9ce6
9dd5
9ec3
9ef9
a746
a75f
a76b
ada9
b726
b9c1
8081
9e5d
9ebb
ab48
abd2
ac0d
b1e8
b272
b2ad
b888
b912
b955
ba3f
9a99
9aad
9c3f
9c53
9ca0
9fb2
9fc6
a1be
a1d2
a21f
a5da
a602
a62a
a652
a67a
a6e8
a71a
a7d4
a813
a9f7
b381
b3d7
b421
b434
a1c7
a27e
a44b
a4d5
a510
2ffc
32dc
3661
3da1
48e3
493a
72ff



