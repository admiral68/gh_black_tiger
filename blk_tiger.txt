*****************************************************************************************
* GENERAL NOTES:                                                                        *
*****************************************************************************************

SCREEN SIZE: 256x224

JOYSTICK & BUTTON INPUT VALUES: e=1,w=2,d=4,u=8,f=10,j=20

Bank Switch: Write to IO $01


        ram:01a6 db 03           IN         A,(IO_DSW0_COIN_LOCKOUT_W)
        ram:01a8 e6 80           AND        0x80
        ram:01aa 20 08           JR         NZ,StartGame

This is a good way to see if the game is running


BM: Bank08::9c11


source debugger.cmd

*****************************************************************************************
* AMIGA NOTES:                                                                          *
*****************************************************************************************


SETUP TOOLCHAIN (thanks mcgeezer)
 https://www.youtube.com/watch?v=-SQEORSphBs


*****************************************************************************************
* GAME ASPECTS TO CONVERT:                                                              *
*****************************************************************************************

--------
  MAPS
--------
  TILES
  LOCATIONS

---------
  INPUT
---------

----------
  PLAYER
----------
  SPRITE
    STANDING
      WITH ARMOR
        (FRAMES)
      WITHOUT ARMOR/POISONED
        (FRAMES)
    WALKING
      WITH ARMOR
        (FRAMES)
      WITHOUT ARMOR/POISONED
        (FRAMES)
    CROUCHING
      WITH ARMOR
        (FRAMES)
      WITHOUT ARMOR/POISONED
        (FRAMES)
    JUMPING
      WITH ARMOR
        (FRAMES)
      WITHOUT ARMOR/POISONED
        (FRAMES)
    FALLING
      WITH ARMOR
        (FRAMES)
      WITHOUT ARMOR/POISONED
        (FRAMES)
    FIGHTING
      WITH ARMOR
        (FRAMES)
      WITHOUT ARMOR/POISONED
        (FRAMES)
    CROUCHING AND FIGHTING
      WITH ARMOR
        (FRAMES)
      WITHOUT ARMOR/POISONED
        (FRAMES)
    JUMPING AND FIGHTING
      WITH ARMOR
        (FRAMES)
      WITHOUT ARMOR/POISONED
        (FRAMES)
    CLIMBING
      WITH ARMOR
        (FRAMES)
      WITHOUT ARMOR/POISONED
        (FRAMES)
    CLIMBING AND FIGHTING
      WITH ARMOR
        (FRAMES)
      WITHOUT ARMOR/POISONED
        (FRAMES)
    DYING
      WITH ARMOR
        (FRAMES)
      WITHOUT ARMOR/POISONED
        (FRAMES)
  STATS/VARS
    LIVES REMAINING
    X/Y MAP POSITION
    ARMOR INDEX
    WEAPON INDEX
    FLAG: POISONED
    FLAG: CLIMBING
    FLAG: LOSE DIRECTION
    FLAG: WEAPON ACTIVE

-----------------
  PLAYER WEAPON
-----------------
  SPRITE
    FRAMES

-----------
  ENEMIES
-----------
  ORANGE_SKELETON_0x1
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS
      HEALTH POINTS
      VITALITY BARS
      ENTITY CLASS
      POINTER: NEXT ANIMATION FRAME
      ANIMATION DURATION (CURRENT FRAME)
      OFFSET: PLAYER SCORE FOR DEFEATING
      FLAG: HAS WEAPON
      FLAG: CAN ATTACK
      FLAG: SCROLLING UPDATES ENEMY's X/Y
      FLAG: IS BOSS
      FLAG: FACING L/R

  ORANGE_SKELETON_0x2
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  PURPLE_SKELETON_0x3
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  ORC_0x4
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  ORC_0x5
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  ORC_0x6
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  ORC_0x7
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  ORC_0x8
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  ORANGE_MICHELIN_MAN_0x9
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  YELLOW_MICHELIN_MAN_0xa
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  PURPLE_MICHELIN_MAN_0xb
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  MAN-EATING_YELLOW_PLANT_0xc
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  MAN-EATING_PURPLE_PLANT_0xd
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  FIRETHROWER_0xe
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  BLUE_GOOP_0xf
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  BLUE_GOOP_0x10
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  RED_GOOP_0x11
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  BLUE_GOOP_0x12
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  PURPLE_WITCH_0x13
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  RED_WITCH_0x14
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  NINJA_0x15
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  SPINNING_SCULL_0x16
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  BAT_0x17
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  SNAKE_0x18
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  PURPLE_BLOCK_0x19
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  ORANGE_BLOCK_0x1a
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  DEMON_0x1b
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  LEVEL_03_DRAGON_0x1c
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  LEVEL_06_DRAGON_0x1d
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  LEVEL_08_DRAGON_0x1e
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  LEVEL_05_WARTHOG_BOSS_0x1f
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  LEVEL_07_WARTHOG_BOSS_0x20
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  OLD_MAN_THAT_GIVES_ZENNY_0x21
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  OLD_MAN_THAT_HAS_SHOP_0x22
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  OLD_MAN_THAT_GIVES_VITALITY_0x23
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  OLD_MAN_THAT_GIVES_MORE_TIME_0x24
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  OLD_MAN_THAT_GIVES_ADVICE/SCULL_0x25
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  OLD_MAN_THAT_GIVES_GRATITUDE_0x26
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  OLD_MAN_THAT_GIVES_ADVICE/SEEK_0x27
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  OLD_MAN_THAT_HAS_SHOP_0x28
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

  FALLING_ROCK_0x29
    SPRITE
      FRAMES
        CALLBACK DECISIONS (AI)
    STATS/VARS

-----------------------
  OBJECTS (NON-ENEMY
-----------------------
  SPRITE
    FRAMES
      CALLBACK DECISIONS (AI)
  STATS/VARS

----------
  SCORES
----------
  LOCATIONS

--------
  TEXT
--------
  GLYPHS
  LOCATIONS
  STRINGS

----------
  SOUNDS
----------

-------------
  DEMO PLAY
-------------



*****************************************************************************************
* GAME NOTES:                                                                           *
*****************************************************************************************

PLAYER SPRITE VARIABLE:

(0x3)   = Y POS HI
(0x4)   = Y POS LO
(0x7)   = SPRITE_ANIM_Y_OFFSET_LO
(0x8)   = X OFFSET(?) SCROLL VELOCITY?
(0x9)   = Y OFFSET(?) SCROLL VELOCITY?
(0xf)   = maybe action counter
(0x10)  = SPRITE_ANIM_Y_OFFSET_HI
(0x11)  = climbing(?) (c)
(0x16)
(0x17)
(0x19)  = ATTACHED TO LADDER (?)
(0x1c)  = deltax(?) flail chain active?
(0x1d)  = deltay(?)
(0x23)
(0x26)  = something about climbing or not
(0x27)  =  counter: times cycled through (0xf)



UNKNOWN:

(IY+10)  = entity class (boss only)



ENEMY VARIABLE: (trying to solve 0xc)


(0xc):
0x1  = can be damaged(?)
0x2  = can be touched/collided(?)
0x8  = update X/Y
0x10 = boss



*****************************************************************************************
* WORK AREA                                                                             *
*****************************************************************************************

bp 61d
bp 2547


ID   En  CPU                   Address\      Condition         Action
4A   X   :maincpu              01B4
51   O   :maincpu              03AF
4C   O   :maincpu              03B2
5A   X   :maincpu              0614
55   X   :maincpu              061D
5F   X   :maincpu              093A
60   X   :maincpu              0947
5C   O   :maincpu              0A1A
58   X   :maincpu              1E22
4D   X   :maincpu              210B
4E   X   :maincpu              2112
57   X   :maincpu              2547
5B   X   :maincpu              29DA
59   X   :maincpu              8F3C



*****************************************************************************************
* END WORK AREA                                                                         *
*****************************************************************************************

MAYBE_NEW_SPRITE_HAS_BEEN_DONE_PTR_LOC: for random enemies (4) popping out of pots, this seems to be address EAA0

TODO: MAYBE_NEW_SPRITE_HAS_BEEN_DONE_PTR_LOC
TODO: MAYBE_LEVEL_DATA_TBL_003
TODO: MAYBE_DEMO_LEVEL_TBL
TODO: MAYBE_LEVEL_TBL_006


(IX+0x0)    = alive flag? ($80 or not)
(IX+0x1)    = x pos
(IX+0x3)    = y pos
(IX+0x5)    = sprite attr of tile
(IX+0x6)    = animation x offset ($80 special case)
(IX+0x7)    = animation y offset ($80 special case)
(IX+0x8)    = X/Y (collision checking)
(IX+0x9)    = X/Y (collision checking)
(IX+0xa)    = animation duration!
(IX+0xb)    = entity class
(IX+0xc)    = bitflags (?) x8=UpdateSpriteXAndYLocationsAfterScroll, x1=has weapon(?), x2=can attack(?);0x10 = not dead, just hidden
0x1  = can be damaged(?)
0x2  = can be touched/collided(?)
0x8  = update X/Y
0x10 = boss
(IX+0xd)    = sprite touched by player function offset
(IX+0xe)    = HEALTH POINTS (VITALITY LO) (enemy only)
(IX+0xf)    = maybe weapon damage inflicted on player
(IX+0x10)   = owner entity class (for weapons/etc)--seems like only for bosses
(IX+0x11)   = sprite anim table offset
(IX+0x12)   = Sprite anim y offset hi(?)
(IX+0x13)   = ROM Bank
(IX+0x14)   = sprite facing flag(?) 0 = r, 1 = l
(IX+0x15)   = VITALITY HI/VITALITY BARS
(IX+0x16)   =
(IX+0x17)   = Score offset!
(IX+0x18)   = Sprite Entity Count LOC LO
(IX+0x19)   = Sprite Entity Count LOC HI
(IX+0x1a)   = sprite struct location
(IX+0x1c/f) = *ending animation bookmark
(IX+0x1e/f) = current animation bookmark
(IX+0x20)   = weapon animation bookmark
-------[ PER ENEMY CLASS FLAGS & ETC ]-------
(IX+0x20)   = witch has cast spell (WITCH ONLY)
(IX+0x20)   = num times rock has bounced
(IX+0x20)   = SKELETON TTL(?)
(IX+0x21)   = (FIRE PILLAR COUNT (FIRE PILLARS ONLY))
(IX+0x21)   = PURPLE BLOCK CRACKED
(IX+0x21)   = SKELETON IS HEADLESS
(IX+0x25)   = extra Y offset (for big sprites only?)
(IX+0x25)   = enemy poison ability (?)


ORANGE SKELETON                         0x1
ORANGE SKELETON (2)                     0x2
PURPLE SKELETON                         0x3
ORC L1                                  0x4
ORC L2                                  0x5
ORC L3                                  0x6
ORC R4/L4                               0x7
ORC L5/R5                               0x8
ORANGE MICHELIN MAN                     0x9
YELLOW MICHELIN MAN                     0xa
PURPLE MICHELIN MAN                     0xb
MAN-EATING YELLOW PLANT                 0xc
MAN-EATING PURPLE PLANT                 0xd
FIRETHROWER L1                          0xe
BLUE GOOP                               0xf
BLUE GOOP 4                             0x10
RED GOOP                                0x11
BLUE GOOP 7                             0x12
PURPLE WITCH                            0x13
RED WITCH                               0x14
NINJA                                   0x15
SPINNING SCULL                          0x16
BAT                                     0x17
SNAKE                                   0x18
PURPLE BLOCK                            0x19
ORANGE BLOCK                            0x1a
DEMON                                   0x1b
LEVEL 03 DRAGON                         0x1c
LEVEL 06 DRAGON                         0x1d
LEVEL 08 DRAGON                         0x1e
LEVEL 05 WARTHOG BOSS                   0x1f
LEVEL 07 WARTHOG BOSS                   0x20
OLD MAN THAT GIVES ZENNY                0x21
OLD MAN THAT HAS SHOP (1)               0x22
OLD MAN THAT GIVES VITALITY             0x23
OLD MAN THAT GIVES MORE TIME            0x24
OLD MAN THAT GIVES ADVICE/SCULL         0x25
OLD MAN THAT GIVES GRATITUDE            0x26
OLD MAN THAT GIVES ADVICE/SEEK          0x27
OLD MAN THAT HAS SHOP (2)               0x28
FALLING ROCK                            0x29

0_POINTS        0x0
5_POINTS
10_POINTS
15_POINTS
20_POINTS
30_POINTS
50_POINTS
80_POINTS
100_POINTS
150_POINTS
200_POINTS
300_POINTS
500_POINTS
800_POINTS
1000_POINTS
1500_POINTS
2000_POINTS
3000_POINTS
5000_POINTS
7000_POINTS
10000_POINTS
15000_POINTS
20000_POINTS
30000_POINTS
40000_POINTS
50000_POINTS
60000_POINTS
70000_POINTS
80000_POINTS
90000_POINTS
100000_POINTS

                             PLAYER_TOUCH_OTHER_SPRITE_ACTION_JUMP_TABLE     XREF[1]:     Maybe_CheckEnemyTouchesPlayer:474b(*)
0x0     NullFunction01
0x1     NullFunction01
0x2     NullFunction02
0x3     PlayerTakesZennyCoin1Point
0x4     PlayerTakesZennyCoin5Points
0x5     PlayerTakesZennyCoin10Points
0x6     PlayerTakesZennyCoin50Points
0x7     PlayerTakesZennyCoin100Points
0x8     PlayerTakesZennyCoin500Points
0x9     PlayerTakesZennyCoin1000Points
0xa     PlayerTakesKey
0xb     PlayerTakesHourglass
0xc     NullFunction01
0xd     NullFunction01
0xe     NullFunction01
0xf     NullFunction01
0x10    Maybe_UseKey01
0x11    MaybePlayerOpensTreasureChestGetsZennyCoins
0x12    PlayerOpensChestTakesTreasure100Points
0x13    PlayerOpenChestTakesTreasure500Points
0x14    PlayerTakesTreasure1000Points
0x15    MaybePlayerOpensTreasureChestGetsVitality
0x16    Maybe_FinishThisSpriteAnimation
0x17    PlayerTakesShurikenExtraGuyPrize
0x18    PlayerTakesStarArmor
0x19    PlayerTakesPOWPrize
0x1a    PlayerTakesShieldFor30SecondsOfTime
0x1b    PlayerTakesItemFor1000Points
0x1c    PlayerTakesBarrelArmorPrize
0x1d    PlayerTakesStrawberryArmorPrize
0x1e    PlayerTakesItemFor1000Points
0x1f    PlayerTakesDragonflyFor5000Points
0x20    PlayerTakesElephantPrizeFor500Zenny
0x21    PlayerTakesPumpkinSpiderPrizeFor7000Points
0x22    Maybe_DoDungeon
0x23    PlayImpactSound
0x24    AddFirethrower02
0x25    Maybe_NinjaSomething
0x26    Maybe_UseAPotion
0x27    Maybe_DamagePlayer
0x28    AddPurpleFireSprite
0x29    Maybe_StartNewOrangeFire01
0x2a    Maybe_UseAPotion02
0x2b    Maybe_UseAPotion03
0x2c    PlayActivateOldManSound
0x2d    PlayActivateOldManSound
0x2e    PlayActivateOldManSound
0x2f    PlayActivateOldManSound
0x30    PlayActivateOldManSound
0x31    PlayActivateOldManSound
0x32    PlayActivateOldManSound
0x33    PlayActivateOldManSound
0x34    Maybe_UpdateBat




*****************************************************************************************
* STACK NOTES:                                                                          *
*****************************************************************************************

BLACK TIGER USES SEVERAL "STACKS" WHICH ACT SORT OF LIKE THREADS. THEY ARE UPDATED DURING
THE NON-MASKABLE INTERRUPT ONE FRAME AT A TIME

FIRST BYTE = 0 : FREE
FIRST BYTE = 1 : ACTIVE
FIRST BYTE = 2 : DONE
FIRST BYTE = 4 : SWITCH TO THIS STACK
FIRST BYTE = 8 : JUMP TO BC

STACKS:
        ram:01b4 3e 00           LD         A,0x0
        ram:01b6 01 45 08        LD         BC,Maybe_InitializeGraphics
        ram:09fe 01 58 11        LD         BC,Maybe_SetupGameplay
    Bank07::a9df 01 e8 a9        LD         BC,DoSwitchesTest

        ram:23c8 3e 01           LD         A,0x1
        ram:23ca 01 20 2b        LD         BC,DoTimeRemaining
        ram:5177 01 de 51        LD         BC,DrawSelectionBox
        ram:6492 01 94 65        LD         BC,CheckUserSelectDuringShopping

        ram:235c 3e 02           LD         A,0x2
        ram:235e 01 93 27        LD         BC,Maybe_UpdateDungeonMap
        ram:517f 01 76 52        LD         BC,FUN_ram_5276
        ram:649a 01 3a 66        LD         BC,CheckPlayerMakesPurchaseSelection

        ram:2727 3e 03           LD         A,0x3
        ram:2729 01 42 27        LD         BC,FlashPoisonWarningOnScreen
        ram:2732 01 5d 27        LD         BC,FlashLoseDirectionWarningOnScreen
        ram:273b 01 78 27        LD         BC,DrawPoisonAndLoseDirectionStringsToScreen

        ram:2364 3e 04           LD         A,0x4
        ram:2366 01 12 2a        LD         BC,Maybe_UpdateDungeonMapTiles
    Bank07::b925 01 07 bf        LD         BC,DrawOrangeDragonInIntro

        ram:095a 3e 05           LD         A,0x5
        ram:095c 01 e6 13        LD         BC,DoTestScreenActions

        ram:0952 3e 06           LD         A,0x6
        ram:0954 01 b5 09        LD         BC,Maybe_PlayerPutsCoinInSlot

        ram:0b85 3e 07           LD         A,0x7
        ram:0b87 01 3d 11        LD         BC,EraseInsertCoinAndPrintFiveHighestScores

    Bank02::9b0b 3e 08           LD         A,0x8
    Bank02::9b0d 01 b4 2b        LD         BC,DoTimeRemaining::contd

*****************************************************************************************
* MAME DEBUGGING NOTES:                                                                 *
*****************************************************************************************

Building the building:

To use MAKE, put a command prompt in the same folder as the "makefile" and use the "make" command.
Very simple.

     --------------------------------
     * RUNNING MAME IN VS DEBUGGER: *
     --------------------------------

Visual Studio using the LLVM/Clang compiler is the best way to both compile MAME and use the VS debugger.
"make msllvm" I think is the magic.

make vsllvm

Do i need LLVM-7.1.0-win64.exe, the newer 8.x (only available as source) - or the one supplied by the Microsoft installer ("Clang C2 experimental") ?
Is it still Visual Studio 2017...?

SOURCES=src/mame/drivers/pacman.cpp REGENIE=1

Speeding up the compilation can be done by using more cores from your CPU. This is done with the -j parameter. Note: a good number to start with is the total number of CPU cores in your system plus one. An excessive number of concurrent jobs may increase compilation time. The optimal number depends on many factors, including number of CPU cores, available RAM, disk and filesystem performance, and memory bandwidth. For instance, make -j5 is a good starting point on a system with a quad-core CPU.

Debugging information can be added to a compile using SYMBOLS=1 though most users will not want or need to use this. This increases compile time and disk space used.


make SOURCES=src/mame/drivers/pacman.cpp TOOLS=1 REGENIE=1 -j5

Rebuilding MAME on a dual-core (e.g. i3 or laptop i5) machine:

make -j3

To link using the LLVM linker (generally much faster than the GNU linker), you’ll need mingw-w64-x86_64-lld and mingw-w64-x86_64-libc++ for 64-bit builds, or mingw-w64-i686-lld and mingw-w64-i686-libc++ for 32-bit builds.

For example you could use these commands to ensure you have the packages you need to compile MAME, omitting the ones for configurations you don’t plan to build for or combining multiple pacman commands to install more packages at once:

pacman -Syu
pacman -S curl git make
pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-libc++ mingw-w64-x86_64-lld mingw-w64-x86_64-python
pacman -S mingw-w64-x86_64-SDL2 mingw-w64-x86_64-SDL2_ttf
pacman -S mingw-w64-x86_64-qt5
pacman -S mingw-w64-i686-gcc mingw-w64-i686-libc++ mingw-w64-i686-lld mingw-w64-i686-python
pacman -S mingw-w64-i686-SDL2 mingw-w64-i686-SDL2_ttf
pacman -S mingw-w64-i686-qt5
You could use these commands to install the current version of the mame-essentials package and add the MAME package repository to your pacman configuration:

curl -O "https://repo.mamedev.org/x86_64/mame-essentials-1.0.6-1-x86_64.pkg.tar.xz"
pacman -U mame-essentials-1.0.6-1-x86_64.pkg.tar.xz
echo -e '\n[mame]\nInclude = /etc/pacman.d/mirrorlist.mame' >> /etc/pacman.conf



     --------------------
     * HOW TOS:         *
     --------------------

Start MAME debugger for blktiger (mame -debug blktiger)

TO: GET TO A LEVEL IN MAME/BLK TIGER
1: bp 1e7a;bp 231d;bp 22f5;bp 22fb;bp 22ec;bp 2269;bp 227a
2: F5; Key 9; Key 1 (give yourself 1 credit; start game)
3: 1e7a: a=(0,1,2,3,4,5,6,7);F5
4: 2269: F3b6=(0,1,2,3,4,5,6,7,8);F3A1=(0,1,2,3,4,5,6,7);F5
5: 227a: de=800;f5
6: hit fire button to bypass intro
7: 22ec: a=73;f5
8: 22f5: de=3200;f5
9: 22fb: a=8;F3AC=(0,1,2,3,4);f5
10: 231d save state here "ss <name>"

Load again with "sl <name>"

     --------------------
     * OTHER:           *
     --------------------

    m_scroll_x[0] = 0;
    m_scroll_x[1] = 0;
    m_scroll_y[0] = 0;
    m_scroll_y[1] = 0;
    m_scroll_bank = 0;
    m_screen_layout = 0;


     --------------------
     * BREAKPOINTS:     *
     --------------------

BP: 1B4 (allows entry to test menu; PC=1ac)
  : 5501 (change a => 1-7 for changing coin award from killing enemy)


19/8/2021:

bp 2181;bp 219f;bp 2a1f;bp 3bad;bp 4546;bp 47bc;bp 47d9;bp 4faf;bp b9c;bp 1f1e;bp 2040;bp 23e8;bp 2721;bp 534a;bp 5a44
wp e041,2,r;bp 235c


bp a547; bp a57c; bp a6e9; bp abd8; bp ac17; bp ad34; bp ad69; bp ae9a; bp b266; bp b2a5; bp b3c2; bp b3f7; bp b528; bp b944; bp b955; bp b96b; bp b989; bp b999; bp b9a9; bp ba57; bp 82ed; bp 82fd; bp 830e; bp 8ac0; bp 8ad0; bp 8c58; bp 8c68;



$09db => IPT_SERVICE1 on IN0
$0aa7 => After write screen warning
$00EA => Dynamic breakpoints
$411
$13F1
$33d => end of "wait"
$346 => first screen ends


   ID\  En  CPU                   Space      Addresses         Type   Condition
 1   X   :maincpu              program    2A02-2A02         read
 2   O   :maincpu              program    F955-F955         write
 3   O   :maincpu              program    ECAC-ECAC         write
 4   O   :maincpu              program    F940-F940         write
 5   O   :maincpu              program    56DA-5711         read
 6   O   :maincpu              program    E100-E100         write
 7   O   :maincpu              program    FE00-FFFF         write
 8   O   :maincpu              program    E100-E101         read
 9   X   :maincpu              program    E0E7-E0E7         write
 A   X   :maincpu              program    8286-8286         read
 B   X   :maincpu              program    827E-827E         read

ID\  En  CPU                   Address       Condition         Action
 1   X   :maincpu              00EA
 2   X   :maincpu              0346
 3   X   :maincpu              0411
 4   X   :maincpu              1442          a==$40
 5   O   :maincpu              2F2D
 7   O   :maincpu              32C7
 8   X   :maincpu              8446
 9   X   :maincpu              8800
 A   X   :maincpu              8D0E
 D   X   :maincpu              1939
 E   X   :maincpu              1E25
 F   X   :maincpu              8446
11   X   :maincpu              862B
14   X   :maincpu              86BF
15   X   :maincpu              86C5
17   X   :maincpu              24A0

ID   En  CPU                   Address\      Condition         Action
 1   X   :maincpu              00EA
 5   X   :maincpu              033D
 2   X   :maincpu              0346
20   X   :maincpu              03ED
21   X   :maincpu              03EE
22   X   :maincpu              03FC
 3   X   :maincpu              0411
40   X   :maincpu              06DA
43   X   :maincpu              07F6
 4   X   :maincpu              1442          a==$40
28   X   :maincpu              195C
2A   X   :maincpu              198F
29   X   :maincpu              1B49
2D   X   :maincpu              1B6F
2E   X   :maincpu              1B96
53   X   :maincpu              1BFB
2C   X   :maincpu              1DFC
2F   X   :maincpu              1E25
 7   X   :maincpu              22E1
 8   X   :maincpu              230B
1F   X   :maincpu              2343
25   X   :maincpu              237C
13   X   :maincpu              240E          a != 0
15   X   :maincpu              2418
1B   X   :maincpu              266E
1C   X   :maincpu              26B2
1E   X   :maincpu              26B6
1D   X   :maincpu              26FA
24   X   :maincpu              2793
23   X   :maincpu              2A12
63   X   :maincpu              2A2F
64   X   :maincpu              2A50
66   X   :maincpu              2A53
65   X   :maincpu              2AF5
26   X   :maincpu              2B20
5D   X   :maincpu              2B3B
5F   X   :maincpu              2B47
60   X   :maincpu              2B4F
62   X   :maincpu              2B52
61   X   :maincpu              2B77
5E   X   :maincpu              2B83
4B   X   :maincpu              2ED8
4E   X   :maincpu              2F07
4F   X   :maincpu              2F16
50   O   :maincpu              32C7
32   X   :maincpu              800C
30   X   :maincpu              803B
54   X   :maincpu              806A
55   X   :maincpu              809B
35   X   :maincpu              80A9
36   X   :maincpu              80F0
37   X   :maincpu              811E
33   X   :maincpu              8446
5B   X   :maincpu              85BF
57   X   :maincpu              8625
38   X   :maincpu              862B
39   X   :maincpu              863B
3A   X   :maincpu              8665
3E   X   :maincpu              86BF
3F   X   :maincpu              86C5
3B   X   :maincpu              86C8
42   X   :maincpu              86D3
58   X   :maincpu              8800
59   X   :maincpu              8AEA
5A   X   :maincpu              8D0E
5C   X   :maincpu              909B
46   X   :maincpu              90A5
48   X   :maincpu              A0CB
4A   X   :maincpu              A1B8



bp a5;


bp ea
bp 3c4
bp 3c9
bp 3cf
bp 411,hl!=$1429 && hl!=$144D
bp 1d6d
bp 1dfb
bp 27c3
bp 301e
bp 32fe,hl!=$9456 && hl!=$96c2
bp 3683
bp 3dc3
bp 72ea
bp a1e9


bpset 1442,a==$40



bp b3
bp ea
bp 3c9
bp 3cf
bp 346
bp 408
bp 411
bp 1d6d
bp 1dfb
bp 235c
bp 2364
bp 239e
bp 27c3
bp 301e
bp 32C7
bp 32FE
bp 3683
bp 3dc3
bp 47e9
bp 481e
bp 8446
bp 8800
bp 8D0E
bp 1352
bp 20ec
bp 683
bp 2343



bp 809b
bp 80fd
bp 811c
bp 8185
bp 8424
bp 8542
bp 8561
bp 8a61
bp 8b8b
bp 8baa
bp 947b
bp 94bb
bp 95cf
bp 9604
bp 9735
bp 9c13
bp 9c53
bp 9d70
bp 9da5
bp 9f12
bp a3ea
bp a42a
bp a547
bp a57c
bp a6e9
bp abd8
bp ac17
bp ad34
bp ad69
bp ae9a
bp b266
bp b2a5
bp b3c2
bp b3f7
bp b528
bp b944
bp b955
bp b96b
bp b989
bp b999
bp b9a9
bp ba57
bp 82ed
bp 82fd
bp 830e
bp 8ac0
bp 8ad0
bp 8c58
bp 8c68
bp 8db1
bp 8dc1
bp 8df6
bp 8e50
bp 9364
bp 9374
bp 93a9
bp 9403
bp 9939
bp 996b
bp 9a61
bp 9a83
bp 9a9a
bp 9b13
bp a021
bp a039
bp a111
bp a15c
bp a1cd
bp a1f0
bp a24d
bp ae1e
bp ae3c
bp 8070
bp 8084
bp 8096
bp 80ba
bp 8212
bp 8226
bp 8238
bp 825c
bp 850c
bp 85f1
bp 86df
bp 8715
bp 90e4
bp 91d3
bp 92c1
bp 92f7
bp 9ce6
bp 9dd5
bp 9ec3
bp 9ef9
bp a746
bp a75f
bp a76b
bp ada9
bp b726
bp b9c1
bp 8081
bp 9e5d
bp 9ebb
bp ab48
bp abd2
bp ac0d
bp b1e8
bp b272
bp b2ad
bp b888
bp b912
bp b955
bp ba3f
bp 9a99
bp 9aad
bp 9c3f
bp 9c53
bp 9ca0
bp 9fb2
bp 9fc6
bp a1be
bp a1d2
bp a21f
bp a5da
bp a602
bp a62a
bp a652
bp a67a
bp a6e8
bp a71a
bp a7d4
bp a813
bp a9f7
bp b381
bp b3d7
bp b421
bp b434
bp a1c7
bp a27e
bp a44b
bp a4d5
bp a510
bp 2ffc
bp 32dc
bp 3661
bp 3da1
bp 48e3
bp 493a
bp 72ff


043B
0466
1CD9
1B49
1E25
1E2C
01B4
03D0
14AF
550B
30C8
1BD0
8625
86A1
86B4
86B9
86BF
86C8
86D3
06DA
07E8
07F0
07F9
0803
86BC
A1B5
1932
1BFB
8118,a>0
868F,a>0
195C
1CC7
7138
714A
7147
719A
714B
719B
ACEF
AD40
AD91
B924



809b
80fd
811c
8185
8424
8542
8561
8a61
8b8b
8baa
947b
94bb
95cf
9604
9735
9c13
9c53
9d70
9da5
9f12
a3ea
a42a
a547
a57c
a6e9
abd8
ac17
ad34
ad69
ae9a
b266
b2a5
b3c2
b3f7
b528
b944
b955
b96b
b989
b999
b9a9
ba57
82ed
82fd
830e
8ac0
8ad0
8c58
8c68
8db1
8dc1
8df6
8e50
9364
9374
93a9
9403
9939
996b
9a61
9a83
9a9a
9b13
a021
a039
a111
a15c
a1cd
a1f0
a24d
ae1e
ae3c
8070
8084
8096
80ba
8212
8226
8238
825c
850c
85f1
86df
8715
90e4
91d3
92c1
92f7
9ce6
9dd5
9ec3
9ef9
a746
a75f
a76b
ada9
b726
b9c1
8081
9e5d
9ebb
ab48
abd2
ac0d
b1e8
b272
b2ad
b888
b912
b955
ba3f
9a99
9aad
9c3f
9c53
9ca0
9fb2
9fc6
a1be
a1d2
a21f
a5da
a602
a62a
a652
a67a
a6e8
a71a
a7d4
a813
a9f7
b381
b3d7
b421
b434
a1c7
a27e
a44b
a4d5
a510
2ffc
32dc
3661
3da1
48e3
493a
72ff

     --------------------
     * COMMANDS:        *
     --------------------


 ) : standard parentheses
++ -- : postfix increment/decrement
++ -- ~ ! - + b@ w@ d@ q@ : prefix inc/dec, binary NOT, logical NOT, unary +/-, memory access
* / % : multiply, divide, modulus
+ - : add, subtract
<< >> : shift left/right
< <= > >= : less than, less than or equal, greater than, greater than or equal
== != : equal, not equal
& : binary AND
^ : binary XOR
| : binary OR
&& : logical AND
|| : logical OR
= *= /= %= += -= <<= >>= &= |= ^= : assignment
, : separate terms, function parameters


rpset
rp[set] {<condition>}[,<action>]]

Sets a new registerpoint which will be triggered when <condition> is met. The condition must be specified between curly braces to prevent the condition from being evaluated as an assignment.
The optional <action> parameter provides a command that is executed whenever the registerpoint is hit. Note that you may need to embed the action within braces { } in order to prevent commas and semicolons from being interpreted as applying to the rpset command itself.
Each registerpoint that is set is assigned an index which can be used in other registerpoint commands to reference this registerpoint.

Examples:

rp {PC==0150}

Set a registerpoint that will halt execution whenever the PC register equals 0x150.

temp0=0; rp {PC==0150},{temp0++; g}

Set a registerpoint that will increment the variable temp0 whenever the PC register equals 0x0150.

rp {temp0==5}

Set a registerpoint that will halt execution whenever the temp0 variable equals 5.

bpset
bp[set] <address>[,<condition>[,<action>]]

Sets a new execution breakpoint at the specified <address>.
The optional <condition> parameter lets you specify an expression that will be evaluated each time the breakpoint is hit. If the result of the expression is true (non-zero), the breakpoint will actually halt execution; otherwise, execution will continue with no notification.
The optional <action> parameter provides a command that is executed whenever the breakpoint is hit and the <condition> is true. Note that you may need to embed the action within braces { } in order to prevent commas and semicolons from being interpreted as applying to the bpset command itself. Each breakpoint that is set is assigned an index which can be used in other breakpoint commands to reference this breakpoint.

bplist -- lists all the breakpoints



source
source <filename>

The source command reads in a set of debugger commands from a file and executes them one by one, similar to a batch file.

Examples:

source break_and_trace.cmd

Reads in debugger commands from break_and_trace.cmd and executes them.



statesave
statesave[ss] <filename>

The statesave command creates a save state at this exact moment in time. The given state file gets written to the standard state directory (sta), and gets .sta added to it - no file extension necessary. All output for this command is currently echoed into the running machine window.

Examples:

statesave foo

Writes file 'foo.sta' in the default state save directory.



stateload
stateload[sl] <filename>

The stateload command retrieves a save state from disk. The given state file gets read from the standard state directory (sta), and gets .sta added to it - no file extension necessary. All output for this command is currently echoed into the running machine window. Previous memory and PC tracking statistics are cleared.

Examples:

stateload foo

Reads file 'foo.sta' from the default state save directory.



save[{d|i}] <filename>,<address>,<length>[,<cpu>]

The save/saved/savei commands save raw memory to the binary file specified in the <filename> parameter.
'save' will save program space memory, while 'saved' will save data space memory and 'savei' will save I/O space memory.
<address> indicates the address of the start of saving, and <length> indicates how much memory to save. The range <address> through <address>+<length>-1 inclusive will be output to the file.
You can also save memory from another CPU by specifying the <cpu> parameter.

Examples:

save venture.bin,0,10000

Saves addresses 0-ffff in the current CPU to the binary file 'venture.bin'.

saved harddriv.bin,3000,1000,3

Saves data memory addresses 3000-3fff from CPU #3 to the binary file 'harddriv.bin'.



load[{d|i}] <filename>,<address>[,<length>,<cpu>]

The load/loadd/loadi commands load raw memory from the binary file specified in the <filename> parameter.
'load' will load program space memory, while 'loadd' will load data space memory and 'loadi' will load I/O space memory.
<address> indicates the address of the start of saving, and <length> indicates how much memory to load. The range <address>
through <address>+<length>-1 inclusive will be read in from the file.

If you specify <length> = 0 or a length greater than the total length of the file it will load the entire contents of the file and no more.
You can also load memory from another CPU by specifying the <cpu> parameter.

NOTE: This will only actually write memory that is possible to overwrite in the Memory Window

Examples:

load venture.bin,0,10000

Loads addresses 0-ffff in the current CPU from the binary file 'venture.bin'.

loadd harddriv.bin,3000,1000,3

Loads data memory addresses 3000-3fff from CPU #3 from the binary file 'harddriv.bin'.



Finally, the new memory operators work like this:

b!<addr> refers to the byte at <addr> but does NOT suppress side effects such as reading a mailbox clearing the pending flag, or reading a FIFO removing an item.

b@<addr> refers to the byte at <addr> while suppressing side effects.

Similarly, w@ and w! refer to a word in memory, d@ and d! refer to a dword in memory, and q@ and q! refer to a qword in memory.

The memory operators can be used as both lvalues and rvalues, so you can write b@100 = ff to store a byte in memory. By default these operators read from the program memory space, but you can override that by prefixing them with a 'd' or an 'i'.

As such, dw@300 refers to data memory word at address 300 and id@400 refers to an I/O memory dword at address 400.

*****************************************************************************************
* MAME NOTES:                                                                           *
*****************************************************************************************

    screen.set_raw(24_MHz_XTAL / 4, 384, 128, 0, 262, 22, 246); // hsync is 50..77, vsync is 257..259

 void gfx_element::transpen(bitmap_ind16 &dest, const rectangle &cliprect,
        u32 code, u32 color, int flipx, int flipy, s32 destx, s32 desty,
        u32 trans_pen)



void blktiger_state::blktiger_map(address_map &map)
{
    map(0x0000, 0x7fff).rom();
    map(0x8000, 0xbfff).bankr("bank1");
    map(0xc000, 0xcfff).rw(FUNC(blktiger_state::blktiger_bgvideoram_r), FUNC(blktiger_state::blktiger_bgvideoram_w));
    map(0xd000, 0xd7ff).ram().w(FUNC(blktiger_state::blktiger_txvideoram_w)).share("txvideoram");
    map(0xd800, 0xdbff).ram().w(m_palette, FUNC(palette_device::write8)).share("palette");
    map(0xdc00, 0xdfff).ram().w(m_palette, FUNC(palette_device::write8_ext)).share("palette_ext");
    map(0xe000, 0xfdff).ram();
    map(0xfe00, 0xffff).ram().share("spriteram");
}

void blktiger_state::blktiger_io_map(address_map &map)
{
    map.global_mask(0xff);
    map(0x00, 0x00).portr("IN0").w("soundlatch", FUNC(generic_latch_8_device::write));
    map(0x01, 0x01).portr("IN1").w(FUNC(blktiger_state::blktiger_bankswitch_w));
    map(0x02, 0x02).portr("IN2");
    map(0x03, 0x03).portr("DSW0").w(FUNC(blktiger_state::blktiger_coinlockout_w));
    map(0x04, 0x04).portr("DSW1").w(FUNC(blktiger_state::blktiger_video_control_w));
    map(0x05, 0x05).portr("FREEZE");
    map(0x06, 0x06).w("watchdog", FUNC(watchdog_timer_device::reset_w));
    map(0x07, 0x07).rw(FUNC(blktiger_state::blktiger_from_mcu_r), FUNC(blktiger_state::blktiger_to_mcu_w));     /* Software protection (7) */
    map(0x08, 0x09).w(FUNC(blktiger_state::blktiger_scrollx_w));
    map(0x0a, 0x0b).w(FUNC(blktiger_state::blktiger_scrolly_w));
    map(0x0c, 0x0c).w(FUNC(blktiger_state::blktiger_video_enable_w));
    map(0x0d, 0x0d).w(FUNC(blktiger_state::blktiger_bgvideoram_bank_w));
    map(0x0e, 0x0e).w(FUNC(blktiger_state::blktiger_screen_layout_w));
}

    ROM_REGION( 0x50000, "maincpu", 0 ) /* 64k for code + banked ROMs images */
    ROM_LOAD( "bdu-01a.5e",  0x00000, 0x08000, CRC(a8f98f22) SHA1(f77c0d0ebf3e52a21d2c0c5004350a408b8e6d24) )   /* CODE */
    ROM_LOAD( "bdu-02a.6e",  0x10000, 0x10000, CRC(7bef96e8) SHA1(6d05a73d8400dead78c561b904bf6ef8311e7b91) )   /* 0+1 */
    ROM_LOAD( "bdu-03a.8e",  0x20000, 0x10000, CRC(4089e157) SHA1(7972b1c745057802d4fd66d88b0101eb3c03e701) )   /* 2+3 */
    ROM_LOAD( "bd-04.9e",    0x30000, 0x10000, CRC(ed6af6ec) SHA1(bed303c51bcddf233ad0701306d557a60ce9f5a5) )   /* 4+5 */
    ROM_LOAD( "bd-05.10e",   0x40000, 0x10000, CRC(ae59b72e) SHA1(6e72214b71f2f337af236c8be891a18570cb6fbb) )   /* 6+7 */

    ROM_REGION( 0x10000, "audiocpu", 0 )
    ROM_LOAD( "bd-06.1l",  0x0000, 0x8000, CRC(2cf54274) SHA1(87df100c65999ba1e9d358ffd0fe4bba23ae0efb) )

    ROM_REGION( 0x10000, "mcu", 0 )
    ROM_LOAD( "bd.6k",  0x0000, 0x1000, CRC(ac7d14f1) SHA1(46fd6b43f10312e3e8d3c9e0c0fd616af98fdbad) )

    ROM_REGION( 0x08000, "gfx1", 0 )
    ROM_LOAD( "bd-15.2n",  0x00000, 0x08000, CRC(70175d78) SHA1(2f02be2785d1824002145ea20db79821d0393929) ) /* characters */

    ROM_REGION( 0x40000, "gfx2", 0 )
    ROM_LOAD( "bd-12.5b",  0x00000, 0x10000, CRC(c4524993) SHA1(9aa6c58004ca1117e5ac44ba8fc51e9128b921b8) ) /* tiles */
    ROM_LOAD( "bd-11.4b",  0x10000, 0x10000, CRC(7932c86f) SHA1(b3b1bc1e2b0db5c2eb8772f8a2c35129cc80d511) )
    ROM_LOAD( "bd-14.9b",  0x20000, 0x10000, CRC(dc49593a) SHA1(e4ef42ba9f238fd43c8217657c92896f31d3912c) )
    ROM_LOAD( "bd-13.8b",  0x30000, 0x10000, CRC(7ed7a122) SHA1(3acc6d4c9731db0609c2e26e3bd255847149ca33) )

    ROM_REGION( 0x40000, "gfx3", 0 )
    ROM_LOAD( "bd-08.5a",   0x00000, 0x10000, CRC(e2f17438) SHA1(3e5fdae07d40febedc59c7c7c4d9c6f0d72b58b5) )    /* sprites */
    ROM_LOAD( "bd-07.4a",   0x10000, 0x10000, CRC(5fccbd27) SHA1(33c55aa9c12b3121ca5c3b4c39a9b152b6946461) )
    ROM_LOAD( "bd-10.9a",   0x20000, 0x10000, CRC(fc33ccc6) SHA1(d492626a88565c2626f98ecb1d74535f1ad68e4c) )
    ROM_LOAD( "bd-09.8a",   0x30000, 0x10000, CRC(f449de01) SHA1(f6b40e9eb2471b89c42ab84f4214295d284db0c3) )


    PORT_START("IN0")
    PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_START1 )
    PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_START2 )
    PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_UNKNOWN )    /* probably unused */
    PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_UNKNOWN )    /* probably unused */
    PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_UNKNOWN )    /* probably unused */
    PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_SERVICE1 )
    PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_COIN1 )
    PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_COIN2 )

    PORT_START("IN1")
    PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT ) PORT_8WAY
    PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT ) PORT_8WAY
    PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN ) PORT_8WAY
    PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_UP ) PORT_8WAY
    PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_BUTTON1 )
    PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_BUTTON2 )
    PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )    /* probably unused */
    PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )    /* probably unused */

    PORT_START("IN2")
    PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT ) PORT_8WAY PORT_COCKTAIL
    PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT ) PORT_8WAY PORT_COCKTAIL
    PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN ) PORT_8WAY PORT_COCKTAIL
    PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_UP ) PORT_8WAY PORT_COCKTAIL
    PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_BUTTON1 ) PORT_COCKTAIL
    PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_BUTTON2 ) PORT_COCKTAIL
    PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_UNKNOWN )    /* probably unused */
    PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_UNKNOWN )    /* probably unused */

    PORT_START("DSW0")
    PORT_DIPNAME( 0x07, 0x07, DEF_STR( Coin_A ) )       PORT_DIPLOCATION( "SW1:1,2,3" )
    PORT_DIPSETTING(    0x00, DEF_STR( 4C_1C ) )
    PORT_DIPSETTING(    0x01, DEF_STR( 3C_1C ) )
    PORT_DIPSETTING(    0x02, DEF_STR( 2C_1C ) )
    PORT_DIPSETTING(    0x07, DEF_STR( 1C_1C ) )
    PORT_DIPSETTING(    0x06, DEF_STR( 1C_2C ) )
    PORT_DIPSETTING(    0x05, DEF_STR( 1C_3C ) )
    PORT_DIPSETTING(    0x04, DEF_STR( 1C_4C ) )
    PORT_DIPSETTING(    0x03, DEF_STR( 1C_5C ) )
    PORT_DIPNAME( 0x38, 0x38, DEF_STR( Coin_B ) )       PORT_DIPLOCATION( "SW1:4,5,6" )
    PORT_DIPSETTING(    0x00, DEF_STR( 4C_1C ) )
    PORT_DIPSETTING(    0x08, DEF_STR( 3C_1C ) )
    PORT_DIPSETTING(    0x10, DEF_STR( 2C_1C ) )
    PORT_DIPSETTING(    0x38, DEF_STR( 1C_1C ) )
    PORT_DIPSETTING(    0x30, DEF_STR( 1C_2C ) )
    PORT_DIPSETTING(    0x28, DEF_STR( 1C_3C ) )
    PORT_DIPSETTING(    0x20, DEF_STR( 1C_4C ) )
    PORT_DIPSETTING(    0x18, DEF_STR( 1C_5C ) )
    PORT_DIPNAME( 0x40, 0x40, DEF_STR( Flip_Screen ) )  PORT_DIPLOCATION( "SW1:7" )
    PORT_DIPSETTING(    0x40, DEF_STR( Off ) )
    PORT_DIPSETTING(    0x00, DEF_STR( On ) )
    PORT_DIPNAME( 0x80, 0x80, DEF_STR( Test ) )         PORT_DIPLOCATION( "SW1:8" )
    PORT_DIPSETTING(    0x80, DEF_STR( Off ) )
    PORT_DIPSETTING(    0x00, DEF_STR( On ) )

    PORT_START("DSW1")
    PORT_DIPNAME( 0x03, 0x03, DEF_STR( Lives ) )        PORT_DIPLOCATION( "SW2:1,2" )
    PORT_DIPSETTING(    0x02, "2" )
    PORT_DIPSETTING(    0x03, "3" )
    PORT_DIPSETTING(    0x01, "5" )
    PORT_DIPSETTING(    0x00, "7")
    PORT_DIPNAME( 0x1c, 0x0c, DEF_STR( Difficulty ) )   PORT_DIPLOCATION( "SW2:3,4,5" )
    PORT_DIPSETTING(    0x1c, "1 (Easiest)")
    PORT_DIPSETTING(    0x18, "2" )
    PORT_DIPSETTING(    0x14, "3" )
    PORT_DIPSETTING(    0x10, "4" )
    PORT_DIPSETTING(    0x0c, "5 (Normal)" )
    PORT_DIPSETTING(    0x08, "6" )
    PORT_DIPSETTING(    0x04, "7" )
    PORT_DIPSETTING(    0x00, "8 (Hardest)" )
    PORT_DIPNAME( 0x20, 0x20, DEF_STR( Demo_Sounds ) )  PORT_DIPLOCATION( "SW2:6" )
    PORT_DIPSETTING(    0x00, DEF_STR( Off ) )
    PORT_DIPSETTING(    0x20, DEF_STR( On ) )
    PORT_DIPNAME( 0x40, 0x40, DEF_STR( Allow_Continue ) )   PORT_DIPLOCATION( "SW2:7" )
    PORT_DIPSETTING(    0x00, DEF_STR( No ) )
    PORT_DIPSETTING(    0x40, DEF_STR( Yes ) )
    PORT_DIPNAME( 0x80, 0x00, DEF_STR( Cabinet ) )      PORT_DIPLOCATION( "SW2:8" )
    PORT_DIPSETTING(    0x00, DEF_STR( Upright ) )
    PORT_DIPSETTING(    0x80, DEF_STR( Cocktail ) )

    PORT_START("FREEZE")
    PORT_DIPNAME( 0x01, 0x01, "Freeze" )    /* could be VBLANK */
    PORT_DIPSETTING(    0x01, DEF_STR( Off ) )
    PORT_DIPSETTING(    0x00, DEF_STR( On ) )

    PORT_START("COIN_LOCKOUT")
    PORT_CONFNAME( 0x01, 0x01, "Coin Lockout Hardware Present" )
    PORT_CONFSETTING( 0x01, DEF_STR( Yes ) )
    PORT_CONFSETTING( 0x00, DEF_STR( No ) )


ROM_REGION( 0x40000, "gfx3", 0 )
    ROM_LOAD( "bd-08.5a",   0x00000, 0x10000, CRC(e2f17438) SHA1(3e5fdae07d40febedc59c7c7c4d9c6f0d72b58b5) )    /* sprites */
    ROM_LOAD( "bd-07.4a",   0x10000, 0x10000, CRC(5fccbd27) SHA1(33c55aa9c12b3121ca5c3b4c39a9b152b6946461) )
    ROM_LOAD( "bd-10.9a",   0x20000, 0x10000, CRC(fc33ccc6) SHA1(d492626a88565c2626f98ecb1d74535f1ad68e4c) )
    ROM_LOAD( "bd-09.8a",   0x30000, 0x10000, CRC(f449de01) SHA1(f6b40e9eb2471b89c42ab84f4214295d284db0c3) )

static GFXDECODE_START( gfx_blktiger )
    GFXDECODE_ENTRY( "gfx1", 0, charlayout,   0x300, 32 )   /* colors 0x300-0x37f */
    GFXDECODE_ENTRY( "gfx2", 0, spritelayout, 0x000, 16 )   /* colors 0x000-0x0ff */
    GFXDECODE_ENTRY( "gfx3", 0, spritelayout, 0x200,  8 )   /* colors 0x200-0x27f */
GFXDECODE_END


    /* memory pointers */
    required_device<buffered_spriteram8_device> m_spriteram;
    required_shared_ptr<uint8_t> m_txvideoram;

    /* video-related */
    tilemap_t *m_tx_tilemap;
    tilemap_t *m_bg_tilemap8x4;
    tilemap_t *m_bg_tilemap4x8;
    uint32_t  m_scroll_bank;
    uint8_t   m_scroll_x[2];
    uint8_t   m_scroll_y[2];
    std::unique_ptr<uint8_t[]>   m_scroll_ram;
    uint8_t   m_screen_layout;
    uint8_t   m_chon;
    uint8_t   m_objon;
    uint8_t   m_bgon;

    /* mcu-related */
    uint8_t   m_z80_latch;
    uint8_t   m_i8751_latch;

    /* devices */
    optional_device<i8751_device> m_mcu;
    required_device<cpu_device> m_audiocpu;

    required_device<cpu_device> m_maincpu;
    required_device<gfxdecode_device> m_gfxdecode;
    required_device<palette_device> m_palette;


TILEMAP_MAPPER_MEMBER(blktiger_state::bg8x4_scan)
{
    /* logical (col,row) -> memory offset */
    return (col & 0x0f) + ((row & 0x0f) << 4) + ((col & 0x70) << 4) + ((row & 0x30) << 7);
}

TILEMAP_MAPPER_MEMBER(blktiger_state::bg4x8_scan)
{
    /* logical (col,row) -> memory offset */
    return (col & 0x0f) + ((row & 0x0f) << 4) + ((col & 0x30) << 4) + ((row & 0x70) << 6);
}

TILE_GET_INFO_MEMBER(blktiger_state::get_bg_tile_info)
{
    /* the tile priority table is a guess compiled by looking at the game. It
       was not derived from a PROM so it could be wrong. */
    static const uint8_t split_table[16] =
    {
        3,3,2,2,
        1,1,0,0,
        0,0,0,0,
        0,0,0,0
    };
    uint8_t attr = m_scroll_ram[2 * tile_index + 1];
    int color = (attr & 0x78) >> 3;
    tileinfo.set(1,
            m_scroll_ram[2 * tile_index] + ((attr & 0x07) << 8),
            color,
            (attr & 0x80) ? TILE_FLIPX : 0);
    tileinfo.group = split_table[color];
}

TILE_GET_INFO_MEMBER(blktiger_state::get_tx_tile_info)
{
    uint8_t attr = m_txvideoram[tile_index + 0x400];
    tileinfo.set(0,
            m_txvideoram[tile_index] + ((attr & 0xe0) << 3),
            attr & 0x1f,
            0);
}


void blktiger_state::video_start()
{
    m_chon = 1;
    m_bgon = 1;
    m_objon = 1;
    m_screen_layout = 0;

    m_scroll_ram = std::make_unique<uint8_t[]>(BGRAM_BANK_SIZE * BGRAM_BANKS);

    m_tx_tilemap =    &machine().tilemap().create(*m_gfxdecode, tilemap_get_info_delegate(*this, FUNC(blktiger_state::get_tx_tile_info)), TILEMAP_SCAN_ROWS, 8, 8, 32, 32);
    m_bg_tilemap8x4 = &machine().tilemap().create(*m_gfxdecode, tilemap_get_info_delegate(*this, FUNC(blktiger_state::get_bg_tile_info)), tilemap_mapper_delegate(*this, FUNC(blktiger_state::bg8x4_scan)), 16, 16, 128, 64);
    m_bg_tilemap4x8 = &machine().tilemap().create(*m_gfxdecode, tilemap_get_info_delegate(*this, FUNC(blktiger_state::get_bg_tile_info)), tilemap_mapper_delegate(*this, FUNC(blktiger_state::bg4x8_scan)), 16, 16, 64, 128);

    m_tx_tilemap->set_transparent_pen(3);

    m_bg_tilemap8x4->set_transmask(0, 0xffff, 0x8000);  /* split type 0 is totally transparent in front half */
    m_bg_tilemap8x4->set_transmask(1, 0xfff0, 0x800f);  /* split type 1 has pens 4-15 transparent in front half */
    m_bg_tilemap8x4->set_transmask(2, 0xff00, 0x80ff);  /* split type 1 has pens 8-15 transparent in front half */
    m_bg_tilemap8x4->set_transmask(3, 0xf000, 0x8fff);  /* split type 1 has pens 12-15 transparent in front half */
    m_bg_tilemap4x8->set_transmask(0, 0xffff, 0x8000);
    m_bg_tilemap4x8->set_transmask(1, 0xfff0, 0x800f);
    m_bg_tilemap4x8->set_transmask(2, 0xff00, 0x80ff);
    m_bg_tilemap4x8->set_transmask(3, 0xf000, 0x8fff);

    m_tx_tilemap->set_scrolldx(128, 128);
    m_tx_tilemap->set_scrolldy(  6,   6);
    m_bg_tilemap8x4->set_scrolldx(128, 128);
    m_bg_tilemap8x4->set_scrolldy(  6,   6);
    m_bg_tilemap4x8->set_scrolldx(128, 128);
    m_bg_tilemap4x8->set_scrolldy(  6,   6);

    save_pointer(NAME(m_scroll_ram), BGRAM_BANK_SIZE * BGRAM_BANKS);
}

oid blktiger_state::blktiger_video_control_w(uint8_t data)
{
    /* bits 0 and 1 are coin counters */
    machine().bookkeeping().coin_counter_w(0,data & 1);
    machine().bookkeeping().coin_counter_w(1,data & 2);

    /* bit 5 resets the sound CPU */
    m_audiocpu->set_input_line(INPUT_LINE_RESET, (data & 0x20) ? ASSERT_LINE : CLEAR_LINE);

    /* bit 6 flips screen */
    flip_screen_set(data & 0x40);

    /* bit 7 enables characters? Just a guess */
    m_chon = ~data & 0x80;
}

void blktiger_state::blktiger_video_enable_w(uint8_t data)
{
    /* not sure which is which, but I think that bit 1 and 2 enable background and sprites */
    /* bit 1 enables bg ? */
    m_bgon = ~data & 0x02;

    /* bit 2 enables sprites ? */
    m_objon = ~data & 0x04;
}

void blktiger_state::blktiger_screen_layout_w(uint8_t data)
{
    m_screen_layout = data;
    m_bg_tilemap8x4->enable(m_screen_layout);
    m_bg_tilemap4x8->enable(!m_screen_layout);
}

void blktiger_state::draw_sprites( bitmap_ind16 &bitmap, const rectangle &cliprect )
{
    uint8_t *buffered_spriteram = m_spriteram->buffer();
    int offs;

    /* Draw the sprites. */
    for (offs = m_spriteram->bytes() - 4;offs >= 0;offs -= 4)
    {
        int attr = buffered_spriteram[offs+1];
        int sx = buffered_spriteram[offs + 3] - ((attr & 0x10) << 4);
        int sy = buffered_spriteram[offs + 2];
        int code = buffered_spriteram[offs] | ((attr & 0xe0) << 3);
        int color = attr & 0x07;
        int flipx = attr & 0x08;

        if (flip_screen())
        {
            sx = 240 - sx;
            sy = 240 - sy;
            flipx = !flipx;
        }

        m_gfxdecode->gfx(2)->transpen(bitmap,cliprect,
                code,
                color,
                flipx,flip_screen(),
                sx+128,sy+6,15);
    }
}

uint32_t blktiger_state::screen_update_blktiger(screen_device &screen, bitmap_ind16 &bitmap, const rectangle &cliprect)
{
    bitmap.fill(1023, cliprect);

    if (m_bgon)
        (m_screen_layout ? m_bg_tilemap8x4 : m_bg_tilemap4x8)->draw(screen, bitmap, cliprect, TILEMAP_DRAW_LAYER1, 0);

    if (m_objon)
        draw_sprites(bitmap, cliprect);

    if (m_bgon)
        (m_screen_layout ? m_bg_tilemap8x4 : m_bg_tilemap4x8)->draw(screen, bitmap, cliprect, TILEMAP_DRAW_LAYER0, 0);

    if (m_chon)
        m_tx_tilemap->draw(screen, bitmap, cliprect, 0, 0);

    return 0;
}


                             Maybe_UpdateDemonVulnerability                  XREF[2]:     Bank02::a3f0(*), Bank02::aa7f(*)
    Bank02::a00d dd 7e 0c        LD         A,(IX+0xc)
    Bank02::a010 f6 0b           OR         0xb
    Bank02::a012 ee 03           XOR        0x3
    Bank02::a014 dd 77 0c        LD         (IX+0xc),A
                              Maybe_UpdateDemonVulnerability02                XREF[1]:     Bank02::aa77(*)
    Bank02::a019 dd 7e 0c        LD         A,(IX+0xc)
    Bank02::a01c f6 0b           OR         0xb
    Bank02::a01e dd 77 0c        LD         (IX+0xc),A
                             InjureOrKillBossDemon500Points                  XREF[1]:     Bank02::aa3f(*)
    Bank02::a125 dd 7e 0c        LD         A,(IX+0xc)
    Bank02::a128 e6 18           AND        0x18;  (injured only; still boss)
    Bank02::a12a dd 77 0c        LD         (IX+0xc),A
                             DemonThrowSpear                                 XREF[6]:     Bank02::a931(*), Bank02::a95f(*),
                                                                                          Bank02::a98d(*), Bank02::a9b6(*),
                                                                                          Bank02::a9da(*), Bank02::a9fe(*)
    Bank02::a189 dd 7e 0c        LD         A,(IX+0xc)
                             dragon_injured                                  XREF[2]:     Bank04::9728(j), Bank04::972e(j)
    Bank04::9739 dd 7e 0c        LD         A,(IX+0xc)
    Bank04::973c f6 00           OR         0x0
    Bank04::973e dd 77 0c        LD         (IX+0xc),A
                             CheckBlockAdjustYPos::adjust_y_pos                                    XREF[1]:     Bank05::9a97(j)
    Bank05::9aa5 dd 7e 0c        LD         A,(IX+0xc)
    Bank05::9aa8 e6 18           AND        0x18
    Bank05::9aaa dd 77 0c        LD         (IX+0xc),A
                             InjureOrKillPurpleBlock15Points                 XREF[1]:     Bank05::9e67(*)
    Bank05::9ba2 dd 7e 0c        LD         A,(IX+0xc)
    Bank05::9ba5 e6 18           AND        0x18 ;injure
    Bank05::9ba7 dd 77 0c        LD         (IX+0xc),A
                             InjureOrKillPurpleBlock15Points::defeated                             XREF[1]:     Bank05::9b9a(j)
    Bank05::9bbe dd 7e 0c        LD         A,(IX+0xc)
    Bank05::9bc1 e6 10           AND        0x10                                             not a boss; only give a coin
                                                                                             if this block was not a boss
    Bank05::9bc3 cc e9 54        CALL       Z,AddZennyCoinForKillingEnemy                    undefined AddZennyCoinForKilling
Maybe_HandleInanimateSprites
                             continue_animation                              XREF[3]:     ram:2ff9(j), ram:303c(j),
                                                                                          ram:3045(j)
        ram:304a dd 7e 0c        LD         A,(IX+0xc)
        ram:304d e6 08           AND        0x8                                              bit 4 set?
        ram:304f c4 0a 08        CALL       NZ,UpdateSpriteXAndYOffsetsAfterScroll           undefined UpdateSpriteXAndYOffse
---
        ram:30b4 dd 7e 0c        LD         A,(IX+0xc)
        ram:30b7 e6 01           AND        0x1                                              bit 1?
        ram:30b9 20 3d           JR         NZ,skip_damage
---
        ram:30fd dd 7e 0c        LD         A,(IX+0xc)
        ram:3100 e6 02           AND        0x2                                              check bit 2
        ram:3102 cc 74 31        CALL       Z,FUN_ram_3174                                   undefined FUN_ram_3174()
                             Maybe_KillCurrentLoadedEnemy                    XREF[3]:     DrawQuickExplosionOrHitPoint:322
                                                                                          DrawQuickExplosionOrHitPoint:322
                                                                                          Maybe_PlayerTouchesPOW:b5d2(c)
        ram:3232 dd 7e 0c        LD         A,(IX+0xc)
        ram:3235 f6 03           OR         0x3
        ram:3237 dd 77 0c        LD         (IX+0xc),A                                       set lower 3 bits
                             defeated                                        XREF[2]:     ram:3270(j), ram:3272(j)
        ram:3280 dd 7e 0c        LD         A,(IX+0xc)
        ram:3283 f6 03           OR         0x3
        ram:3285 dd 77 0c        LD         (IX+0xc),A
                             UpdateCharacterAnimation::skip_special_80_flag               XREF[3]:     UpdateCharacterAnimation:32d9(j),
                                                                                          ram:3343(j), ram:334c(j)
        ram:3351 dd 7e 0c        LD         A,(IX+0xc)
        ram:3354 e6 08           AND        0x8
        ram:3356 c4 0a 08        CALL       NZ,UpdateSpriteXAndYOffsetsAfterScroll           undefined UpdateSpriteXAndYOffse
---
        ram:340c dd 7e 0c        LD         A,(IX+0xc)                                       still enemy sprite
        ram:340f e6 01           AND        0x1
        ram:3411 20 3d           JR         NZ,LAB_ram_3450
---
        ram:3455 dd 7e 0c        LD         A,(IX+0xc)
        ram:3458 e6 02           AND        0x2
        ram:345a cc d9 34        CALL       Z,Maybe_CheckEnemyTouchesPlayer                  undefined Maybe_CheckEnemyTouche
                             Maybe_KillCurrentEnemy02                        XREF[3]:     Maybe_DrawPlayersLegs02:358c(j),
                                                                                          Maybe_DrawPlayersLegs02:358e(j),
                                                                                          Maybe_PlayerTouchesPOW:b61a(c)
        ram:359c dd 7e 0c        LD         A,(IX+0xc)
        ram:359f f6 03           OR         0x3
        ram:35a1 dd 77 0c        LD         (IX+0xc),A
                             Maybe_KillCurrentEnemy02::defeated              XREF[2]:     ram:35e8(j), ram:35ea(j)
        ram:35f8 dd 7e 0c        LD         A,(IX+0xc)
        ram:35fb f6 03           OR         0x3
        ram:35fd dd 77 0c        LD         (IX+0xc),A
Maybe_DoOneFrame4x4BossCharacter
                             LAB_ram_373c                                    XREF[3]:     ram:365e(j), ram:372e(j),
                                                                                          ram:3737(j)
        ram:373c dd 7e 0c        LD         A,(IX+0xc)
        ram:373f e6 08           AND        0x8
        ram:3741 c4 0a 08        CALL       NZ,UpdateSpriteXAndYOffsetsAfterScroll           undefined UpdateSpriteXAndYOffse
---
        ram:396d dd 7e 0c        LD         A,(IX+0xc)
        ram:3970 e6 01           AND        0x1
        ram:3972 20 38           JR         NZ,LAB_ram_39ac
---
        ram:39b1 dd 7e 0c        LD         A,(IX+0xc)
        ram:39b4 e6 02           AND        0x2 -- can be touched??
        ram:39b6 c0              RET        NZ
                             InjureOrDefeatWarhogBoss::defeated                                        XREF[2]:     ram:3ccf(j), ram:3cd1(j)
        ram:3cdf dd 7e 0c        LD         A,(IX+0xc)
        ram:3ce2 f6 03           OR         0x3
        ram:3ce4 dd 77 0c        LD         (IX+0xc),A
                             InjureOrDefeatWarhogBoss::defeated_2                                      XREF[2]:     ram:3d1d(j), ram:3d1f(j)
        ram:3d2d dd 7e 0c        LD         A,(IX+0xc)
        ram:3d30 f6 03           OR         0x3
        ram:3d32 dd 77 0c        LD         (IX+0xc),A
                             DrawOneDragonFrame::LAB_ram_3f24                                    XREF[2]:     ram:3efa(j), ram:3f13(j)
        ram:3f24 dd 7e 0c        LD         A,(IX+0xc)
        ram:3f27 e6 08           AND        0x8
        ram:3f29 c4 0a 08        CALL       NZ,UpdateSpriteXAndYOffsetsAfterScroll           undefined UpdateSpriteXAndYOffse
--
        ram:4309 dd 7e 0c        LD         A,(IX+0xc)
        ram:430c e6 01           AND        0x1
        ram:430e 20 38           JR         NZ,LAB_ram_4348
--
        ram:434d dd 7e 0c        LD         A,(IX+0xc)
        ram:4350 e6 02           AND        0x2
        ram:4352 c0              RET        NZ
                             Maybe_DefeatSomethingForPoints                  XREF[1]:     Maybe_AnotherPlayerFlailAttack:4
                             defeated                                        XREF[2]:     ram:4687(j), ram:4689(j)
        ram:4697 dd 7e 0c        LD         A,(IX+0xc)
        ram:469a f6 03           OR         0x3
        ram:469c dd 77 0c        LD         (IX+0xc),A
